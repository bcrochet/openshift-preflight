// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package pyxis

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ALMExample struct {
		APIVersion func(childComplexity int) int
		Kind       func(childComplexity int) int
	}

	AnalyticsPageViews struct {
		ByDate         func(childComplexity int) int
		TotalPageviews func(childComplexity int) int
	}

	AnalyticsPageViewsByDate struct {
		ActivityDate func(childComplexity int) int
		Pageviews    func(childComplexity int) int
	}

	AnalyticsPageViewsResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	AnalyticsPullCount struct {
		ByCustomers    func(childComplexity int) int
		ByTags         func(childComplexity int) int
		TotalCountries func(childComplexity int) int
		TotalCustomers func(childComplexity int) int
		TotalPulls     func(childComplexity int) int
	}

	AnalyticsPullCountByCostumer struct {
		Country      func(childComplexity int) int
		CustomerName func(childComplexity int) int
		DownloadDate func(childComplexity int) int
		PullCount    func(childComplexity int) int
	}

	AnalyticsPullCountByTag struct {
		DownloadDate func(childComplexity int) int
		ImageTags    func(childComplexity int) int
		PullCount    func(childComplexity int) int
	}

	AnalyticsPullCountResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ApiKey struct {
		CompanyID   func(childComplexity int) int
		Created     func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		LastUsed    func(childComplexity int) int
		OrgID       func(childComplexity int) int
	}

	ApiKeyListResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ApiKeyResponse struct {
		APIKey  func(childComplexity int) int
		KeyData func(childComplexity int) int
	}

	Assessment struct {
		Name                     func(childComplexity int) int
		RequiredForCertification func(childComplexity int) int
		Value                    func(childComplexity int) int
	}

	BadgesItems struct {
		Badge     func(childComplexity int) int
		ProjectID func(childComplexity int) int
	}

	BinarySignature struct {
		BinarySignature func(childComplexity int) int
	}

	BinarySignatureResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	Brew struct {
		Build          func(childComplexity int) int
		CompletionDate func(childComplexity int) int
		Nvra           func(childComplexity int) int
		Package        func(childComplexity int) int
	}

	CVE struct {
		ID  func(childComplexity int) int
		URL func(childComplexity int) int
	}

	CertProjectArtifact struct {
		CertProject         func(childComplexity int) int
		CertificationHash   func(childComplexity int) int
		Content             func(childComplexity int) int
		ContentType         func(childComplexity int) int
		CreationDate        func(childComplexity int) int
		Edges               func(childComplexity int) int
		FileSize            func(childComplexity int) int
		Filename            func(childComplexity int) int
		ID                  func(childComplexity int) int
		ImageID             func(childComplexity int) int
		LastUpdateDate      func(childComplexity int) int
		OperatorPackageName func(childComplexity int) int
		OrgID               func(childComplexity int) int
		Version             func(childComplexity int) int
	}

	CertProjectArtifactEdges struct {
		CertProject    func(childComplexity int) int
		ContainerImage func(childComplexity int) int
	}

	CertProjectArtifactPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	CertProjectArtifactResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	CertProjectBuildLog struct {
		Log func(childComplexity int) int
	}

	CertProjectBuildLogResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	CertProjectBuildRequest struct {
		CertProject    func(childComplexity int) int
		CreationDate   func(childComplexity int) int
		Edges          func(childComplexity int) int
		ID             func(childComplexity int) int
		LastUpdateDate func(childComplexity int) int
		OrgID          func(childComplexity int) int
		Status         func(childComplexity int) int
		StatusMessage  func(childComplexity int) int
		Tag            func(childComplexity int) int
	}

	CertProjectBuildRequestEdges struct {
		CertProject func(childComplexity int) int
		Logs        func(childComplexity int) int
	}

	CertProjectBuildRequestPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	CertProjectBuildRequestResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	CertProjectContacts struct {
		EmailAddress func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	CertProjectContainer struct {
		ApplicationCategories    func(childComplexity int) int
		AutoPublish              func(childComplexity int) int
		AutoRebuild              func(childComplexity int) int
		BuildNoCache             func(childComplexity int) int
		BuildService             func(childComplexity int) int
		DistributionApproval     func(childComplexity int) int
		DistributionMethod       func(childComplexity int) int
		DockerConfigJSON         func(childComplexity int) int
		Edges                    func(childComplexity int) int
		GithubUsernames          func(childComplexity int) int
		IsvPid                   func(childComplexity int) int
		KubeObjects              func(childComplexity int) int
		OsContentType            func(childComplexity int) int
		PassedRhcert             func(childComplexity int) int
		Privileged               func(childComplexity int) int
		Published                func(childComplexity int) int
		Registry                 func(childComplexity int) int
		RegistryOverrideInstruct func(childComplexity int) int
		ReleaseCategory          func(childComplexity int) int
		Repository               func(childComplexity int) int
		RepositoryDescription    func(childComplexity int) int
		RepositoryName           func(childComplexity int) int
		ServiceAccountSecret     func(childComplexity int) int
		ShortDescription         func(childComplexity int) int
		SourceContextDir         func(childComplexity int) int
		SourceDockerfile         func(childComplexity int) int
		SourceRef                func(childComplexity int) int
		SourceSSHPrivateKey      func(childComplexity int) int
		SourceURI                func(childComplexity int) int
		SupportPlatforms         func(childComplexity int) int
		Type                     func(childComplexity int) int
	}

	CertProjectContainerEdges struct {
		Repository func(childComplexity int) int
	}

	CertProjectDrupal struct {
		CompanyID func(childComplexity int) int
		Relation  func(childComplexity int) int
		Zone      func(childComplexity int) int
	}

	CertProjectHelmChart struct {
		ApplicationCategories    func(childComplexity int) int
		ChartName                func(childComplexity int) int
		DistributionInstructions func(childComplexity int) int
		DistributionMethod       func(childComplexity int) int
		GithubPullRequest        func(childComplexity int) int
		GithubUsernames          func(childComplexity int) int
		LongDescription          func(childComplexity int) int
		PublicPGPKey             func(childComplexity int) int
		Repository               func(childComplexity int) int
		ShortDescription         func(childComplexity int) int
	}

	CertProjectMarketplace struct {
		EnablementStatus func(childComplexity int) int
		EnablementURL    func(childComplexity int) int
		ListingURL       func(childComplexity int) int
		Published        func(childComplexity int) int
	}

	CertProjectRedhat struct {
		ProductID        func(childComplexity int) int
		ProductName      func(childComplexity int) int
		ProductVersion   func(childComplexity int) int
		ProductVersionID func(childComplexity int) int
	}

	CertProjectScanRequest struct {
		CertProject       func(childComplexity int) int
		CreationDate      func(childComplexity int) int
		Edges             func(childComplexity int) int
		ExternalTestsLink func(childComplexity int) int
		ID                func(childComplexity int) int
		LastUpdateDate    func(childComplexity int) int
		OrgID             func(childComplexity int) int
		PullSpec          func(childComplexity int) int
		ScanUUID          func(childComplexity int) int
		Status            func(childComplexity int) int
		StatusMessage     func(childComplexity int) int
		Tag               func(childComplexity int) int
	}

	CertProjectScanRequestEdges struct {
		CertProject func(childComplexity int) int
	}

	CertProjectScanRequestPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	CertProjectScanRequestResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	CertProjectSelfCertification struct {
		AppProfiler          func(childComplexity int) int
		AppRunsOnAppType     func(childComplexity int) int
		AuthLogin            func(childComplexity int) int
		CertificationURL     func(childComplexity int) int
		CommSupportOnAppType func(childComplexity int) int
		Requested            func(childComplexity int) int
		TsanetMember         func(childComplexity int) int
	}

	CertProjectTagRequest struct {
		CertProject    func(childComplexity int) int
		CreationDate   func(childComplexity int) int
		Edges          func(childComplexity int) int
		ID             func(childComplexity int) int
		ImageID        func(childComplexity int) int
		LastUpdateDate func(childComplexity int) int
		Operation      func(childComplexity int) int
		OrgID          func(childComplexity int) int
		Status         func(childComplexity int) int
		StatusMessage  func(childComplexity int) int
		Tag            func(childComplexity int) int
	}

	CertProjectTagRequestEdges struct {
		CertProject func(childComplexity int) int
		Image       func(childComplexity int) int
	}

	CertProjectTagRequestPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	CertProjectTagRequestResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	CertProjectTestResult struct {
		CertProject         func(childComplexity int) int
		CertificationHash   func(childComplexity int) int
		CreationDate        func(childComplexity int) int
		Edges               func(childComplexity int) int
		ID                  func(childComplexity int) int
		Image               func(childComplexity int) int
		ImageID             func(childComplexity int) int
		LastUpdateDate      func(childComplexity int) int
		OperatorPackageName func(childComplexity int) int
		OrgID               func(childComplexity int) int
		Passed              func(childComplexity int) int
		PullRequest         func(childComplexity int) int
		Results             func(childComplexity int) int
		TestLibrary         func(childComplexity int) int
		TestedOn            func(childComplexity int) int
		Version             func(childComplexity int) int
	}

	CertProjectTestResultEdges struct {
		CertProject    func(childComplexity int) int
		ContainerImage func(childComplexity int) int
	}

	CertProjectTestResultPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	CertProjectTestResultResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	Certification struct {
		Assessment func(childComplexity int) int
	}

	CertificationProject struct {
		CertificationDate    func(childComplexity int) int
		CertificationStatus  func(childComplexity int) int
		CertificationUser    func(childComplexity int) int
		Contacts             func(childComplexity int) int
		Container            func(childComplexity int) int
		CreationDate         func(childComplexity int) int
		Drupal               func(childComplexity int) int
		Edges                func(childComplexity int) int
		HelmChart            func(childComplexity int) int
		ID                   func(childComplexity int) int
		LastUpdateDate       func(childComplexity int) int
		Marketplace          func(childComplexity int) int
		Name                 func(childComplexity int) int
		OperatorDistribution func(childComplexity int) int
		OrgID                func(childComplexity int) int
		ProductListings      func(childComplexity int) int
		ProjectStatus        func(childComplexity int) int
		PublishedBy          func(childComplexity int) int
		Redhat               func(childComplexity int) int
		SelfCertification    func(childComplexity int) int
		Type                 func(childComplexity int) int
	}

	CertificationProjectEdges struct {
		BuildRequests func(childComplexity int, pageSize *int, page *int, filter *model.CertProjectBuildRequestFilter, sortBy []*model.SortBy) int
		ScanRequests  func(childComplexity int, pageSize *int, page *int, filter *model.CertProjectScanRequestFilter, sortBy []*model.SortBy) int
		TagRequests   func(childComplexity int, pageSize *int, page *int, filter *model.CertProjectTagRequestFilter, sortBy []*model.SortBy) int
		Vendor        func(childComplexity int) int
	}

	CertificationProjectPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	CertificationProjectResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ContactsItems struct {
		EmailAddress func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	ContainerFile struct {
		Content  func(childComplexity int) int
		Filename func(childComplexity int) int
		Key      func(childComplexity int) int
	}

	ContainerFilePaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	ContainerGrades struct {
		Architecture    func(childComplexity int) int
		CurrentGrade    func(childComplexity int) int
		Edges           func(childComplexity int) int
		FreshnessGrades func(childComplexity int) int
		ImageID         func(childComplexity int) int
		NextDropDate    func(childComplexity int) int
		Tag             func(childComplexity int) int
	}

	ContainerGradesEdges struct {
		Image func(childComplexity int) int
	}

	ContainerGradesListResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ContainerImage struct {
		Architecture           func(childComplexity int) int
		Brew                   func(childComplexity int) int
		Certifications         func(childComplexity int) int
		Certified              func(childComplexity int) int
		ContentSets            func(childComplexity int) int
		CpeIds                 func(childComplexity int) int
		CpeIdsRhBaseImages     func(childComplexity int) int
		CreationDate           func(childComplexity int) int
		Deleted                func(childComplexity int) int
		DockerImageDigest      func(childComplexity int) int
		DockerImageID          func(childComplexity int) int
		Edges                  func(childComplexity int) int
		FreshnessGrades        func(childComplexity int) int
		ID                     func(childComplexity int) int
		ImageID                func(childComplexity int) int
		IsvPid                 func(childComplexity int) int
		LastUpdateDate         func(childComplexity int) int
		ObjectType             func(childComplexity int) int
		ParsedData             func(childComplexity int) int
		RawConfig              func(childComplexity int) int
		Repositories           func(childComplexity int) int
		ScanStatus             func(childComplexity int) int
		SumLayerSizeBytes      func(childComplexity int) int
		TopLayerID             func(childComplexity int) int
		UncompressedTopLayerID func(childComplexity int) int
	}

	ContainerImageEdges struct {
		Artifacts       func(childComplexity int, pageSize *int, page *int, filter *model.CertProjectArtifactFilter, sortBy []*model.SortBy) int
		RpmManifest     func(childComplexity int) int
		TestResults     func(childComplexity int, pageSize *int, page *int, filter *model.CertProjectTestResultFilter, sortBy []*model.SortBy) int
		Vulnerabilities func(childComplexity int, pageSize *int, page *int, filter *model.ContainerImageVulnerabilityFilter, sortBy []*model.SortBy) int
	}

	ContainerImagePaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	ContainerImageRPMManifest struct {
		CreationDate   func(childComplexity int) int
		Edges          func(childComplexity int) int
		ID             func(childComplexity int) int
		ImageID        func(childComplexity int) int
		LastUpdateDate func(childComplexity int) int
		ObjectType     func(childComplexity int) int
		Rpms           func(childComplexity int) int
	}

	ContainerImageRPMManifestEdges struct {
		Image func(childComplexity int) int
	}

	ContainerImageRPMManifestResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ContainerImageRepo struct {
		Comparison            func(childComplexity int) int
		ContentAdvisoryIds    func(childComplexity int) int
		Edges                 func(childComplexity int) int
		ImageAdvisoryID       func(childComplexity int) int
		ManifestListDigest    func(childComplexity int) int
		ManifestSchema2Digest func(childComplexity int) int
		Published             func(childComplexity int) int
		PublishedDate         func(childComplexity int) int
		PushDate              func(childComplexity int) int
		Registry              func(childComplexity int) int
		Repository            func(childComplexity int) int
		Signatures            func(childComplexity int) int
		Tags                  func(childComplexity int) int
	}

	ContainerImageRepoComparison struct {
		AdvisoryRpmMapping func(childComplexity int) int
		Reason             func(childComplexity int) int
		ReasonText         func(childComplexity int) int
		Rpms               func(childComplexity int) int
		WithNvr            func(childComplexity int) int
	}

	ContainerImageRepoComparisonMapping struct {
		AdvisoryIds func(childComplexity int) int
		Nvra        func(childComplexity int) int
	}

	ContainerImageRepoComparisonRPMs struct {
		Downgrade func(childComplexity int) int
		New       func(childComplexity int) int
		Remove    func(childComplexity int) int
		Upgrade   func(childComplexity int) int
	}

	ContainerImageRepoEdges struct {
		ImageAdvisory func(childComplexity int) int
		Repository    func(childComplexity int) int
	}

	ContainerImageRepoTag struct {
		AddedDate             func(childComplexity int) int
		Edges                 func(childComplexity int) int
		ManifestSchema1Digest func(childComplexity int) int
		Name                  func(childComplexity int) int
		RemovedDate           func(childComplexity int) int
	}

	ContainerImageRepoTagEdges struct {
		TagHistory func(childComplexity int) int
	}

	ContainerImageResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ContainerImageVulnerability struct {
		AdvisoryID     func(childComplexity int) int
		AdvisoryType   func(childComplexity int) int
		CreationDate   func(childComplexity int) int
		CveID          func(childComplexity int) int
		Edges          func(childComplexity int) int
		ID             func(childComplexity int) int
		LastUpdateDate func(childComplexity int) int
		ObjectType     func(childComplexity int) int
		Packages       func(childComplexity int) int
		PublicDate     func(childComplexity int) int
		Severity       func(childComplexity int) int
	}

	ContainerImageVulnerabilityEdges struct {
		Advisory func(childComplexity int) int
	}

	ContainerImageVulnerabilityFixedByImage struct {
		Edges        func(childComplexity int) int
		ID           func(childComplexity int) int
		Repositories func(childComplexity int) int
	}

	ContainerImageVulnerabilityFixedByImageEdges struct {
		Image func(childComplexity int) int
	}

	ContainerImageVulnerabilityFixedByRepository struct {
		Registry   func(childComplexity int) int
		Repository func(childComplexity int) int
		Tags       func(childComplexity int) int
	}

	ContainerImageVulnerabilityPackage struct {
		FixedByImage func(childComplexity int) int
		RpmNvra      func(childComplexity int) int
		SrpmNevra    func(childComplexity int) int
	}

	ContainerImageVulnerabilityPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	ContainerImageVulnerabilityResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ContainerImageVulnerabilityTag struct {
		Name func(childComplexity int) int
	}

	ContainerRepository struct {
		ApplicationCategories           func(childComplexity int) int
		Architectures                   func(childComplexity int) int
		AutoRebuildTags                 func(childComplexity int) int
		Beta                            func(childComplexity int) int
		BuildCategories                 func(childComplexity int) int
		CanAutoReleaseCveRebuild        func(childComplexity int) int
		CdnBaseURL                      func(childComplexity int) int
		ContentSets                     func(childComplexity int) int
		ContentStreamGrades             func(childComplexity int) int
		ContentStreamTags               func(childComplexity int) int
		CreationDate                    func(childComplexity int) int
		Deprecated                      func(childComplexity int) int
		Description                     func(childComplexity int) int
		DisplayData                     func(childComplexity int) int
		DocumentationLinks              func(childComplexity int) int
		Edges                           func(childComplexity int) int
		EolDate                         func(childComplexity int) int
		FreshnessGradesUnknownUntilDate func(childComplexity int) int
		ID                              func(childComplexity int) int
		IncludesMultipleContentStreams  func(childComplexity int) int
		IsCommunitySupported            func(childComplexity int) int
		IsvPid                          func(childComplexity int) int
		LabelOverride                   func(childComplexity int) int
		LastUpdateDate                  func(childComplexity int) int
		Metrics                         func(childComplexity int) int
		Namespace                       func(childComplexity int) int
		NonProductionOnly               func(childComplexity int) int
		ObjectType                      func(childComplexity int) int
		PrivilegedImagesAllowed         func(childComplexity int) int
		PrmProjectID                    func(childComplexity int) int
		ProductID                       func(childComplexity int) int
		ProductListings                 func(childComplexity int) int
		ProductVersions                 func(childComplexity int) int
		ProtectedForPull                func(childComplexity int) int
		ProtectedForSearch              func(childComplexity int) int
		Published                       func(childComplexity int) int
		Registry                        func(childComplexity int) int
		RegistryTarget                  func(childComplexity int) int
		ReleaseCategories               func(childComplexity int) int
		ReplacedByRepositoryName        func(childComplexity int) int
		Repository                      func(childComplexity int) int
		RequiresTerms                   func(childComplexity int) int
		RunsOn                          func(childComplexity int) int
		SourceContainerImageEnabled     func(childComplexity int) int
		SupportLevels                   func(childComplexity int) int
		TechPreview                     func(childComplexity int) int
		TotalSizeBytes                  func(childComplexity int) int
		TotalUncompressedSizeBytes      func(childComplexity int) int
		UIGetThisImageOverride          func(childComplexity int) int
		VendorLabel                     func(childComplexity int) int
	}

	ContainerRepositoryEdges struct {
		CertificationProject func(childComplexity int, pageSize *int, page *int, filter *model.CertificationProjectFilter, sortBy []*model.SortBy) int
		Images               func(childComplexity int, pageSize *int, page *int, filter *model.ContainerImageFilter, sortBy []*model.SortBy) int
		OperatorBundles      func(childComplexity int, pageSize *int, page *int, filter *model.OperatorBundleFilter, sortBy []*model.SortBy) int
		ProductListings      func(childComplexity int, pageSize *int, page *int, filter *model.ProductListingFilter, sortBy []*model.SortBy) int
		ReplacedByRepository func(childComplexity int) int
		Vendor               func(childComplexity int) int
	}

	ContainerRepositoryPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	ContainerRepositoryResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ContainerTagHistory struct {
		CreationDate   func(childComplexity int) int
		Edges          func(childComplexity int) int
		History        func(childComplexity int) int
		ID             func(childComplexity int) int
		LastUpdateDate func(childComplexity int) int
		ObjectType     func(childComplexity int) int
		Registry       func(childComplexity int) int
		Repository     func(childComplexity int) int
		Tag            func(childComplexity int) int
		TagType        func(childComplexity int) int
	}

	ContainerTagHistoryEdges struct {
		Images func(childComplexity int, pageSize *int, page *int, filter *model.ContainerImageFilter, sortBy []*model.SortBy) int
	}

	ContainerTagHistoryPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	ContainerTagHistoryResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ContainerVendor struct {
		CompanyURL          func(childComplexity int) int
		Contact             func(childComplexity int) int
		CreationDate        func(childComplexity int) int
		Description         func(childComplexity int) int
		DrupalCompanyID     func(childComplexity int) int
		Edges               func(childComplexity int) int
		ID                  func(childComplexity int) int
		Industries          func(childComplexity int) int
		Label               func(childComplexity int) int
		LabelLocked         func(childComplexity int) int
		LastUpdateDate      func(childComplexity int) int
		LogoURL             func(childComplexity int) int
		Name                func(childComplexity int) int
		ObjectType          func(childComplexity int) int
		OrgID               func(childComplexity int) int
		Published           func(childComplexity int) int
		RegistryUrls        func(childComplexity int) int
		RssFeedURL          func(childComplexity int) int
		ServiceAccountToken func(childComplexity int) int
		SocialMediaLinks    func(childComplexity int) int
	}

	ContainerVendorContact struct {
		Email func(childComplexity int) int
		Phone func(childComplexity int) int
	}

	ContainerVendorEdges struct {
		ProductListingsLabel func(childComplexity int, pageSize *int, page *int, filter *model.ProductListingFilter, sortBy []*model.SortBy) int
		ProductListingsOrgID func(childComplexity int, pageSize *int, page *int, filter *model.ProductListingFilter, sortBy []*model.SortBy) int
		Repositories         func(childComplexity int, pageSize *int, page *int, filter *model.ContainerRepositoryFilter, sortBy []*model.SortBy) int
	}

	ContainerVendorResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ContainerVendorSocialMediaLinks struct {
		Name func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	Descriptions struct {
		Long  func(childComplexity int) int
		Short func(childComplexity int) int
	}

	FAQSItems struct {
		Answer   func(childComplexity int) int
		Question func(childComplexity int) int
	}

	FeaturesItems struct {
		Description func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	ForwarderStatus struct {
		Forwarders func(childComplexity int) int
	}

	ForwarderStatusInfo struct {
		Status func(childComplexity int) int
	}

	ForwarderStatusResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	Forwarders struct {
		Fluentd func(childComplexity int) int
	}

	FreshnessGrade struct {
		CreationDate func(childComplexity int) int
		EndDate      func(childComplexity int) int
		Grade        func(childComplexity int) int
		StartDate    func(childComplexity int) int
	}

	History struct {
		BrewBuild func(childComplexity int) int
		EndDate   func(childComplexity int) int
		StartDate func(childComplexity int) int
	}

	Issue struct {
		ID           func(childComplexity int) int
		IssueTracker func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	Label struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Legal struct {
		Description         func(childComplexity int) int
		LicenseAgreementURL func(childComplexity int) int
		PrivacyPolicyURL    func(childComplexity int) int
	}

	LinkedResourcesItems struct {
		Category     func(childComplexity int) int
		Description  func(childComplexity int) int
		ThumbnailURL func(childComplexity int) int
		Title        func(childComplexity int) int
		Type         func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	Logo struct {
		URL func(childComplexity int) int
	}

	Marketplace struct {
		EnablementStatus func(childComplexity int) int
		EnablementURL    func(childComplexity int) int
		ListingURL       func(childComplexity int) int
		Published        func(childComplexity int) int
	}

	Mutation struct {
		CreateAPIKey                                    func(childComplexity int, input *model.APIKeyInput) int
		CreateCertificationProject                      func(childComplexity int, input *model.CertificationProjectInput) int
		CreateCertificationProjectArtifact              func(childComplexity int, id *string, input *model.CertProjectTestResultInput) int
		CreateCertificationProjectBuildRequest          func(childComplexity int, id *string, input *model.CertProjectBuildRequestInput) int
		CreateCertificationProjectScanRequest           func(childComplexity int, id *string, input *model.CertProjectScanRequestInput) int
		CreateCertificationProjectTagRequest            func(childComplexity int, id *string, input *model.CertProjectTagRequestInput) int
		CreateCertificationProjectTestResult            func(childComplexity int, id *string, input *model.CertProjectTestResultInput) int
		CreateImage                                     func(childComplexity int, input *model.ContainerImageInput) int
		CreateImageRpmManifest                          func(childComplexity int, id *string, input *model.ContainerImageRPMManifestInput) int
		CreateProductListing                            func(childComplexity int, input *model.ProductListingInput) int
		DeleteAPIKey                                    func(childComplexity int, keyID *int) int
		PatchImageByManifestDigestRegistryAndRepository func(childComplexity int, repository *string, registry *string, manifestDigest *string, input *model.ContainerImageInput) int
		PutImageByManifestDigestRegistryAndRepository   func(childComplexity int, repository *string, registry *string, manifestDigest *string, input *model.ContainerImageInput) int
		ReplaceCertificationProject                     func(childComplexity int, id *string, input *model.CertificationProjectInput) int
		ReplaceImage                                    func(childComplexity int, id *string, input *model.ContainerImageInput) int
		ReplaceImageRpmManifest                         func(childComplexity int, id *string, input *model.ContainerImageRPMManifestInput) int
		ReplaceProductListing                           func(childComplexity int, id *string, input *model.ProductListingInput) int
		UpdateCertificationProject                      func(childComplexity int, id *string, input *model.CertificationProjectInput) int
		UpdateCertificationProjectTestResult            func(childComplexity int, id *string, input *model.CertProjectTestResultInput) int
		UpdateImage                                     func(childComplexity int, id *string, input *model.ContainerImageInput) int
		UpdateImageRpmManifest                          func(childComplexity int, id *string, input *model.ContainerImageRPMManifestInput) int
		UpdateProductListing                            func(childComplexity int, id *string, input *model.ProductListingInput) int
		UpdateVendor                                    func(childComplexity int, id *string, input *model.ContainerVendorInput) int
	}

	OperatorBundle struct {
		AlmExamples              func(childComplexity int) int
		Annotations              func(childComplexity int) int
		Architectures            func(childComplexity int) int
		Bundle                   func(childComplexity int) int
		BundlePath               func(childComplexity int) int
		BundlePathDigest         func(childComplexity int) int
		CSVDescription           func(childComplexity int) int
		CSVDisplayName           func(childComplexity int) int
		CSVMetadataDescription   func(childComplexity int) int
		CSVName                  func(childComplexity int) int
		Capabilities             func(childComplexity int) int
		ChannelName              func(childComplexity int) int
		CreationDate             func(childComplexity int) int
		ID                       func(childComplexity int) int
		InIndexImg               func(childComplexity int) int
		InstallModes             func(childComplexity int) int
		IsDefaultChannel         func(childComplexity int) int
		LastUpdateDate           func(childComplexity int) int
		LatestInChannel          func(childComplexity int) int
		OcpVersion               func(childComplexity int) int
		Organization             func(childComplexity int) int
		Package                  func(childComplexity int) int
		ProvidedApis             func(childComplexity int) int
		RelatedImages            func(childComplexity int) int
		Replaces                 func(childComplexity int) int
		SkipRange                func(childComplexity int) int
		Skips                    func(childComplexity int) int
		SourceIndexContainerPath func(childComplexity int) int
		Version                  func(childComplexity int) int
		VersionOriginal          func(childComplexity int) int
	}

	OperatorBundleAnnotation struct {
		InfrastructureFeatures func(childComplexity int) int
		ValidSubscription      func(childComplexity int) int
	}

	OperatorBundleInstallMode struct {
		Supported func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	OperatorBundlePaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	OperatorBundlesItems struct {
		Capabilities func(childComplexity int) int
		ID           func(childComplexity int) int
		Package      func(childComplexity int) int
	}

	OperatorIndex struct {
		CreationDate   func(childComplexity int) int
		EndOfLife      func(childComplexity int) int
		ID             func(childComplexity int) int
		LastUpdateDate func(childComplexity int) int
		OcpVersion     func(childComplexity int) int
		Organization   func(childComplexity int) int
		Path           func(childComplexity int) int
	}

	OperatorIndexPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	OperatorIndexResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	OperatorPackage struct {
		Association    func(childComplexity int) int
		CreationDate   func(childComplexity int) int
		ID             func(childComplexity int) int
		LastUpdateDate func(childComplexity int) int
		PackageName    func(childComplexity int) int
		Source         func(childComplexity int) int
	}

	OperatorPackagePaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	OperatorPackageResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ParsedData struct {
		Architecture           func(childComplexity int) int
		Author                 func(childComplexity int) int
		Command                func(childComplexity int) int
		Comment                func(childComplexity int) int
		Container              func(childComplexity int) int
		Created                func(childComplexity int) int
		DockerImageDigest      func(childComplexity int) int
		DockerImageID          func(childComplexity int) int
		DockerVersion          func(childComplexity int) int
		EnvVariables           func(childComplexity int) int
		ImageID                func(childComplexity int) int
		Labels                 func(childComplexity int) int
		Layers                 func(childComplexity int) int
		Os                     func(childComplexity int) int
		Ports                  func(childComplexity int) int
		Repos                  func(childComplexity int) int
		Size                   func(childComplexity int) int
		UncompressedLayerSizes func(childComplexity int) int
		UncompressedSizeBytes  func(childComplexity int) int
		User                   func(childComplexity int) int
		VirtualSize            func(childComplexity int) int
	}

	ParsedDataRepo struct {
		Baseurl  func(childComplexity int) int
		Expire   func(childComplexity int) int
		Filename func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Pkgs     func(childComplexity int) int
		Size     func(childComplexity int) int
		Updated  func(childComplexity int) int
	}

	ProductListing struct {
		Badges                  func(childComplexity int) int
		Category                func(childComplexity int) int
		CertProjects            func(childComplexity int) int
		Contacts                func(childComplexity int) int
		CreationDate            func(childComplexity int) int
		Deleted                 func(childComplexity int) int
		Descriptions            func(childComplexity int) int
		DrupalCompanyID         func(childComplexity int) int
		Edges                   func(childComplexity int) int
		Faqs                    func(childComplexity int) int
		Features                func(childComplexity int) int
		FunctionalCategories    func(childComplexity int) int
		ID                      func(childComplexity int) int
		LastUpdateDate          func(childComplexity int) int
		Legal                   func(childComplexity int) int
		LinkedResources         func(childComplexity int) int
		Logo                    func(childComplexity int) int
		Marketplace             func(childComplexity int) int
		Name                    func(childComplexity int) int
		OperatorBundles         func(childComplexity int) int
		OrgID                   func(childComplexity int) int
		Published               func(childComplexity int) int
		QuickStartConfiguration func(childComplexity int) int
		Repositories            func(childComplexity int) int
		SearchAliases           func(childComplexity int) int
		Support                 func(childComplexity int) int
		Type                    func(childComplexity int) int
		VendorLabel             func(childComplexity int) int
	}

	ProductListingEdges struct {
		Vendor func(childComplexity int) int
	}

	ProductListingPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	ProductListingResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	ProvidedAPIsItems struct {
		Group   func(childComplexity int) int
		Kind    func(childComplexity int) int
		Plural  func(childComplexity int) int
		Version func(childComplexity int) int
	}

	PullRequest struct {
		ID     func(childComplexity int) int
		Status func(childComplexity int) int
		URL    func(childComplexity int) int
	}

	Query struct {
		FindCertificationProjectsImages    func(childComplexity int, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.ContainerImageFilter) int
		FindImages                         func(childComplexity int, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.ContainerImageFilter) int
		GetCertProjectArtifact             func(childComplexity int, id *string) int
		GetCertProjectArtifacts            func(childComplexity int, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.CertProjectArtifactFilter) int
		GetCertProjectTestResult           func(childComplexity int, id *string) int
		GetCertProjectTestResults          func(childComplexity int, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.CertProjectTestResultFilter) int
		GetCertificationArtifactsByImageID func(childComplexity int, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.CertProjectArtifactFilter) int
		GetCertificationProject            func(childComplexity int, id *string) int
		GetCertificationProjectByPid       func(childComplexity int, pid *string) int
		GetImage                           func(childComplexity int, id *string) int
		GetImageRpmManifest                func(childComplexity int, id *string) int
		GetRpmManifest                     func(childComplexity int, id *string) int
		GetTestResultsByImageID            func(childComplexity int, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.CertProjectTestResultFilter) int
	}

	QuickStartConfiguration struct {
		Instructions func(childComplexity int) int
	}

	RedHatContainerAdvisory struct {
		ContentType    func(childComplexity int) int
		CreationDate   func(childComplexity int) int
		Cves           func(childComplexity int) int
		Description    func(childComplexity int) int
		ID             func(childComplexity int) int
		Issues         func(childComplexity int) int
		LastUpdateDate func(childComplexity int) int
		ObjectType     func(childComplexity int) int
		Severity       func(childComplexity int) int
		ShipDate       func(childComplexity int) int
		Solution       func(childComplexity int) int
		Synopsis       func(childComplexity int) int
		Topic          func(childComplexity int) int
		Type           func(childComplexity int) int
	}

	RedHatContainerAdvisoryPaginatedResponse struct {
		Data     func(childComplexity int) int
		Error    func(childComplexity int) int
		Page     func(childComplexity int) int
		PageSize func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	RedHatContainerAdvisoryResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	RelatedImagesItems struct {
		Digest func(childComplexity int) int
		Image  func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	RepositoryContentStreamGrades struct {
		Grade func(childComplexity int) int
		Tag   func(childComplexity int) int
	}

	RepositoryDisplayData struct {
		LongDescription         func(childComplexity int) int
		LongDescriptionMarkdown func(childComplexity int) int
		Name                    func(childComplexity int) int
		OpenshiftTags           func(childComplexity int) int
		ShortDescription        func(childComplexity int) int
	}

	RepositoryDocumentationLink struct {
		Title func(childComplexity int) int
		Type  func(childComplexity int) int
		URL   func(childComplexity int) int
	}

	RepositoryLabelOverride struct {
		Description      func(childComplexity int) int
		IoK8sDisplayName func(childComplexity int) int
		IoOpenshiftTags  func(childComplexity int) int
		Summary          func(childComplexity int) int
	}

	RepositoryMetrics struct {
		LastUpdateDate    func(childComplexity int) int
		PullsInLast30Days func(childComplexity int) int
	}

	RepositoryRunsOn struct {
		OpenshiftOnline func(childComplexity int) int
	}

	ResponseError struct {
		Detail func(childComplexity int) int
		Status func(childComplexity int) int
	}

	Results struct {
		Errors func(childComplexity int) int
		Failed func(childComplexity int) int
		Passed func(childComplexity int) int
	}

	RpmsItems struct {
		Architecture func(childComplexity int) int
		Gpg          func(childComplexity int) int
		Name         func(childComplexity int) int
		Nvra         func(childComplexity int) int
		Release      func(childComplexity int) int
		SrpmName     func(childComplexity int) int
		SrpmNevra    func(childComplexity int) int
		Summary      func(childComplexity int) int
		Version      func(childComplexity int) int
	}

	SearchAliasesItems struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	SignatureInfo struct {
		KeyLongID func(childComplexity int) int
		Tags      func(childComplexity int) int
	}

	StringResponse struct {
		Data  func(childComplexity int) int
		Error func(childComplexity int) int
	}

	Support struct {
		Description  func(childComplexity int) int
		EmailAddress func(childComplexity int) int
		PhoneNumber  func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	TestLibrary struct {
		Commit  func(childComplexity int) int
		Name    func(childComplexity int) int
		Version func(childComplexity int) int
	}

	TestResults struct {
		CheckURL         func(childComplexity int) int
		Description      func(childComplexity int) int
		ElapsedTime      func(childComplexity int) int
		Help             func(childComplexity int) int
		KnowledgebaseURL func(childComplexity int) int
		Name             func(childComplexity int) int
		Suggestion       func(childComplexity int) int
	}

	TestedOn struct {
		Name    func(childComplexity int) int
		Version func(childComplexity int) int
	}

	UncompressedLayerSize struct {
		LayerID   func(childComplexity int) int
		SizeBytes func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateImage(ctx context.Context, input *model.ContainerImageInput) (*model.ContainerImageResponse, error)
	UpdateImage(ctx context.Context, id *string, input *model.ContainerImageInput) (*model.ContainerImageResponse, error)
	ReplaceImage(ctx context.Context, id *string, input *model.ContainerImageInput) (*model.ContainerImageResponse, error)
	PutImageByManifestDigestRegistryAndRepository(ctx context.Context, repository *string, registry *string, manifestDigest *string, input *model.ContainerImageInput) (*model.ContainerImageResponse, error)
	PatchImageByManifestDigestRegistryAndRepository(ctx context.Context, repository *string, registry *string, manifestDigest *string, input *model.ContainerImageInput) (*model.ContainerImageResponse, error)
	UpdateImageRpmManifest(ctx context.Context, id *string, input *model.ContainerImageRPMManifestInput) (*model.ContainerImageRPMManifestResponse, error)
	ReplaceImageRpmManifest(ctx context.Context, id *string, input *model.ContainerImageRPMManifestInput) (*model.ContainerImageRPMManifestResponse, error)
	CreateImageRpmManifest(ctx context.Context, id *string, input *model.ContainerImageRPMManifestInput) (*model.ContainerImageRPMManifestResponse, error)
	CreateCertificationProjectBuildRequest(ctx context.Context, id *string, input *model.CertProjectBuildRequestInput) (*model.CertProjectBuildRequestResponse, error)
	CreateCertificationProjectScanRequest(ctx context.Context, id *string, input *model.CertProjectScanRequestInput) (*model.CertProjectScanRequestResponse, error)
	CreateCertificationProjectTagRequest(ctx context.Context, id *string, input *model.CertProjectTagRequestInput) (*model.CertProjectTagRequestResponse, error)
	UpdateVendor(ctx context.Context, id *string, input *model.ContainerVendorInput) (*model.ContainerVendorResponse, error)
	CreateCertificationProject(ctx context.Context, input *model.CertificationProjectInput) (*model.CertificationProjectResponse, error)
	UpdateCertificationProject(ctx context.Context, id *string, input *model.CertificationProjectInput) (*model.CertificationProjectResponse, error)
	ReplaceCertificationProject(ctx context.Context, id *string, input *model.CertificationProjectInput) (*model.CertificationProjectResponse, error)
	ReplaceProductListing(ctx context.Context, id *string, input *model.ProductListingInput) (*model.ProductListingResponse, error)
	UpdateProductListing(ctx context.Context, id *string, input *model.ProductListingInput) (*model.ProductListingResponse, error)
	CreateProductListing(ctx context.Context, input *model.ProductListingInput) (*model.ProductListingResponse, error)
	CreateAPIKey(ctx context.Context, input *model.APIKeyInput) (*model.APIKeyResponse, error)
	DeleteAPIKey(ctx context.Context, keyID *int) (*model.APIKeyResponse, error)
	CreateCertificationProjectTestResult(ctx context.Context, id *string, input *model.CertProjectTestResultInput) (*model.CertProjectTestResultResponse, error)
	UpdateCertificationProjectTestResult(ctx context.Context, id *string, input *model.CertProjectTestResultInput) (*model.CertProjectTestResultResponse, error)
	CreateCertificationProjectArtifact(ctx context.Context, id *string, input *model.CertProjectTestResultInput) (*model.CertProjectArtifactResponse, error)
}
type QueryResolver interface {
	GetImage(ctx context.Context, id *string) (*model.ContainerImageResponse, error)
	FindImages(ctx context.Context, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.ContainerImageFilter) (*model.ContainerImagePaginatedResponse, error)
	GetCertProjectTestResult(ctx context.Context, id *string) (*model.CertProjectTestResultResponse, error)
	GetCertProjectTestResults(ctx context.Context, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.CertProjectTestResultFilter) (*model.CertProjectTestResultPaginatedResponse, error)
	GetTestResultsByImageID(ctx context.Context, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.CertProjectTestResultFilter) (*model.CertProjectTestResultPaginatedResponse, error)
	GetCertProjectArtifact(ctx context.Context, id *string) (*model.CertProjectArtifactResponse, error)
	GetCertProjectArtifacts(ctx context.Context, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.CertProjectArtifactFilter) (*model.CertProjectArtifactPaginatedResponse, error)
	GetCertificationArtifactsByImageID(ctx context.Context, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.CertProjectArtifactFilter) (*model.CertProjectArtifactPaginatedResponse, error)
	GetRpmManifest(ctx context.Context, id *string) (*model.ContainerImageRPMManifestResponse, error)
	GetImageRpmManifest(ctx context.Context, id *string) (*model.ContainerImageRPMManifestResponse, error)
	GetCertificationProject(ctx context.Context, id *string) (*model.CertificationProjectResponse, error)
	GetCertificationProjectByPid(ctx context.Context, pid *string) (*model.CertificationProjectResponse, error)
	FindCertificationProjectsImages(ctx context.Context, id *string, sortBy []*model.SortBy, page *int, pageSize *int, filter *model.ContainerImageFilter) (*model.ContainerImagePaginatedResponse, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ALMExample.api_version":
		if e.complexity.ALMExample.APIVersion == nil {
			break
		}

		return e.complexity.ALMExample.APIVersion(childComplexity), true

	case "ALMExample.kind":
		if e.complexity.ALMExample.Kind == nil {
			break
		}

		return e.complexity.ALMExample.Kind(childComplexity), true

	case "AnalyticsPageViews.by_date":
		if e.complexity.AnalyticsPageViews.ByDate == nil {
			break
		}

		return e.complexity.AnalyticsPageViews.ByDate(childComplexity), true

	case "AnalyticsPageViews.total_pageviews":
		if e.complexity.AnalyticsPageViews.TotalPageviews == nil {
			break
		}

		return e.complexity.AnalyticsPageViews.TotalPageviews(childComplexity), true

	case "AnalyticsPageViewsByDate.activity_date":
		if e.complexity.AnalyticsPageViewsByDate.ActivityDate == nil {
			break
		}

		return e.complexity.AnalyticsPageViewsByDate.ActivityDate(childComplexity), true

	case "AnalyticsPageViewsByDate.pageviews":
		if e.complexity.AnalyticsPageViewsByDate.Pageviews == nil {
			break
		}

		return e.complexity.AnalyticsPageViewsByDate.Pageviews(childComplexity), true

	case "AnalyticsPageViewsResponse.data":
		if e.complexity.AnalyticsPageViewsResponse.Data == nil {
			break
		}

		return e.complexity.AnalyticsPageViewsResponse.Data(childComplexity), true

	case "AnalyticsPageViewsResponse.error":
		if e.complexity.AnalyticsPageViewsResponse.Error == nil {
			break
		}

		return e.complexity.AnalyticsPageViewsResponse.Error(childComplexity), true

	case "AnalyticsPullCount.by_customers":
		if e.complexity.AnalyticsPullCount.ByCustomers == nil {
			break
		}

		return e.complexity.AnalyticsPullCount.ByCustomers(childComplexity), true

	case "AnalyticsPullCount.by_tags":
		if e.complexity.AnalyticsPullCount.ByTags == nil {
			break
		}

		return e.complexity.AnalyticsPullCount.ByTags(childComplexity), true

	case "AnalyticsPullCount.total_countries":
		if e.complexity.AnalyticsPullCount.TotalCountries == nil {
			break
		}

		return e.complexity.AnalyticsPullCount.TotalCountries(childComplexity), true

	case "AnalyticsPullCount.total_customers":
		if e.complexity.AnalyticsPullCount.TotalCustomers == nil {
			break
		}

		return e.complexity.AnalyticsPullCount.TotalCustomers(childComplexity), true

	case "AnalyticsPullCount.total_pulls":
		if e.complexity.AnalyticsPullCount.TotalPulls == nil {
			break
		}

		return e.complexity.AnalyticsPullCount.TotalPulls(childComplexity), true

	case "AnalyticsPullCountByCostumer.country":
		if e.complexity.AnalyticsPullCountByCostumer.Country == nil {
			break
		}

		return e.complexity.AnalyticsPullCountByCostumer.Country(childComplexity), true

	case "AnalyticsPullCountByCostumer.customer_name":
		if e.complexity.AnalyticsPullCountByCostumer.CustomerName == nil {
			break
		}

		return e.complexity.AnalyticsPullCountByCostumer.CustomerName(childComplexity), true

	case "AnalyticsPullCountByCostumer.download_date":
		if e.complexity.AnalyticsPullCountByCostumer.DownloadDate == nil {
			break
		}

		return e.complexity.AnalyticsPullCountByCostumer.DownloadDate(childComplexity), true

	case "AnalyticsPullCountByCostumer.pull_count":
		if e.complexity.AnalyticsPullCountByCostumer.PullCount == nil {
			break
		}

		return e.complexity.AnalyticsPullCountByCostumer.PullCount(childComplexity), true

	case "AnalyticsPullCountByTag.download_date":
		if e.complexity.AnalyticsPullCountByTag.DownloadDate == nil {
			break
		}

		return e.complexity.AnalyticsPullCountByTag.DownloadDate(childComplexity), true

	case "AnalyticsPullCountByTag.image_tags":
		if e.complexity.AnalyticsPullCountByTag.ImageTags == nil {
			break
		}

		return e.complexity.AnalyticsPullCountByTag.ImageTags(childComplexity), true

	case "AnalyticsPullCountByTag.pull_count":
		if e.complexity.AnalyticsPullCountByTag.PullCount == nil {
			break
		}

		return e.complexity.AnalyticsPullCountByTag.PullCount(childComplexity), true

	case "AnalyticsPullCountResponse.data":
		if e.complexity.AnalyticsPullCountResponse.Data == nil {
			break
		}

		return e.complexity.AnalyticsPullCountResponse.Data(childComplexity), true

	case "AnalyticsPullCountResponse.error":
		if e.complexity.AnalyticsPullCountResponse.Error == nil {
			break
		}

		return e.complexity.AnalyticsPullCountResponse.Error(childComplexity), true

	case "ApiKey.company_id":
		if e.complexity.ApiKey.CompanyID == nil {
			break
		}

		return e.complexity.ApiKey.CompanyID(childComplexity), true

	case "ApiKey.created":
		if e.complexity.ApiKey.Created == nil {
			break
		}

		return e.complexity.ApiKey.Created(childComplexity), true

	case "ApiKey.created_by":
		if e.complexity.ApiKey.CreatedBy == nil {
			break
		}

		return e.complexity.ApiKey.CreatedBy(childComplexity), true

	case "ApiKey.description":
		if e.complexity.ApiKey.Description == nil {
			break
		}

		return e.complexity.ApiKey.Description(childComplexity), true

	case "ApiKey.id":
		if e.complexity.ApiKey.ID == nil {
			break
		}

		return e.complexity.ApiKey.ID(childComplexity), true

	case "ApiKey.last_used":
		if e.complexity.ApiKey.LastUsed == nil {
			break
		}

		return e.complexity.ApiKey.LastUsed(childComplexity), true

	case "ApiKey.org_id":
		if e.complexity.ApiKey.OrgID == nil {
			break
		}

		return e.complexity.ApiKey.OrgID(childComplexity), true

	case "ApiKeyListResponse.data":
		if e.complexity.ApiKeyListResponse.Data == nil {
			break
		}

		return e.complexity.ApiKeyListResponse.Data(childComplexity), true

	case "ApiKeyListResponse.error":
		if e.complexity.ApiKeyListResponse.Error == nil {
			break
		}

		return e.complexity.ApiKeyListResponse.Error(childComplexity), true

	case "ApiKeyResponse.api_key":
		if e.complexity.ApiKeyResponse.APIKey == nil {
			break
		}

		return e.complexity.ApiKeyResponse.APIKey(childComplexity), true

	case "ApiKeyResponse.key_data":
		if e.complexity.ApiKeyResponse.KeyData == nil {
			break
		}

		return e.complexity.ApiKeyResponse.KeyData(childComplexity), true

	case "Assessment.name":
		if e.complexity.Assessment.Name == nil {
			break
		}

		return e.complexity.Assessment.Name(childComplexity), true

	case "Assessment.required_for_certification":
		if e.complexity.Assessment.RequiredForCertification == nil {
			break
		}

		return e.complexity.Assessment.RequiredForCertification(childComplexity), true

	case "Assessment.value":
		if e.complexity.Assessment.Value == nil {
			break
		}

		return e.complexity.Assessment.Value(childComplexity), true

	case "BadgesItems.badge":
		if e.complexity.BadgesItems.Badge == nil {
			break
		}

		return e.complexity.BadgesItems.Badge(childComplexity), true

	case "BadgesItems.project_id":
		if e.complexity.BadgesItems.ProjectID == nil {
			break
		}

		return e.complexity.BadgesItems.ProjectID(childComplexity), true

	case "BinarySignature.binary_signature":
		if e.complexity.BinarySignature.BinarySignature == nil {
			break
		}

		return e.complexity.BinarySignature.BinarySignature(childComplexity), true

	case "BinarySignatureResponse.data":
		if e.complexity.BinarySignatureResponse.Data == nil {
			break
		}

		return e.complexity.BinarySignatureResponse.Data(childComplexity), true

	case "BinarySignatureResponse.error":
		if e.complexity.BinarySignatureResponse.Error == nil {
			break
		}

		return e.complexity.BinarySignatureResponse.Error(childComplexity), true

	case "Brew.build":
		if e.complexity.Brew.Build == nil {
			break
		}

		return e.complexity.Brew.Build(childComplexity), true

	case "Brew.completion_date":
		if e.complexity.Brew.CompletionDate == nil {
			break
		}

		return e.complexity.Brew.CompletionDate(childComplexity), true

	case "Brew.nvra":
		if e.complexity.Brew.Nvra == nil {
			break
		}

		return e.complexity.Brew.Nvra(childComplexity), true

	case "Brew.package":
		if e.complexity.Brew.Package == nil {
			break
		}

		return e.complexity.Brew.Package(childComplexity), true

	case "CVE.id":
		if e.complexity.CVE.ID == nil {
			break
		}

		return e.complexity.CVE.ID(childComplexity), true

	case "CVE.url":
		if e.complexity.CVE.URL == nil {
			break
		}

		return e.complexity.CVE.URL(childComplexity), true

	case "CertProjectArtifact.cert_project":
		if e.complexity.CertProjectArtifact.CertProject == nil {
			break
		}

		return e.complexity.CertProjectArtifact.CertProject(childComplexity), true

	case "CertProjectArtifact.certification_hash":
		if e.complexity.CertProjectArtifact.CertificationHash == nil {
			break
		}

		return e.complexity.CertProjectArtifact.CertificationHash(childComplexity), true

	case "CertProjectArtifact.content":
		if e.complexity.CertProjectArtifact.Content == nil {
			break
		}

		return e.complexity.CertProjectArtifact.Content(childComplexity), true

	case "CertProjectArtifact.content_type":
		if e.complexity.CertProjectArtifact.ContentType == nil {
			break
		}

		return e.complexity.CertProjectArtifact.ContentType(childComplexity), true

	case "CertProjectArtifact.creation_date":
		if e.complexity.CertProjectArtifact.CreationDate == nil {
			break
		}

		return e.complexity.CertProjectArtifact.CreationDate(childComplexity), true

	case "CertProjectArtifact.edges":
		if e.complexity.CertProjectArtifact.Edges == nil {
			break
		}

		return e.complexity.CertProjectArtifact.Edges(childComplexity), true

	case "CertProjectArtifact.file_size":
		if e.complexity.CertProjectArtifact.FileSize == nil {
			break
		}

		return e.complexity.CertProjectArtifact.FileSize(childComplexity), true

	case "CertProjectArtifact.filename":
		if e.complexity.CertProjectArtifact.Filename == nil {
			break
		}

		return e.complexity.CertProjectArtifact.Filename(childComplexity), true

	case "CertProjectArtifact._id":
		if e.complexity.CertProjectArtifact.ID == nil {
			break
		}

		return e.complexity.CertProjectArtifact.ID(childComplexity), true

	case "CertProjectArtifact.image_id":
		if e.complexity.CertProjectArtifact.ImageID == nil {
			break
		}

		return e.complexity.CertProjectArtifact.ImageID(childComplexity), true

	case "CertProjectArtifact.last_update_date":
		if e.complexity.CertProjectArtifact.LastUpdateDate == nil {
			break
		}

		return e.complexity.CertProjectArtifact.LastUpdateDate(childComplexity), true

	case "CertProjectArtifact.operator_package_name":
		if e.complexity.CertProjectArtifact.OperatorPackageName == nil {
			break
		}

		return e.complexity.CertProjectArtifact.OperatorPackageName(childComplexity), true

	case "CertProjectArtifact.org_id":
		if e.complexity.CertProjectArtifact.OrgID == nil {
			break
		}

		return e.complexity.CertProjectArtifact.OrgID(childComplexity), true

	case "CertProjectArtifact.version":
		if e.complexity.CertProjectArtifact.Version == nil {
			break
		}

		return e.complexity.CertProjectArtifact.Version(childComplexity), true

	case "CertProjectArtifactEdges.cert_project":
		if e.complexity.CertProjectArtifactEdges.CertProject == nil {
			break
		}

		return e.complexity.CertProjectArtifactEdges.CertProject(childComplexity), true

	case "CertProjectArtifactEdges.container_image":
		if e.complexity.CertProjectArtifactEdges.ContainerImage == nil {
			break
		}

		return e.complexity.CertProjectArtifactEdges.ContainerImage(childComplexity), true

	case "CertProjectArtifactPaginatedResponse.data":
		if e.complexity.CertProjectArtifactPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectArtifactPaginatedResponse.Data(childComplexity), true

	case "CertProjectArtifactPaginatedResponse.error":
		if e.complexity.CertProjectArtifactPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectArtifactPaginatedResponse.Error(childComplexity), true

	case "CertProjectArtifactPaginatedResponse.page":
		if e.complexity.CertProjectArtifactPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.CertProjectArtifactPaginatedResponse.Page(childComplexity), true

	case "CertProjectArtifactPaginatedResponse.page_size":
		if e.complexity.CertProjectArtifactPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.CertProjectArtifactPaginatedResponse.PageSize(childComplexity), true

	case "CertProjectArtifactPaginatedResponse.total":
		if e.complexity.CertProjectArtifactPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.CertProjectArtifactPaginatedResponse.Total(childComplexity), true

	case "CertProjectArtifactResponse.data":
		if e.complexity.CertProjectArtifactResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectArtifactResponse.Data(childComplexity), true

	case "CertProjectArtifactResponse.error":
		if e.complexity.CertProjectArtifactResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectArtifactResponse.Error(childComplexity), true

	case "CertProjectBuildLog.log":
		if e.complexity.CertProjectBuildLog.Log == nil {
			break
		}

		return e.complexity.CertProjectBuildLog.Log(childComplexity), true

	case "CertProjectBuildLogResponse.data":
		if e.complexity.CertProjectBuildLogResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectBuildLogResponse.Data(childComplexity), true

	case "CertProjectBuildLogResponse.error":
		if e.complexity.CertProjectBuildLogResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectBuildLogResponse.Error(childComplexity), true

	case "CertProjectBuildRequest.cert_project":
		if e.complexity.CertProjectBuildRequest.CertProject == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.CertProject(childComplexity), true

	case "CertProjectBuildRequest.creation_date":
		if e.complexity.CertProjectBuildRequest.CreationDate == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.CreationDate(childComplexity), true

	case "CertProjectBuildRequest.edges":
		if e.complexity.CertProjectBuildRequest.Edges == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.Edges(childComplexity), true

	case "CertProjectBuildRequest._id":
		if e.complexity.CertProjectBuildRequest.ID == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.ID(childComplexity), true

	case "CertProjectBuildRequest.last_update_date":
		if e.complexity.CertProjectBuildRequest.LastUpdateDate == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.LastUpdateDate(childComplexity), true

	case "CertProjectBuildRequest.org_id":
		if e.complexity.CertProjectBuildRequest.OrgID == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.OrgID(childComplexity), true

	case "CertProjectBuildRequest.status":
		if e.complexity.CertProjectBuildRequest.Status == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.Status(childComplexity), true

	case "CertProjectBuildRequest.status_message":
		if e.complexity.CertProjectBuildRequest.StatusMessage == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.StatusMessage(childComplexity), true

	case "CertProjectBuildRequest.tag":
		if e.complexity.CertProjectBuildRequest.Tag == nil {
			break
		}

		return e.complexity.CertProjectBuildRequest.Tag(childComplexity), true

	case "CertProjectBuildRequestEdges.cert_project":
		if e.complexity.CertProjectBuildRequestEdges.CertProject == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestEdges.CertProject(childComplexity), true

	case "CertProjectBuildRequestEdges.logs":
		if e.complexity.CertProjectBuildRequestEdges.Logs == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestEdges.Logs(childComplexity), true

	case "CertProjectBuildRequestPaginatedResponse.data":
		if e.complexity.CertProjectBuildRequestPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestPaginatedResponse.Data(childComplexity), true

	case "CertProjectBuildRequestPaginatedResponse.error":
		if e.complexity.CertProjectBuildRequestPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestPaginatedResponse.Error(childComplexity), true

	case "CertProjectBuildRequestPaginatedResponse.page":
		if e.complexity.CertProjectBuildRequestPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestPaginatedResponse.Page(childComplexity), true

	case "CertProjectBuildRequestPaginatedResponse.page_size":
		if e.complexity.CertProjectBuildRequestPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestPaginatedResponse.PageSize(childComplexity), true

	case "CertProjectBuildRequestPaginatedResponse.total":
		if e.complexity.CertProjectBuildRequestPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestPaginatedResponse.Total(childComplexity), true

	case "CertProjectBuildRequestResponse.data":
		if e.complexity.CertProjectBuildRequestResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestResponse.Data(childComplexity), true

	case "CertProjectBuildRequestResponse.error":
		if e.complexity.CertProjectBuildRequestResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectBuildRequestResponse.Error(childComplexity), true

	case "CertProjectContacts.email_address":
		if e.complexity.CertProjectContacts.EmailAddress == nil {
			break
		}

		return e.complexity.CertProjectContacts.EmailAddress(childComplexity), true

	case "CertProjectContacts.type":
		if e.complexity.CertProjectContacts.Type == nil {
			break
		}

		return e.complexity.CertProjectContacts.Type(childComplexity), true

	case "CertProjectContainer.application_categories":
		if e.complexity.CertProjectContainer.ApplicationCategories == nil {
			break
		}

		return e.complexity.CertProjectContainer.ApplicationCategories(childComplexity), true

	case "CertProjectContainer.auto_publish":
		if e.complexity.CertProjectContainer.AutoPublish == nil {
			break
		}

		return e.complexity.CertProjectContainer.AutoPublish(childComplexity), true

	case "CertProjectContainer.auto_rebuild":
		if e.complexity.CertProjectContainer.AutoRebuild == nil {
			break
		}

		return e.complexity.CertProjectContainer.AutoRebuild(childComplexity), true

	case "CertProjectContainer.build_no_cache":
		if e.complexity.CertProjectContainer.BuildNoCache == nil {
			break
		}

		return e.complexity.CertProjectContainer.BuildNoCache(childComplexity), true

	case "CertProjectContainer.build_service":
		if e.complexity.CertProjectContainer.BuildService == nil {
			break
		}

		return e.complexity.CertProjectContainer.BuildService(childComplexity), true

	case "CertProjectContainer.distribution_approval":
		if e.complexity.CertProjectContainer.DistributionApproval == nil {
			break
		}

		return e.complexity.CertProjectContainer.DistributionApproval(childComplexity), true

	case "CertProjectContainer.distribution_method":
		if e.complexity.CertProjectContainer.DistributionMethod == nil {
			break
		}

		return e.complexity.CertProjectContainer.DistributionMethod(childComplexity), true

	case "CertProjectContainer.docker_config_json":
		if e.complexity.CertProjectContainer.DockerConfigJSON == nil {
			break
		}

		return e.complexity.CertProjectContainer.DockerConfigJSON(childComplexity), true

	case "CertProjectContainer.edges":
		if e.complexity.CertProjectContainer.Edges == nil {
			break
		}

		return e.complexity.CertProjectContainer.Edges(childComplexity), true

	case "CertProjectContainer.github_usernames":
		if e.complexity.CertProjectContainer.GithubUsernames == nil {
			break
		}

		return e.complexity.CertProjectContainer.GithubUsernames(childComplexity), true

	case "CertProjectContainer.isv_pid":
		if e.complexity.CertProjectContainer.IsvPid == nil {
			break
		}

		return e.complexity.CertProjectContainer.IsvPid(childComplexity), true

	case "CertProjectContainer.kube_objects":
		if e.complexity.CertProjectContainer.KubeObjects == nil {
			break
		}

		return e.complexity.CertProjectContainer.KubeObjects(childComplexity), true

	case "CertProjectContainer.os_content_type":
		if e.complexity.CertProjectContainer.OsContentType == nil {
			break
		}

		return e.complexity.CertProjectContainer.OsContentType(childComplexity), true

	case "CertProjectContainer.passed_rhcert":
		if e.complexity.CertProjectContainer.PassedRhcert == nil {
			break
		}

		return e.complexity.CertProjectContainer.PassedRhcert(childComplexity), true

	case "CertProjectContainer.privileged":
		if e.complexity.CertProjectContainer.Privileged == nil {
			break
		}

		return e.complexity.CertProjectContainer.Privileged(childComplexity), true

	case "CertProjectContainer.published":
		if e.complexity.CertProjectContainer.Published == nil {
			break
		}

		return e.complexity.CertProjectContainer.Published(childComplexity), true

	case "CertProjectContainer.registry":
		if e.complexity.CertProjectContainer.Registry == nil {
			break
		}

		return e.complexity.CertProjectContainer.Registry(childComplexity), true

	case "CertProjectContainer.registry_override_instruct":
		if e.complexity.CertProjectContainer.RegistryOverrideInstruct == nil {
			break
		}

		return e.complexity.CertProjectContainer.RegistryOverrideInstruct(childComplexity), true

	case "CertProjectContainer.release_category":
		if e.complexity.CertProjectContainer.ReleaseCategory == nil {
			break
		}

		return e.complexity.CertProjectContainer.ReleaseCategory(childComplexity), true

	case "CertProjectContainer.repository":
		if e.complexity.CertProjectContainer.Repository == nil {
			break
		}

		return e.complexity.CertProjectContainer.Repository(childComplexity), true

	case "CertProjectContainer.repository_description":
		if e.complexity.CertProjectContainer.RepositoryDescription == nil {
			break
		}

		return e.complexity.CertProjectContainer.RepositoryDescription(childComplexity), true

	case "CertProjectContainer.repository_name":
		if e.complexity.CertProjectContainer.RepositoryName == nil {
			break
		}

		return e.complexity.CertProjectContainer.RepositoryName(childComplexity), true

	case "CertProjectContainer.service_account_secret":
		if e.complexity.CertProjectContainer.ServiceAccountSecret == nil {
			break
		}

		return e.complexity.CertProjectContainer.ServiceAccountSecret(childComplexity), true

	case "CertProjectContainer.short_description":
		if e.complexity.CertProjectContainer.ShortDescription == nil {
			break
		}

		return e.complexity.CertProjectContainer.ShortDescription(childComplexity), true

	case "CertProjectContainer.source_context_dir":
		if e.complexity.CertProjectContainer.SourceContextDir == nil {
			break
		}

		return e.complexity.CertProjectContainer.SourceContextDir(childComplexity), true

	case "CertProjectContainer.source_dockerfile":
		if e.complexity.CertProjectContainer.SourceDockerfile == nil {
			break
		}

		return e.complexity.CertProjectContainer.SourceDockerfile(childComplexity), true

	case "CertProjectContainer.source_ref":
		if e.complexity.CertProjectContainer.SourceRef == nil {
			break
		}

		return e.complexity.CertProjectContainer.SourceRef(childComplexity), true

	case "CertProjectContainer.source_ssh_private_key":
		if e.complexity.CertProjectContainer.SourceSSHPrivateKey == nil {
			break
		}

		return e.complexity.CertProjectContainer.SourceSSHPrivateKey(childComplexity), true

	case "CertProjectContainer.source_uri":
		if e.complexity.CertProjectContainer.SourceURI == nil {
			break
		}

		return e.complexity.CertProjectContainer.SourceURI(childComplexity), true

	case "CertProjectContainer.support_platforms":
		if e.complexity.CertProjectContainer.SupportPlatforms == nil {
			break
		}

		return e.complexity.CertProjectContainer.SupportPlatforms(childComplexity), true

	case "CertProjectContainer.type":
		if e.complexity.CertProjectContainer.Type == nil {
			break
		}

		return e.complexity.CertProjectContainer.Type(childComplexity), true

	case "CertProjectContainerEdges.repository":
		if e.complexity.CertProjectContainerEdges.Repository == nil {
			break
		}

		return e.complexity.CertProjectContainerEdges.Repository(childComplexity), true

	case "CertProjectDrupal.company_id":
		if e.complexity.CertProjectDrupal.CompanyID == nil {
			break
		}

		return e.complexity.CertProjectDrupal.CompanyID(childComplexity), true

	case "CertProjectDrupal.relation":
		if e.complexity.CertProjectDrupal.Relation == nil {
			break
		}

		return e.complexity.CertProjectDrupal.Relation(childComplexity), true

	case "CertProjectDrupal.zone":
		if e.complexity.CertProjectDrupal.Zone == nil {
			break
		}

		return e.complexity.CertProjectDrupal.Zone(childComplexity), true

	case "CertProjectHelmChart.application_categories":
		if e.complexity.CertProjectHelmChart.ApplicationCategories == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.ApplicationCategories(childComplexity), true

	case "CertProjectHelmChart.chart_name":
		if e.complexity.CertProjectHelmChart.ChartName == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.ChartName(childComplexity), true

	case "CertProjectHelmChart.distribution_instructions":
		if e.complexity.CertProjectHelmChart.DistributionInstructions == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.DistributionInstructions(childComplexity), true

	case "CertProjectHelmChart.distribution_method":
		if e.complexity.CertProjectHelmChart.DistributionMethod == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.DistributionMethod(childComplexity), true

	case "CertProjectHelmChart.github_pull_request":
		if e.complexity.CertProjectHelmChart.GithubPullRequest == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.GithubPullRequest(childComplexity), true

	case "CertProjectHelmChart.github_usernames":
		if e.complexity.CertProjectHelmChart.GithubUsernames == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.GithubUsernames(childComplexity), true

	case "CertProjectHelmChart.long_description":
		if e.complexity.CertProjectHelmChart.LongDescription == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.LongDescription(childComplexity), true

	case "CertProjectHelmChart.public_pgp_key":
		if e.complexity.CertProjectHelmChart.PublicPGPKey == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.PublicPGPKey(childComplexity), true

	case "CertProjectHelmChart.repository":
		if e.complexity.CertProjectHelmChart.Repository == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.Repository(childComplexity), true

	case "CertProjectHelmChart.short_description":
		if e.complexity.CertProjectHelmChart.ShortDescription == nil {
			break
		}

		return e.complexity.CertProjectHelmChart.ShortDescription(childComplexity), true

	case "CertProjectMarketplace.enablement_status":
		if e.complexity.CertProjectMarketplace.EnablementStatus == nil {
			break
		}

		return e.complexity.CertProjectMarketplace.EnablementStatus(childComplexity), true

	case "CertProjectMarketplace.enablement_url":
		if e.complexity.CertProjectMarketplace.EnablementURL == nil {
			break
		}

		return e.complexity.CertProjectMarketplace.EnablementURL(childComplexity), true

	case "CertProjectMarketplace.listing_url":
		if e.complexity.CertProjectMarketplace.ListingURL == nil {
			break
		}

		return e.complexity.CertProjectMarketplace.ListingURL(childComplexity), true

	case "CertProjectMarketplace.published":
		if e.complexity.CertProjectMarketplace.Published == nil {
			break
		}

		return e.complexity.CertProjectMarketplace.Published(childComplexity), true

	case "CertProjectRedhat.product_id":
		if e.complexity.CertProjectRedhat.ProductID == nil {
			break
		}

		return e.complexity.CertProjectRedhat.ProductID(childComplexity), true

	case "CertProjectRedhat.product_name":
		if e.complexity.CertProjectRedhat.ProductName == nil {
			break
		}

		return e.complexity.CertProjectRedhat.ProductName(childComplexity), true

	case "CertProjectRedhat.product_version":
		if e.complexity.CertProjectRedhat.ProductVersion == nil {
			break
		}

		return e.complexity.CertProjectRedhat.ProductVersion(childComplexity), true

	case "CertProjectRedhat.product_version_id":
		if e.complexity.CertProjectRedhat.ProductVersionID == nil {
			break
		}

		return e.complexity.CertProjectRedhat.ProductVersionID(childComplexity), true

	case "CertProjectScanRequest.cert_project":
		if e.complexity.CertProjectScanRequest.CertProject == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.CertProject(childComplexity), true

	case "CertProjectScanRequest.creation_date":
		if e.complexity.CertProjectScanRequest.CreationDate == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.CreationDate(childComplexity), true

	case "CertProjectScanRequest.edges":
		if e.complexity.CertProjectScanRequest.Edges == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.Edges(childComplexity), true

	case "CertProjectScanRequest.external_tests_link":
		if e.complexity.CertProjectScanRequest.ExternalTestsLink == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.ExternalTestsLink(childComplexity), true

	case "CertProjectScanRequest._id":
		if e.complexity.CertProjectScanRequest.ID == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.ID(childComplexity), true

	case "CertProjectScanRequest.last_update_date":
		if e.complexity.CertProjectScanRequest.LastUpdateDate == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.LastUpdateDate(childComplexity), true

	case "CertProjectScanRequest.org_id":
		if e.complexity.CertProjectScanRequest.OrgID == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.OrgID(childComplexity), true

	case "CertProjectScanRequest.pull_spec":
		if e.complexity.CertProjectScanRequest.PullSpec == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.PullSpec(childComplexity), true

	case "CertProjectScanRequest.scan_uuid":
		if e.complexity.CertProjectScanRequest.ScanUUID == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.ScanUUID(childComplexity), true

	case "CertProjectScanRequest.status":
		if e.complexity.CertProjectScanRequest.Status == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.Status(childComplexity), true

	case "CertProjectScanRequest.status_message":
		if e.complexity.CertProjectScanRequest.StatusMessage == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.StatusMessage(childComplexity), true

	case "CertProjectScanRequest.tag":
		if e.complexity.CertProjectScanRequest.Tag == nil {
			break
		}

		return e.complexity.CertProjectScanRequest.Tag(childComplexity), true

	case "CertProjectScanRequestEdges.cert_project":
		if e.complexity.CertProjectScanRequestEdges.CertProject == nil {
			break
		}

		return e.complexity.CertProjectScanRequestEdges.CertProject(childComplexity), true

	case "CertProjectScanRequestPaginatedResponse.data":
		if e.complexity.CertProjectScanRequestPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectScanRequestPaginatedResponse.Data(childComplexity), true

	case "CertProjectScanRequestPaginatedResponse.error":
		if e.complexity.CertProjectScanRequestPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectScanRequestPaginatedResponse.Error(childComplexity), true

	case "CertProjectScanRequestPaginatedResponse.page":
		if e.complexity.CertProjectScanRequestPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.CertProjectScanRequestPaginatedResponse.Page(childComplexity), true

	case "CertProjectScanRequestPaginatedResponse.page_size":
		if e.complexity.CertProjectScanRequestPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.CertProjectScanRequestPaginatedResponse.PageSize(childComplexity), true

	case "CertProjectScanRequestPaginatedResponse.total":
		if e.complexity.CertProjectScanRequestPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.CertProjectScanRequestPaginatedResponse.Total(childComplexity), true

	case "CertProjectScanRequestResponse.data":
		if e.complexity.CertProjectScanRequestResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectScanRequestResponse.Data(childComplexity), true

	case "CertProjectScanRequestResponse.error":
		if e.complexity.CertProjectScanRequestResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectScanRequestResponse.Error(childComplexity), true

	case "CertProjectSelfCertification.app_profiler":
		if e.complexity.CertProjectSelfCertification.AppProfiler == nil {
			break
		}

		return e.complexity.CertProjectSelfCertification.AppProfiler(childComplexity), true

	case "CertProjectSelfCertification.app_runs_on_app_type":
		if e.complexity.CertProjectSelfCertification.AppRunsOnAppType == nil {
			break
		}

		return e.complexity.CertProjectSelfCertification.AppRunsOnAppType(childComplexity), true

	case "CertProjectSelfCertification.auth_login":
		if e.complexity.CertProjectSelfCertification.AuthLogin == nil {
			break
		}

		return e.complexity.CertProjectSelfCertification.AuthLogin(childComplexity), true

	case "CertProjectSelfCertification.certification_url":
		if e.complexity.CertProjectSelfCertification.CertificationURL == nil {
			break
		}

		return e.complexity.CertProjectSelfCertification.CertificationURL(childComplexity), true

	case "CertProjectSelfCertification.comm_support_on_app_type":
		if e.complexity.CertProjectSelfCertification.CommSupportOnAppType == nil {
			break
		}

		return e.complexity.CertProjectSelfCertification.CommSupportOnAppType(childComplexity), true

	case "CertProjectSelfCertification.requested":
		if e.complexity.CertProjectSelfCertification.Requested == nil {
			break
		}

		return e.complexity.CertProjectSelfCertification.Requested(childComplexity), true

	case "CertProjectSelfCertification.tsanet_member":
		if e.complexity.CertProjectSelfCertification.TsanetMember == nil {
			break
		}

		return e.complexity.CertProjectSelfCertification.TsanetMember(childComplexity), true

	case "CertProjectTagRequest.cert_project":
		if e.complexity.CertProjectTagRequest.CertProject == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.CertProject(childComplexity), true

	case "CertProjectTagRequest.creation_date":
		if e.complexity.CertProjectTagRequest.CreationDate == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.CreationDate(childComplexity), true

	case "CertProjectTagRequest.edges":
		if e.complexity.CertProjectTagRequest.Edges == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.Edges(childComplexity), true

	case "CertProjectTagRequest._id":
		if e.complexity.CertProjectTagRequest.ID == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.ID(childComplexity), true

	case "CertProjectTagRequest.image_id":
		if e.complexity.CertProjectTagRequest.ImageID == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.ImageID(childComplexity), true

	case "CertProjectTagRequest.last_update_date":
		if e.complexity.CertProjectTagRequest.LastUpdateDate == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.LastUpdateDate(childComplexity), true

	case "CertProjectTagRequest.operation":
		if e.complexity.CertProjectTagRequest.Operation == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.Operation(childComplexity), true

	case "CertProjectTagRequest.org_id":
		if e.complexity.CertProjectTagRequest.OrgID == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.OrgID(childComplexity), true

	case "CertProjectTagRequest.status":
		if e.complexity.CertProjectTagRequest.Status == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.Status(childComplexity), true

	case "CertProjectTagRequest.status_message":
		if e.complexity.CertProjectTagRequest.StatusMessage == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.StatusMessage(childComplexity), true

	case "CertProjectTagRequest.tag":
		if e.complexity.CertProjectTagRequest.Tag == nil {
			break
		}

		return e.complexity.CertProjectTagRequest.Tag(childComplexity), true

	case "CertProjectTagRequestEdges.cert_project":
		if e.complexity.CertProjectTagRequestEdges.CertProject == nil {
			break
		}

		return e.complexity.CertProjectTagRequestEdges.CertProject(childComplexity), true

	case "CertProjectTagRequestEdges.image":
		if e.complexity.CertProjectTagRequestEdges.Image == nil {
			break
		}

		return e.complexity.CertProjectTagRequestEdges.Image(childComplexity), true

	case "CertProjectTagRequestPaginatedResponse.data":
		if e.complexity.CertProjectTagRequestPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectTagRequestPaginatedResponse.Data(childComplexity), true

	case "CertProjectTagRequestPaginatedResponse.error":
		if e.complexity.CertProjectTagRequestPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectTagRequestPaginatedResponse.Error(childComplexity), true

	case "CertProjectTagRequestPaginatedResponse.page":
		if e.complexity.CertProjectTagRequestPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.CertProjectTagRequestPaginatedResponse.Page(childComplexity), true

	case "CertProjectTagRequestPaginatedResponse.page_size":
		if e.complexity.CertProjectTagRequestPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.CertProjectTagRequestPaginatedResponse.PageSize(childComplexity), true

	case "CertProjectTagRequestPaginatedResponse.total":
		if e.complexity.CertProjectTagRequestPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.CertProjectTagRequestPaginatedResponse.Total(childComplexity), true

	case "CertProjectTagRequestResponse.data":
		if e.complexity.CertProjectTagRequestResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectTagRequestResponse.Data(childComplexity), true

	case "CertProjectTagRequestResponse.error":
		if e.complexity.CertProjectTagRequestResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectTagRequestResponse.Error(childComplexity), true

	case "CertProjectTestResult.cert_project":
		if e.complexity.CertProjectTestResult.CertProject == nil {
			break
		}

		return e.complexity.CertProjectTestResult.CertProject(childComplexity), true

	case "CertProjectTestResult.certification_hash":
		if e.complexity.CertProjectTestResult.CertificationHash == nil {
			break
		}

		return e.complexity.CertProjectTestResult.CertificationHash(childComplexity), true

	case "CertProjectTestResult.creation_date":
		if e.complexity.CertProjectTestResult.CreationDate == nil {
			break
		}

		return e.complexity.CertProjectTestResult.CreationDate(childComplexity), true

	case "CertProjectTestResult.edges":
		if e.complexity.CertProjectTestResult.Edges == nil {
			break
		}

		return e.complexity.CertProjectTestResult.Edges(childComplexity), true

	case "CertProjectTestResult._id":
		if e.complexity.CertProjectTestResult.ID == nil {
			break
		}

		return e.complexity.CertProjectTestResult.ID(childComplexity), true

	case "CertProjectTestResult.image":
		if e.complexity.CertProjectTestResult.Image == nil {
			break
		}

		return e.complexity.CertProjectTestResult.Image(childComplexity), true

	case "CertProjectTestResult.image_id":
		if e.complexity.CertProjectTestResult.ImageID == nil {
			break
		}

		return e.complexity.CertProjectTestResult.ImageID(childComplexity), true

	case "CertProjectTestResult.last_update_date":
		if e.complexity.CertProjectTestResult.LastUpdateDate == nil {
			break
		}

		return e.complexity.CertProjectTestResult.LastUpdateDate(childComplexity), true

	case "CertProjectTestResult.operator_package_name":
		if e.complexity.CertProjectTestResult.OperatorPackageName == nil {
			break
		}

		return e.complexity.CertProjectTestResult.OperatorPackageName(childComplexity), true

	case "CertProjectTestResult.org_id":
		if e.complexity.CertProjectTestResult.OrgID == nil {
			break
		}

		return e.complexity.CertProjectTestResult.OrgID(childComplexity), true

	case "CertProjectTestResult.passed":
		if e.complexity.CertProjectTestResult.Passed == nil {
			break
		}

		return e.complexity.CertProjectTestResult.Passed(childComplexity), true

	case "CertProjectTestResult.pull_request":
		if e.complexity.CertProjectTestResult.PullRequest == nil {
			break
		}

		return e.complexity.CertProjectTestResult.PullRequest(childComplexity), true

	case "CertProjectTestResult.results":
		if e.complexity.CertProjectTestResult.Results == nil {
			break
		}

		return e.complexity.CertProjectTestResult.Results(childComplexity), true

	case "CertProjectTestResult.test_library":
		if e.complexity.CertProjectTestResult.TestLibrary == nil {
			break
		}

		return e.complexity.CertProjectTestResult.TestLibrary(childComplexity), true

	case "CertProjectTestResult.tested_on":
		if e.complexity.CertProjectTestResult.TestedOn == nil {
			break
		}

		return e.complexity.CertProjectTestResult.TestedOn(childComplexity), true

	case "CertProjectTestResult.version":
		if e.complexity.CertProjectTestResult.Version == nil {
			break
		}

		return e.complexity.CertProjectTestResult.Version(childComplexity), true

	case "CertProjectTestResultEdges.cert_project":
		if e.complexity.CertProjectTestResultEdges.CertProject == nil {
			break
		}

		return e.complexity.CertProjectTestResultEdges.CertProject(childComplexity), true

	case "CertProjectTestResultEdges.container_image":
		if e.complexity.CertProjectTestResultEdges.ContainerImage == nil {
			break
		}

		return e.complexity.CertProjectTestResultEdges.ContainerImage(childComplexity), true

	case "CertProjectTestResultPaginatedResponse.data":
		if e.complexity.CertProjectTestResultPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectTestResultPaginatedResponse.Data(childComplexity), true

	case "CertProjectTestResultPaginatedResponse.error":
		if e.complexity.CertProjectTestResultPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectTestResultPaginatedResponse.Error(childComplexity), true

	case "CertProjectTestResultPaginatedResponse.page":
		if e.complexity.CertProjectTestResultPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.CertProjectTestResultPaginatedResponse.Page(childComplexity), true

	case "CertProjectTestResultPaginatedResponse.page_size":
		if e.complexity.CertProjectTestResultPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.CertProjectTestResultPaginatedResponse.PageSize(childComplexity), true

	case "CertProjectTestResultPaginatedResponse.total":
		if e.complexity.CertProjectTestResultPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.CertProjectTestResultPaginatedResponse.Total(childComplexity), true

	case "CertProjectTestResultResponse.data":
		if e.complexity.CertProjectTestResultResponse.Data == nil {
			break
		}

		return e.complexity.CertProjectTestResultResponse.Data(childComplexity), true

	case "CertProjectTestResultResponse.error":
		if e.complexity.CertProjectTestResultResponse.Error == nil {
			break
		}

		return e.complexity.CertProjectTestResultResponse.Error(childComplexity), true

	case "Certification.assessment":
		if e.complexity.Certification.Assessment == nil {
			break
		}

		return e.complexity.Certification.Assessment(childComplexity), true

	case "CertificationProject.certification_date":
		if e.complexity.CertificationProject.CertificationDate == nil {
			break
		}

		return e.complexity.CertificationProject.CertificationDate(childComplexity), true

	case "CertificationProject.certification_status":
		if e.complexity.CertificationProject.CertificationStatus == nil {
			break
		}

		return e.complexity.CertificationProject.CertificationStatus(childComplexity), true

	case "CertificationProject.certification_user":
		if e.complexity.CertificationProject.CertificationUser == nil {
			break
		}

		return e.complexity.CertificationProject.CertificationUser(childComplexity), true

	case "CertificationProject.contacts":
		if e.complexity.CertificationProject.Contacts == nil {
			break
		}

		return e.complexity.CertificationProject.Contacts(childComplexity), true

	case "CertificationProject.container":
		if e.complexity.CertificationProject.Container == nil {
			break
		}

		return e.complexity.CertificationProject.Container(childComplexity), true

	case "CertificationProject.creation_date":
		if e.complexity.CertificationProject.CreationDate == nil {
			break
		}

		return e.complexity.CertificationProject.CreationDate(childComplexity), true

	case "CertificationProject.drupal":
		if e.complexity.CertificationProject.Drupal == nil {
			break
		}

		return e.complexity.CertificationProject.Drupal(childComplexity), true

	case "CertificationProject.edges":
		if e.complexity.CertificationProject.Edges == nil {
			break
		}

		return e.complexity.CertificationProject.Edges(childComplexity), true

	case "CertificationProject.helm_chart":
		if e.complexity.CertificationProject.HelmChart == nil {
			break
		}

		return e.complexity.CertificationProject.HelmChart(childComplexity), true

	case "CertificationProject._id":
		if e.complexity.CertificationProject.ID == nil {
			break
		}

		return e.complexity.CertificationProject.ID(childComplexity), true

	case "CertificationProject.last_update_date":
		if e.complexity.CertificationProject.LastUpdateDate == nil {
			break
		}

		return e.complexity.CertificationProject.LastUpdateDate(childComplexity), true

	case "CertificationProject.marketplace":
		if e.complexity.CertificationProject.Marketplace == nil {
			break
		}

		return e.complexity.CertificationProject.Marketplace(childComplexity), true

	case "CertificationProject.name":
		if e.complexity.CertificationProject.Name == nil {
			break
		}

		return e.complexity.CertificationProject.Name(childComplexity), true

	case "CertificationProject.operator_distribution":
		if e.complexity.CertificationProject.OperatorDistribution == nil {
			break
		}

		return e.complexity.CertificationProject.OperatorDistribution(childComplexity), true

	case "CertificationProject.org_id":
		if e.complexity.CertificationProject.OrgID == nil {
			break
		}

		return e.complexity.CertificationProject.OrgID(childComplexity), true

	case "CertificationProject.product_listings":
		if e.complexity.CertificationProject.ProductListings == nil {
			break
		}

		return e.complexity.CertificationProject.ProductListings(childComplexity), true

	case "CertificationProject.project_status":
		if e.complexity.CertificationProject.ProjectStatus == nil {
			break
		}

		return e.complexity.CertificationProject.ProjectStatus(childComplexity), true

	case "CertificationProject.published_by":
		if e.complexity.CertificationProject.PublishedBy == nil {
			break
		}

		return e.complexity.CertificationProject.PublishedBy(childComplexity), true

	case "CertificationProject.redhat":
		if e.complexity.CertificationProject.Redhat == nil {
			break
		}

		return e.complexity.CertificationProject.Redhat(childComplexity), true

	case "CertificationProject.self_certification":
		if e.complexity.CertificationProject.SelfCertification == nil {
			break
		}

		return e.complexity.CertificationProject.SelfCertification(childComplexity), true

	case "CertificationProject.type":
		if e.complexity.CertificationProject.Type == nil {
			break
		}

		return e.complexity.CertificationProject.Type(childComplexity), true

	case "CertificationProjectEdges.build_requests":
		if e.complexity.CertificationProjectEdges.BuildRequests == nil {
			break
		}

		args, err := ec.field_CertificationProjectEdges_build_requests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CertificationProjectEdges.BuildRequests(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.CertProjectBuildRequestFilter), args["sort_by"].([]*model.SortBy)), true

	case "CertificationProjectEdges.scan_requests":
		if e.complexity.CertificationProjectEdges.ScanRequests == nil {
			break
		}

		args, err := ec.field_CertificationProjectEdges_scan_requests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CertificationProjectEdges.ScanRequests(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.CertProjectScanRequestFilter), args["sort_by"].([]*model.SortBy)), true

	case "CertificationProjectEdges.tag_requests":
		if e.complexity.CertificationProjectEdges.TagRequests == nil {
			break
		}

		args, err := ec.field_CertificationProjectEdges_tag_requests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CertificationProjectEdges.TagRequests(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.CertProjectTagRequestFilter), args["sort_by"].([]*model.SortBy)), true

	case "CertificationProjectEdges.vendor":
		if e.complexity.CertificationProjectEdges.Vendor == nil {
			break
		}

		return e.complexity.CertificationProjectEdges.Vendor(childComplexity), true

	case "CertificationProjectPaginatedResponse.data":
		if e.complexity.CertificationProjectPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.CertificationProjectPaginatedResponse.Data(childComplexity), true

	case "CertificationProjectPaginatedResponse.error":
		if e.complexity.CertificationProjectPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.CertificationProjectPaginatedResponse.Error(childComplexity), true

	case "CertificationProjectPaginatedResponse.page":
		if e.complexity.CertificationProjectPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.CertificationProjectPaginatedResponse.Page(childComplexity), true

	case "CertificationProjectPaginatedResponse.page_size":
		if e.complexity.CertificationProjectPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.CertificationProjectPaginatedResponse.PageSize(childComplexity), true

	case "CertificationProjectPaginatedResponse.total":
		if e.complexity.CertificationProjectPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.CertificationProjectPaginatedResponse.Total(childComplexity), true

	case "CertificationProjectResponse.data":
		if e.complexity.CertificationProjectResponse.Data == nil {
			break
		}

		return e.complexity.CertificationProjectResponse.Data(childComplexity), true

	case "CertificationProjectResponse.error":
		if e.complexity.CertificationProjectResponse.Error == nil {
			break
		}

		return e.complexity.CertificationProjectResponse.Error(childComplexity), true

	case "ContactsItems.email_address":
		if e.complexity.ContactsItems.EmailAddress == nil {
			break
		}

		return e.complexity.ContactsItems.EmailAddress(childComplexity), true

	case "ContactsItems.type":
		if e.complexity.ContactsItems.Type == nil {
			break
		}

		return e.complexity.ContactsItems.Type(childComplexity), true

	case "ContainerFile.content":
		if e.complexity.ContainerFile.Content == nil {
			break
		}

		return e.complexity.ContainerFile.Content(childComplexity), true

	case "ContainerFile.filename":
		if e.complexity.ContainerFile.Filename == nil {
			break
		}

		return e.complexity.ContainerFile.Filename(childComplexity), true

	case "ContainerFile.key":
		if e.complexity.ContainerFile.Key == nil {
			break
		}

		return e.complexity.ContainerFile.Key(childComplexity), true

	case "ContainerFilePaginatedResponse.data":
		if e.complexity.ContainerFilePaginatedResponse.Data == nil {
			break
		}

		return e.complexity.ContainerFilePaginatedResponse.Data(childComplexity), true

	case "ContainerFilePaginatedResponse.error":
		if e.complexity.ContainerFilePaginatedResponse.Error == nil {
			break
		}

		return e.complexity.ContainerFilePaginatedResponse.Error(childComplexity), true

	case "ContainerFilePaginatedResponse.page":
		if e.complexity.ContainerFilePaginatedResponse.Page == nil {
			break
		}

		return e.complexity.ContainerFilePaginatedResponse.Page(childComplexity), true

	case "ContainerFilePaginatedResponse.page_size":
		if e.complexity.ContainerFilePaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.ContainerFilePaginatedResponse.PageSize(childComplexity), true

	case "ContainerFilePaginatedResponse.total":
		if e.complexity.ContainerFilePaginatedResponse.Total == nil {
			break
		}

		return e.complexity.ContainerFilePaginatedResponse.Total(childComplexity), true

	case "ContainerGrades.architecture":
		if e.complexity.ContainerGrades.Architecture == nil {
			break
		}

		return e.complexity.ContainerGrades.Architecture(childComplexity), true

	case "ContainerGrades.current_grade":
		if e.complexity.ContainerGrades.CurrentGrade == nil {
			break
		}

		return e.complexity.ContainerGrades.CurrentGrade(childComplexity), true

	case "ContainerGrades.edges":
		if e.complexity.ContainerGrades.Edges == nil {
			break
		}

		return e.complexity.ContainerGrades.Edges(childComplexity), true

	case "ContainerGrades.freshness_grades":
		if e.complexity.ContainerGrades.FreshnessGrades == nil {
			break
		}

		return e.complexity.ContainerGrades.FreshnessGrades(childComplexity), true

	case "ContainerGrades.image_id":
		if e.complexity.ContainerGrades.ImageID == nil {
			break
		}

		return e.complexity.ContainerGrades.ImageID(childComplexity), true

	case "ContainerGrades.next_drop_date":
		if e.complexity.ContainerGrades.NextDropDate == nil {
			break
		}

		return e.complexity.ContainerGrades.NextDropDate(childComplexity), true

	case "ContainerGrades.tag":
		if e.complexity.ContainerGrades.Tag == nil {
			break
		}

		return e.complexity.ContainerGrades.Tag(childComplexity), true

	case "ContainerGradesEdges.image":
		if e.complexity.ContainerGradesEdges.Image == nil {
			break
		}

		return e.complexity.ContainerGradesEdges.Image(childComplexity), true

	case "ContainerGradesListResponse.data":
		if e.complexity.ContainerGradesListResponse.Data == nil {
			break
		}

		return e.complexity.ContainerGradesListResponse.Data(childComplexity), true

	case "ContainerGradesListResponse.error":
		if e.complexity.ContainerGradesListResponse.Error == nil {
			break
		}

		return e.complexity.ContainerGradesListResponse.Error(childComplexity), true

	case "ContainerImage.architecture":
		if e.complexity.ContainerImage.Architecture == nil {
			break
		}

		return e.complexity.ContainerImage.Architecture(childComplexity), true

	case "ContainerImage.brew":
		if e.complexity.ContainerImage.Brew == nil {
			break
		}

		return e.complexity.ContainerImage.Brew(childComplexity), true

	case "ContainerImage.certifications":
		if e.complexity.ContainerImage.Certifications == nil {
			break
		}

		return e.complexity.ContainerImage.Certifications(childComplexity), true

	case "ContainerImage.certified":
		if e.complexity.ContainerImage.Certified == nil {
			break
		}

		return e.complexity.ContainerImage.Certified(childComplexity), true

	case "ContainerImage.content_sets":
		if e.complexity.ContainerImage.ContentSets == nil {
			break
		}

		return e.complexity.ContainerImage.ContentSets(childComplexity), true

	case "ContainerImage.cpe_ids":
		if e.complexity.ContainerImage.CpeIds == nil {
			break
		}

		return e.complexity.ContainerImage.CpeIds(childComplexity), true

	case "ContainerImage.cpe_ids_rh_base_images":
		if e.complexity.ContainerImage.CpeIdsRhBaseImages == nil {
			break
		}

		return e.complexity.ContainerImage.CpeIdsRhBaseImages(childComplexity), true

	case "ContainerImage.creation_date":
		if e.complexity.ContainerImage.CreationDate == nil {
			break
		}

		return e.complexity.ContainerImage.CreationDate(childComplexity), true

	case "ContainerImage.deleted":
		if e.complexity.ContainerImage.Deleted == nil {
			break
		}

		return e.complexity.ContainerImage.Deleted(childComplexity), true

	case "ContainerImage.docker_image_digest":
		if e.complexity.ContainerImage.DockerImageDigest == nil {
			break
		}

		return e.complexity.ContainerImage.DockerImageDigest(childComplexity), true

	case "ContainerImage.docker_image_id":
		if e.complexity.ContainerImage.DockerImageID == nil {
			break
		}

		return e.complexity.ContainerImage.DockerImageID(childComplexity), true

	case "ContainerImage.edges":
		if e.complexity.ContainerImage.Edges == nil {
			break
		}

		return e.complexity.ContainerImage.Edges(childComplexity), true

	case "ContainerImage.freshness_grades":
		if e.complexity.ContainerImage.FreshnessGrades == nil {
			break
		}

		return e.complexity.ContainerImage.FreshnessGrades(childComplexity), true

	case "ContainerImage._id":
		if e.complexity.ContainerImage.ID == nil {
			break
		}

		return e.complexity.ContainerImage.ID(childComplexity), true

	case "ContainerImage.image_id":
		if e.complexity.ContainerImage.ImageID == nil {
			break
		}

		return e.complexity.ContainerImage.ImageID(childComplexity), true

	case "ContainerImage.isv_pid":
		if e.complexity.ContainerImage.IsvPid == nil {
			break
		}

		return e.complexity.ContainerImage.IsvPid(childComplexity), true

	case "ContainerImage.last_update_date":
		if e.complexity.ContainerImage.LastUpdateDate == nil {
			break
		}

		return e.complexity.ContainerImage.LastUpdateDate(childComplexity), true

	case "ContainerImage.object_type":
		if e.complexity.ContainerImage.ObjectType == nil {
			break
		}

		return e.complexity.ContainerImage.ObjectType(childComplexity), true

	case "ContainerImage.parsed_data":
		if e.complexity.ContainerImage.ParsedData == nil {
			break
		}

		return e.complexity.ContainerImage.ParsedData(childComplexity), true

	case "ContainerImage.raw_config":
		if e.complexity.ContainerImage.RawConfig == nil {
			break
		}

		return e.complexity.ContainerImage.RawConfig(childComplexity), true

	case "ContainerImage.repositories":
		if e.complexity.ContainerImage.Repositories == nil {
			break
		}

		return e.complexity.ContainerImage.Repositories(childComplexity), true

	case "ContainerImage.scan_status":
		if e.complexity.ContainerImage.ScanStatus == nil {
			break
		}

		return e.complexity.ContainerImage.ScanStatus(childComplexity), true

	case "ContainerImage.sum_layer_size_bytes":
		if e.complexity.ContainerImage.SumLayerSizeBytes == nil {
			break
		}

		return e.complexity.ContainerImage.SumLayerSizeBytes(childComplexity), true

	case "ContainerImage.top_layer_id":
		if e.complexity.ContainerImage.TopLayerID == nil {
			break
		}

		return e.complexity.ContainerImage.TopLayerID(childComplexity), true

	case "ContainerImage.uncompressed_top_layer_id":
		if e.complexity.ContainerImage.UncompressedTopLayerID == nil {
			break
		}

		return e.complexity.ContainerImage.UncompressedTopLayerID(childComplexity), true

	case "ContainerImageEdges.artifacts":
		if e.complexity.ContainerImageEdges.Artifacts == nil {
			break
		}

		args, err := ec.field_ContainerImageEdges_artifacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerImageEdges.Artifacts(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.CertProjectArtifactFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerImageEdges.rpm_manifest":
		if e.complexity.ContainerImageEdges.RpmManifest == nil {
			break
		}

		return e.complexity.ContainerImageEdges.RpmManifest(childComplexity), true

	case "ContainerImageEdges.test_results":
		if e.complexity.ContainerImageEdges.TestResults == nil {
			break
		}

		args, err := ec.field_ContainerImageEdges_test_results_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerImageEdges.TestResults(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.CertProjectTestResultFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerImageEdges.vulnerabilities":
		if e.complexity.ContainerImageEdges.Vulnerabilities == nil {
			break
		}

		args, err := ec.field_ContainerImageEdges_vulnerabilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerImageEdges.Vulnerabilities(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.ContainerImageVulnerabilityFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerImagePaginatedResponse.data":
		if e.complexity.ContainerImagePaginatedResponse.Data == nil {
			break
		}

		return e.complexity.ContainerImagePaginatedResponse.Data(childComplexity), true

	case "ContainerImagePaginatedResponse.error":
		if e.complexity.ContainerImagePaginatedResponse.Error == nil {
			break
		}

		return e.complexity.ContainerImagePaginatedResponse.Error(childComplexity), true

	case "ContainerImagePaginatedResponse.page":
		if e.complexity.ContainerImagePaginatedResponse.Page == nil {
			break
		}

		return e.complexity.ContainerImagePaginatedResponse.Page(childComplexity), true

	case "ContainerImagePaginatedResponse.page_size":
		if e.complexity.ContainerImagePaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.ContainerImagePaginatedResponse.PageSize(childComplexity), true

	case "ContainerImagePaginatedResponse.total":
		if e.complexity.ContainerImagePaginatedResponse.Total == nil {
			break
		}

		return e.complexity.ContainerImagePaginatedResponse.Total(childComplexity), true

	case "ContainerImageRPMManifest.creation_date":
		if e.complexity.ContainerImageRPMManifest.CreationDate == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifest.CreationDate(childComplexity), true

	case "ContainerImageRPMManifest.edges":
		if e.complexity.ContainerImageRPMManifest.Edges == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifest.Edges(childComplexity), true

	case "ContainerImageRPMManifest._id":
		if e.complexity.ContainerImageRPMManifest.ID == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifest.ID(childComplexity), true

	case "ContainerImageRPMManifest.image_id":
		if e.complexity.ContainerImageRPMManifest.ImageID == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifest.ImageID(childComplexity), true

	case "ContainerImageRPMManifest.last_update_date":
		if e.complexity.ContainerImageRPMManifest.LastUpdateDate == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifest.LastUpdateDate(childComplexity), true

	case "ContainerImageRPMManifest.object_type":
		if e.complexity.ContainerImageRPMManifest.ObjectType == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifest.ObjectType(childComplexity), true

	case "ContainerImageRPMManifest.rpms":
		if e.complexity.ContainerImageRPMManifest.Rpms == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifest.Rpms(childComplexity), true

	case "ContainerImageRPMManifestEdges.image":
		if e.complexity.ContainerImageRPMManifestEdges.Image == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifestEdges.Image(childComplexity), true

	case "ContainerImageRPMManifestResponse.data":
		if e.complexity.ContainerImageRPMManifestResponse.Data == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifestResponse.Data(childComplexity), true

	case "ContainerImageRPMManifestResponse.error":
		if e.complexity.ContainerImageRPMManifestResponse.Error == nil {
			break
		}

		return e.complexity.ContainerImageRPMManifestResponse.Error(childComplexity), true

	case "ContainerImageRepo.comparison":
		if e.complexity.ContainerImageRepo.Comparison == nil {
			break
		}

		return e.complexity.ContainerImageRepo.Comparison(childComplexity), true

	case "ContainerImageRepo.content_advisory_ids":
		if e.complexity.ContainerImageRepo.ContentAdvisoryIds == nil {
			break
		}

		return e.complexity.ContainerImageRepo.ContentAdvisoryIds(childComplexity), true

	case "ContainerImageRepo.edges":
		if e.complexity.ContainerImageRepo.Edges == nil {
			break
		}

		return e.complexity.ContainerImageRepo.Edges(childComplexity), true

	case "ContainerImageRepo.image_advisory_id":
		if e.complexity.ContainerImageRepo.ImageAdvisoryID == nil {
			break
		}

		return e.complexity.ContainerImageRepo.ImageAdvisoryID(childComplexity), true

	case "ContainerImageRepo.manifest_list_digest":
		if e.complexity.ContainerImageRepo.ManifestListDigest == nil {
			break
		}

		return e.complexity.ContainerImageRepo.ManifestListDigest(childComplexity), true

	case "ContainerImageRepo.manifest_schema2_digest":
		if e.complexity.ContainerImageRepo.ManifestSchema2Digest == nil {
			break
		}

		return e.complexity.ContainerImageRepo.ManifestSchema2Digest(childComplexity), true

	case "ContainerImageRepo.published":
		if e.complexity.ContainerImageRepo.Published == nil {
			break
		}

		return e.complexity.ContainerImageRepo.Published(childComplexity), true

	case "ContainerImageRepo.published_date":
		if e.complexity.ContainerImageRepo.PublishedDate == nil {
			break
		}

		return e.complexity.ContainerImageRepo.PublishedDate(childComplexity), true

	case "ContainerImageRepo.push_date":
		if e.complexity.ContainerImageRepo.PushDate == nil {
			break
		}

		return e.complexity.ContainerImageRepo.PushDate(childComplexity), true

	case "ContainerImageRepo.registry":
		if e.complexity.ContainerImageRepo.Registry == nil {
			break
		}

		return e.complexity.ContainerImageRepo.Registry(childComplexity), true

	case "ContainerImageRepo.repository":
		if e.complexity.ContainerImageRepo.Repository == nil {
			break
		}

		return e.complexity.ContainerImageRepo.Repository(childComplexity), true

	case "ContainerImageRepo.signatures":
		if e.complexity.ContainerImageRepo.Signatures == nil {
			break
		}

		return e.complexity.ContainerImageRepo.Signatures(childComplexity), true

	case "ContainerImageRepo.tags":
		if e.complexity.ContainerImageRepo.Tags == nil {
			break
		}

		return e.complexity.ContainerImageRepo.Tags(childComplexity), true

	case "ContainerImageRepoComparison.advisory_rpm_mapping":
		if e.complexity.ContainerImageRepoComparison.AdvisoryRpmMapping == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparison.AdvisoryRpmMapping(childComplexity), true

	case "ContainerImageRepoComparison.reason":
		if e.complexity.ContainerImageRepoComparison.Reason == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparison.Reason(childComplexity), true

	case "ContainerImageRepoComparison.reason_text":
		if e.complexity.ContainerImageRepoComparison.ReasonText == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparison.ReasonText(childComplexity), true

	case "ContainerImageRepoComparison.rpms":
		if e.complexity.ContainerImageRepoComparison.Rpms == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparison.Rpms(childComplexity), true

	case "ContainerImageRepoComparison.with_nvr":
		if e.complexity.ContainerImageRepoComparison.WithNvr == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparison.WithNvr(childComplexity), true

	case "ContainerImageRepoComparisonMapping.advisory_ids":
		if e.complexity.ContainerImageRepoComparisonMapping.AdvisoryIds == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparisonMapping.AdvisoryIds(childComplexity), true

	case "ContainerImageRepoComparisonMapping.nvra":
		if e.complexity.ContainerImageRepoComparisonMapping.Nvra == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparisonMapping.Nvra(childComplexity), true

	case "ContainerImageRepoComparisonRPMs.downgrade":
		if e.complexity.ContainerImageRepoComparisonRPMs.Downgrade == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparisonRPMs.Downgrade(childComplexity), true

	case "ContainerImageRepoComparisonRPMs.new":
		if e.complexity.ContainerImageRepoComparisonRPMs.New == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparisonRPMs.New(childComplexity), true

	case "ContainerImageRepoComparisonRPMs.remove":
		if e.complexity.ContainerImageRepoComparisonRPMs.Remove == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparisonRPMs.Remove(childComplexity), true

	case "ContainerImageRepoComparisonRPMs.upgrade":
		if e.complexity.ContainerImageRepoComparisonRPMs.Upgrade == nil {
			break
		}

		return e.complexity.ContainerImageRepoComparisonRPMs.Upgrade(childComplexity), true

	case "ContainerImageRepoEdges.image_advisory":
		if e.complexity.ContainerImageRepoEdges.ImageAdvisory == nil {
			break
		}

		return e.complexity.ContainerImageRepoEdges.ImageAdvisory(childComplexity), true

	case "ContainerImageRepoEdges.repository":
		if e.complexity.ContainerImageRepoEdges.Repository == nil {
			break
		}

		return e.complexity.ContainerImageRepoEdges.Repository(childComplexity), true

	case "ContainerImageRepoTag.added_date":
		if e.complexity.ContainerImageRepoTag.AddedDate == nil {
			break
		}

		return e.complexity.ContainerImageRepoTag.AddedDate(childComplexity), true

	case "ContainerImageRepoTag.edges":
		if e.complexity.ContainerImageRepoTag.Edges == nil {
			break
		}

		return e.complexity.ContainerImageRepoTag.Edges(childComplexity), true

	case "ContainerImageRepoTag.manifest_schema1_digest":
		if e.complexity.ContainerImageRepoTag.ManifestSchema1Digest == nil {
			break
		}

		return e.complexity.ContainerImageRepoTag.ManifestSchema1Digest(childComplexity), true

	case "ContainerImageRepoTag.name":
		if e.complexity.ContainerImageRepoTag.Name == nil {
			break
		}

		return e.complexity.ContainerImageRepoTag.Name(childComplexity), true

	case "ContainerImageRepoTag.removed_date":
		if e.complexity.ContainerImageRepoTag.RemovedDate == nil {
			break
		}

		return e.complexity.ContainerImageRepoTag.RemovedDate(childComplexity), true

	case "ContainerImageRepoTagEdges.tag_history":
		if e.complexity.ContainerImageRepoTagEdges.TagHistory == nil {
			break
		}

		return e.complexity.ContainerImageRepoTagEdges.TagHistory(childComplexity), true

	case "ContainerImageResponse.data":
		if e.complexity.ContainerImageResponse.Data == nil {
			break
		}

		return e.complexity.ContainerImageResponse.Data(childComplexity), true

	case "ContainerImageResponse.error":
		if e.complexity.ContainerImageResponse.Error == nil {
			break
		}

		return e.complexity.ContainerImageResponse.Error(childComplexity), true

	case "ContainerImageVulnerability.advisory_id":
		if e.complexity.ContainerImageVulnerability.AdvisoryID == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.AdvisoryID(childComplexity), true

	case "ContainerImageVulnerability.advisory_type":
		if e.complexity.ContainerImageVulnerability.AdvisoryType == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.AdvisoryType(childComplexity), true

	case "ContainerImageVulnerability.creation_date":
		if e.complexity.ContainerImageVulnerability.CreationDate == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.CreationDate(childComplexity), true

	case "ContainerImageVulnerability.cve_id":
		if e.complexity.ContainerImageVulnerability.CveID == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.CveID(childComplexity), true

	case "ContainerImageVulnerability.edges":
		if e.complexity.ContainerImageVulnerability.Edges == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.Edges(childComplexity), true

	case "ContainerImageVulnerability._id":
		if e.complexity.ContainerImageVulnerability.ID == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.ID(childComplexity), true

	case "ContainerImageVulnerability.last_update_date":
		if e.complexity.ContainerImageVulnerability.LastUpdateDate == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.LastUpdateDate(childComplexity), true

	case "ContainerImageVulnerability.object_type":
		if e.complexity.ContainerImageVulnerability.ObjectType == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.ObjectType(childComplexity), true

	case "ContainerImageVulnerability.packages":
		if e.complexity.ContainerImageVulnerability.Packages == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.Packages(childComplexity), true

	case "ContainerImageVulnerability.public_date":
		if e.complexity.ContainerImageVulnerability.PublicDate == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.PublicDate(childComplexity), true

	case "ContainerImageVulnerability.severity":
		if e.complexity.ContainerImageVulnerability.Severity == nil {
			break
		}

		return e.complexity.ContainerImageVulnerability.Severity(childComplexity), true

	case "ContainerImageVulnerabilityEdges.advisory":
		if e.complexity.ContainerImageVulnerabilityEdges.Advisory == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityEdges.Advisory(childComplexity), true

	case "ContainerImageVulnerabilityFixedByImage.edges":
		if e.complexity.ContainerImageVulnerabilityFixedByImage.Edges == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityFixedByImage.Edges(childComplexity), true

	case "ContainerImageVulnerabilityFixedByImage.id":
		if e.complexity.ContainerImageVulnerabilityFixedByImage.ID == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityFixedByImage.ID(childComplexity), true

	case "ContainerImageVulnerabilityFixedByImage.repositories":
		if e.complexity.ContainerImageVulnerabilityFixedByImage.Repositories == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityFixedByImage.Repositories(childComplexity), true

	case "ContainerImageVulnerabilityFixedByImageEdges.image":
		if e.complexity.ContainerImageVulnerabilityFixedByImageEdges.Image == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityFixedByImageEdges.Image(childComplexity), true

	case "ContainerImageVulnerabilityFixedByRepository.registry":
		if e.complexity.ContainerImageVulnerabilityFixedByRepository.Registry == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityFixedByRepository.Registry(childComplexity), true

	case "ContainerImageVulnerabilityFixedByRepository.repository":
		if e.complexity.ContainerImageVulnerabilityFixedByRepository.Repository == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityFixedByRepository.Repository(childComplexity), true

	case "ContainerImageVulnerabilityFixedByRepository.tags":
		if e.complexity.ContainerImageVulnerabilityFixedByRepository.Tags == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityFixedByRepository.Tags(childComplexity), true

	case "ContainerImageVulnerabilityPackage.fixed_by_image":
		if e.complexity.ContainerImageVulnerabilityPackage.FixedByImage == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityPackage.FixedByImage(childComplexity), true

	case "ContainerImageVulnerabilityPackage.rpm_nvra":
		if e.complexity.ContainerImageVulnerabilityPackage.RpmNvra == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityPackage.RpmNvra(childComplexity), true

	case "ContainerImageVulnerabilityPackage.srpm_nevra":
		if e.complexity.ContainerImageVulnerabilityPackage.SrpmNevra == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityPackage.SrpmNevra(childComplexity), true

	case "ContainerImageVulnerabilityPaginatedResponse.data":
		if e.complexity.ContainerImageVulnerabilityPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityPaginatedResponse.Data(childComplexity), true

	case "ContainerImageVulnerabilityPaginatedResponse.error":
		if e.complexity.ContainerImageVulnerabilityPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityPaginatedResponse.Error(childComplexity), true

	case "ContainerImageVulnerabilityPaginatedResponse.page":
		if e.complexity.ContainerImageVulnerabilityPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityPaginatedResponse.Page(childComplexity), true

	case "ContainerImageVulnerabilityPaginatedResponse.page_size":
		if e.complexity.ContainerImageVulnerabilityPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityPaginatedResponse.PageSize(childComplexity), true

	case "ContainerImageVulnerabilityPaginatedResponse.total":
		if e.complexity.ContainerImageVulnerabilityPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityPaginatedResponse.Total(childComplexity), true

	case "ContainerImageVulnerabilityResponse.data":
		if e.complexity.ContainerImageVulnerabilityResponse.Data == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityResponse.Data(childComplexity), true

	case "ContainerImageVulnerabilityResponse.error":
		if e.complexity.ContainerImageVulnerabilityResponse.Error == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityResponse.Error(childComplexity), true

	case "ContainerImageVulnerabilityTag.name":
		if e.complexity.ContainerImageVulnerabilityTag.Name == nil {
			break
		}

		return e.complexity.ContainerImageVulnerabilityTag.Name(childComplexity), true

	case "ContainerRepository.application_categories":
		if e.complexity.ContainerRepository.ApplicationCategories == nil {
			break
		}

		return e.complexity.ContainerRepository.ApplicationCategories(childComplexity), true

	case "ContainerRepository.architectures":
		if e.complexity.ContainerRepository.Architectures == nil {
			break
		}

		return e.complexity.ContainerRepository.Architectures(childComplexity), true

	case "ContainerRepository.auto_rebuild_tags":
		if e.complexity.ContainerRepository.AutoRebuildTags == nil {
			break
		}

		return e.complexity.ContainerRepository.AutoRebuildTags(childComplexity), true

	case "ContainerRepository.beta":
		if e.complexity.ContainerRepository.Beta == nil {
			break
		}

		return e.complexity.ContainerRepository.Beta(childComplexity), true

	case "ContainerRepository.build_categories":
		if e.complexity.ContainerRepository.BuildCategories == nil {
			break
		}

		return e.complexity.ContainerRepository.BuildCategories(childComplexity), true

	case "ContainerRepository.can_auto_release_cve_rebuild":
		if e.complexity.ContainerRepository.CanAutoReleaseCveRebuild == nil {
			break
		}

		return e.complexity.ContainerRepository.CanAutoReleaseCveRebuild(childComplexity), true

	case "ContainerRepository.cdn_base_url":
		if e.complexity.ContainerRepository.CdnBaseURL == nil {
			break
		}

		return e.complexity.ContainerRepository.CdnBaseURL(childComplexity), true

	case "ContainerRepository.content_sets":
		if e.complexity.ContainerRepository.ContentSets == nil {
			break
		}

		return e.complexity.ContainerRepository.ContentSets(childComplexity), true

	case "ContainerRepository.content_stream_grades":
		if e.complexity.ContainerRepository.ContentStreamGrades == nil {
			break
		}

		return e.complexity.ContainerRepository.ContentStreamGrades(childComplexity), true

	case "ContainerRepository.content_stream_tags":
		if e.complexity.ContainerRepository.ContentStreamTags == nil {
			break
		}

		return e.complexity.ContainerRepository.ContentStreamTags(childComplexity), true

	case "ContainerRepository.creation_date":
		if e.complexity.ContainerRepository.CreationDate == nil {
			break
		}

		return e.complexity.ContainerRepository.CreationDate(childComplexity), true

	case "ContainerRepository.deprecated":
		if e.complexity.ContainerRepository.Deprecated == nil {
			break
		}

		return e.complexity.ContainerRepository.Deprecated(childComplexity), true

	case "ContainerRepository.description":
		if e.complexity.ContainerRepository.Description == nil {
			break
		}

		return e.complexity.ContainerRepository.Description(childComplexity), true

	case "ContainerRepository.display_data":
		if e.complexity.ContainerRepository.DisplayData == nil {
			break
		}

		return e.complexity.ContainerRepository.DisplayData(childComplexity), true

	case "ContainerRepository.documentation_links":
		if e.complexity.ContainerRepository.DocumentationLinks == nil {
			break
		}

		return e.complexity.ContainerRepository.DocumentationLinks(childComplexity), true

	case "ContainerRepository.edges":
		if e.complexity.ContainerRepository.Edges == nil {
			break
		}

		return e.complexity.ContainerRepository.Edges(childComplexity), true

	case "ContainerRepository.eol_date":
		if e.complexity.ContainerRepository.EolDate == nil {
			break
		}

		return e.complexity.ContainerRepository.EolDate(childComplexity), true

	case "ContainerRepository.freshness_grades_unknown_until_date":
		if e.complexity.ContainerRepository.FreshnessGradesUnknownUntilDate == nil {
			break
		}

		return e.complexity.ContainerRepository.FreshnessGradesUnknownUntilDate(childComplexity), true

	case "ContainerRepository._id":
		if e.complexity.ContainerRepository.ID == nil {
			break
		}

		return e.complexity.ContainerRepository.ID(childComplexity), true

	case "ContainerRepository.includes_multiple_content_streams":
		if e.complexity.ContainerRepository.IncludesMultipleContentStreams == nil {
			break
		}

		return e.complexity.ContainerRepository.IncludesMultipleContentStreams(childComplexity), true

	case "ContainerRepository.is_community_supported":
		if e.complexity.ContainerRepository.IsCommunitySupported == nil {
			break
		}

		return e.complexity.ContainerRepository.IsCommunitySupported(childComplexity), true

	case "ContainerRepository.isv_pid":
		if e.complexity.ContainerRepository.IsvPid == nil {
			break
		}

		return e.complexity.ContainerRepository.IsvPid(childComplexity), true

	case "ContainerRepository.label_override":
		if e.complexity.ContainerRepository.LabelOverride == nil {
			break
		}

		return e.complexity.ContainerRepository.LabelOverride(childComplexity), true

	case "ContainerRepository.last_update_date":
		if e.complexity.ContainerRepository.LastUpdateDate == nil {
			break
		}

		return e.complexity.ContainerRepository.LastUpdateDate(childComplexity), true

	case "ContainerRepository.metrics":
		if e.complexity.ContainerRepository.Metrics == nil {
			break
		}

		return e.complexity.ContainerRepository.Metrics(childComplexity), true

	case "ContainerRepository.namespace":
		if e.complexity.ContainerRepository.Namespace == nil {
			break
		}

		return e.complexity.ContainerRepository.Namespace(childComplexity), true

	case "ContainerRepository.non_production_only":
		if e.complexity.ContainerRepository.NonProductionOnly == nil {
			break
		}

		return e.complexity.ContainerRepository.NonProductionOnly(childComplexity), true

	case "ContainerRepository.object_type":
		if e.complexity.ContainerRepository.ObjectType == nil {
			break
		}

		return e.complexity.ContainerRepository.ObjectType(childComplexity), true

	case "ContainerRepository.privileged_images_allowed":
		if e.complexity.ContainerRepository.PrivilegedImagesAllowed == nil {
			break
		}

		return e.complexity.ContainerRepository.PrivilegedImagesAllowed(childComplexity), true

	case "ContainerRepository.prm_project_id":
		if e.complexity.ContainerRepository.PrmProjectID == nil {
			break
		}

		return e.complexity.ContainerRepository.PrmProjectID(childComplexity), true

	case "ContainerRepository.product_id":
		if e.complexity.ContainerRepository.ProductID == nil {
			break
		}

		return e.complexity.ContainerRepository.ProductID(childComplexity), true

	case "ContainerRepository.product_listings":
		if e.complexity.ContainerRepository.ProductListings == nil {
			break
		}

		return e.complexity.ContainerRepository.ProductListings(childComplexity), true

	case "ContainerRepository.product_versions":
		if e.complexity.ContainerRepository.ProductVersions == nil {
			break
		}

		return e.complexity.ContainerRepository.ProductVersions(childComplexity), true

	case "ContainerRepository.protected_for_pull":
		if e.complexity.ContainerRepository.ProtectedForPull == nil {
			break
		}

		return e.complexity.ContainerRepository.ProtectedForPull(childComplexity), true

	case "ContainerRepository.protected_for_search":
		if e.complexity.ContainerRepository.ProtectedForSearch == nil {
			break
		}

		return e.complexity.ContainerRepository.ProtectedForSearch(childComplexity), true

	case "ContainerRepository.published":
		if e.complexity.ContainerRepository.Published == nil {
			break
		}

		return e.complexity.ContainerRepository.Published(childComplexity), true

	case "ContainerRepository.registry":
		if e.complexity.ContainerRepository.Registry == nil {
			break
		}

		return e.complexity.ContainerRepository.Registry(childComplexity), true

	case "ContainerRepository.registry_target":
		if e.complexity.ContainerRepository.RegistryTarget == nil {
			break
		}

		return e.complexity.ContainerRepository.RegistryTarget(childComplexity), true

	case "ContainerRepository.release_categories":
		if e.complexity.ContainerRepository.ReleaseCategories == nil {
			break
		}

		return e.complexity.ContainerRepository.ReleaseCategories(childComplexity), true

	case "ContainerRepository.replaced_by_repository_name":
		if e.complexity.ContainerRepository.ReplacedByRepositoryName == nil {
			break
		}

		return e.complexity.ContainerRepository.ReplacedByRepositoryName(childComplexity), true

	case "ContainerRepository.repository":
		if e.complexity.ContainerRepository.Repository == nil {
			break
		}

		return e.complexity.ContainerRepository.Repository(childComplexity), true

	case "ContainerRepository.requires_terms":
		if e.complexity.ContainerRepository.RequiresTerms == nil {
			break
		}

		return e.complexity.ContainerRepository.RequiresTerms(childComplexity), true

	case "ContainerRepository.runs_on":
		if e.complexity.ContainerRepository.RunsOn == nil {
			break
		}

		return e.complexity.ContainerRepository.RunsOn(childComplexity), true

	case "ContainerRepository.source_container_image_enabled":
		if e.complexity.ContainerRepository.SourceContainerImageEnabled == nil {
			break
		}

		return e.complexity.ContainerRepository.SourceContainerImageEnabled(childComplexity), true

	case "ContainerRepository.support_levels":
		if e.complexity.ContainerRepository.SupportLevels == nil {
			break
		}

		return e.complexity.ContainerRepository.SupportLevels(childComplexity), true

	case "ContainerRepository.tech_preview":
		if e.complexity.ContainerRepository.TechPreview == nil {
			break
		}

		return e.complexity.ContainerRepository.TechPreview(childComplexity), true

	case "ContainerRepository.total_size_bytes":
		if e.complexity.ContainerRepository.TotalSizeBytes == nil {
			break
		}

		return e.complexity.ContainerRepository.TotalSizeBytes(childComplexity), true

	case "ContainerRepository.total_uncompressed_size_bytes":
		if e.complexity.ContainerRepository.TotalUncompressedSizeBytes == nil {
			break
		}

		return e.complexity.ContainerRepository.TotalUncompressedSizeBytes(childComplexity), true

	case "ContainerRepository.ui_get_this_image_override":
		if e.complexity.ContainerRepository.UIGetThisImageOverride == nil {
			break
		}

		return e.complexity.ContainerRepository.UIGetThisImageOverride(childComplexity), true

	case "ContainerRepository.vendor_label":
		if e.complexity.ContainerRepository.VendorLabel == nil {
			break
		}

		return e.complexity.ContainerRepository.VendorLabel(childComplexity), true

	case "ContainerRepositoryEdges.certification_project":
		if e.complexity.ContainerRepositoryEdges.CertificationProject == nil {
			break
		}

		args, err := ec.field_ContainerRepositoryEdges_certification_project_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerRepositoryEdges.CertificationProject(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.CertificationProjectFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerRepositoryEdges.images":
		if e.complexity.ContainerRepositoryEdges.Images == nil {
			break
		}

		args, err := ec.field_ContainerRepositoryEdges_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerRepositoryEdges.Images(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.ContainerImageFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerRepositoryEdges.operator_bundles":
		if e.complexity.ContainerRepositoryEdges.OperatorBundles == nil {
			break
		}

		args, err := ec.field_ContainerRepositoryEdges_operator_bundles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerRepositoryEdges.OperatorBundles(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.OperatorBundleFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerRepositoryEdges.product_listings":
		if e.complexity.ContainerRepositoryEdges.ProductListings == nil {
			break
		}

		args, err := ec.field_ContainerRepositoryEdges_product_listings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerRepositoryEdges.ProductListings(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.ProductListingFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerRepositoryEdges.replaced_by_repository":
		if e.complexity.ContainerRepositoryEdges.ReplacedByRepository == nil {
			break
		}

		return e.complexity.ContainerRepositoryEdges.ReplacedByRepository(childComplexity), true

	case "ContainerRepositoryEdges.vendor":
		if e.complexity.ContainerRepositoryEdges.Vendor == nil {
			break
		}

		return e.complexity.ContainerRepositoryEdges.Vendor(childComplexity), true

	case "ContainerRepositoryPaginatedResponse.data":
		if e.complexity.ContainerRepositoryPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.ContainerRepositoryPaginatedResponse.Data(childComplexity), true

	case "ContainerRepositoryPaginatedResponse.error":
		if e.complexity.ContainerRepositoryPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.ContainerRepositoryPaginatedResponse.Error(childComplexity), true

	case "ContainerRepositoryPaginatedResponse.page":
		if e.complexity.ContainerRepositoryPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.ContainerRepositoryPaginatedResponse.Page(childComplexity), true

	case "ContainerRepositoryPaginatedResponse.page_size":
		if e.complexity.ContainerRepositoryPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.ContainerRepositoryPaginatedResponse.PageSize(childComplexity), true

	case "ContainerRepositoryPaginatedResponse.total":
		if e.complexity.ContainerRepositoryPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.ContainerRepositoryPaginatedResponse.Total(childComplexity), true

	case "ContainerRepositoryResponse.data":
		if e.complexity.ContainerRepositoryResponse.Data == nil {
			break
		}

		return e.complexity.ContainerRepositoryResponse.Data(childComplexity), true

	case "ContainerRepositoryResponse.error":
		if e.complexity.ContainerRepositoryResponse.Error == nil {
			break
		}

		return e.complexity.ContainerRepositoryResponse.Error(childComplexity), true

	case "ContainerTagHistory.creation_date":
		if e.complexity.ContainerTagHistory.CreationDate == nil {
			break
		}

		return e.complexity.ContainerTagHistory.CreationDate(childComplexity), true

	case "ContainerTagHistory.edges":
		if e.complexity.ContainerTagHistory.Edges == nil {
			break
		}

		return e.complexity.ContainerTagHistory.Edges(childComplexity), true

	case "ContainerTagHistory.history":
		if e.complexity.ContainerTagHistory.History == nil {
			break
		}

		return e.complexity.ContainerTagHistory.History(childComplexity), true

	case "ContainerTagHistory._id":
		if e.complexity.ContainerTagHistory.ID == nil {
			break
		}

		return e.complexity.ContainerTagHistory.ID(childComplexity), true

	case "ContainerTagHistory.last_update_date":
		if e.complexity.ContainerTagHistory.LastUpdateDate == nil {
			break
		}

		return e.complexity.ContainerTagHistory.LastUpdateDate(childComplexity), true

	case "ContainerTagHistory.object_type":
		if e.complexity.ContainerTagHistory.ObjectType == nil {
			break
		}

		return e.complexity.ContainerTagHistory.ObjectType(childComplexity), true

	case "ContainerTagHistory.registry":
		if e.complexity.ContainerTagHistory.Registry == nil {
			break
		}

		return e.complexity.ContainerTagHistory.Registry(childComplexity), true

	case "ContainerTagHistory.repository":
		if e.complexity.ContainerTagHistory.Repository == nil {
			break
		}

		return e.complexity.ContainerTagHistory.Repository(childComplexity), true

	case "ContainerTagHistory.tag":
		if e.complexity.ContainerTagHistory.Tag == nil {
			break
		}

		return e.complexity.ContainerTagHistory.Tag(childComplexity), true

	case "ContainerTagHistory.tag_type":
		if e.complexity.ContainerTagHistory.TagType == nil {
			break
		}

		return e.complexity.ContainerTagHistory.TagType(childComplexity), true

	case "ContainerTagHistoryEdges.images":
		if e.complexity.ContainerTagHistoryEdges.Images == nil {
			break
		}

		args, err := ec.field_ContainerTagHistoryEdges_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerTagHistoryEdges.Images(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.ContainerImageFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerTagHistoryPaginatedResponse.data":
		if e.complexity.ContainerTagHistoryPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.ContainerTagHistoryPaginatedResponse.Data(childComplexity), true

	case "ContainerTagHistoryPaginatedResponse.error":
		if e.complexity.ContainerTagHistoryPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.ContainerTagHistoryPaginatedResponse.Error(childComplexity), true

	case "ContainerTagHistoryPaginatedResponse.page":
		if e.complexity.ContainerTagHistoryPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.ContainerTagHistoryPaginatedResponse.Page(childComplexity), true

	case "ContainerTagHistoryPaginatedResponse.page_size":
		if e.complexity.ContainerTagHistoryPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.ContainerTagHistoryPaginatedResponse.PageSize(childComplexity), true

	case "ContainerTagHistoryPaginatedResponse.total":
		if e.complexity.ContainerTagHistoryPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.ContainerTagHistoryPaginatedResponse.Total(childComplexity), true

	case "ContainerTagHistoryResponse.data":
		if e.complexity.ContainerTagHistoryResponse.Data == nil {
			break
		}

		return e.complexity.ContainerTagHistoryResponse.Data(childComplexity), true

	case "ContainerTagHistoryResponse.error":
		if e.complexity.ContainerTagHistoryResponse.Error == nil {
			break
		}

		return e.complexity.ContainerTagHistoryResponse.Error(childComplexity), true

	case "ContainerVendor.company_url":
		if e.complexity.ContainerVendor.CompanyURL == nil {
			break
		}

		return e.complexity.ContainerVendor.CompanyURL(childComplexity), true

	case "ContainerVendor.contact":
		if e.complexity.ContainerVendor.Contact == nil {
			break
		}

		return e.complexity.ContainerVendor.Contact(childComplexity), true

	case "ContainerVendor.creation_date":
		if e.complexity.ContainerVendor.CreationDate == nil {
			break
		}

		return e.complexity.ContainerVendor.CreationDate(childComplexity), true

	case "ContainerVendor.description":
		if e.complexity.ContainerVendor.Description == nil {
			break
		}

		return e.complexity.ContainerVendor.Description(childComplexity), true

	case "ContainerVendor.drupal_company_id":
		if e.complexity.ContainerVendor.DrupalCompanyID == nil {
			break
		}

		return e.complexity.ContainerVendor.DrupalCompanyID(childComplexity), true

	case "ContainerVendor.edges":
		if e.complexity.ContainerVendor.Edges == nil {
			break
		}

		return e.complexity.ContainerVendor.Edges(childComplexity), true

	case "ContainerVendor._id":
		if e.complexity.ContainerVendor.ID == nil {
			break
		}

		return e.complexity.ContainerVendor.ID(childComplexity), true

	case "ContainerVendor.industries":
		if e.complexity.ContainerVendor.Industries == nil {
			break
		}

		return e.complexity.ContainerVendor.Industries(childComplexity), true

	case "ContainerVendor.label":
		if e.complexity.ContainerVendor.Label == nil {
			break
		}

		return e.complexity.ContainerVendor.Label(childComplexity), true

	case "ContainerVendor.label_locked":
		if e.complexity.ContainerVendor.LabelLocked == nil {
			break
		}

		return e.complexity.ContainerVendor.LabelLocked(childComplexity), true

	case "ContainerVendor.last_update_date":
		if e.complexity.ContainerVendor.LastUpdateDate == nil {
			break
		}

		return e.complexity.ContainerVendor.LastUpdateDate(childComplexity), true

	case "ContainerVendor.logo_url":
		if e.complexity.ContainerVendor.LogoURL == nil {
			break
		}

		return e.complexity.ContainerVendor.LogoURL(childComplexity), true

	case "ContainerVendor.name":
		if e.complexity.ContainerVendor.Name == nil {
			break
		}

		return e.complexity.ContainerVendor.Name(childComplexity), true

	case "ContainerVendor.object_type":
		if e.complexity.ContainerVendor.ObjectType == nil {
			break
		}

		return e.complexity.ContainerVendor.ObjectType(childComplexity), true

	case "ContainerVendor.org_id":
		if e.complexity.ContainerVendor.OrgID == nil {
			break
		}

		return e.complexity.ContainerVendor.OrgID(childComplexity), true

	case "ContainerVendor.published":
		if e.complexity.ContainerVendor.Published == nil {
			break
		}

		return e.complexity.ContainerVendor.Published(childComplexity), true

	case "ContainerVendor.registry_urls":
		if e.complexity.ContainerVendor.RegistryUrls == nil {
			break
		}

		return e.complexity.ContainerVendor.RegistryUrls(childComplexity), true

	case "ContainerVendor.rss_feed_url":
		if e.complexity.ContainerVendor.RssFeedURL == nil {
			break
		}

		return e.complexity.ContainerVendor.RssFeedURL(childComplexity), true

	case "ContainerVendor.service_account_token":
		if e.complexity.ContainerVendor.ServiceAccountToken == nil {
			break
		}

		return e.complexity.ContainerVendor.ServiceAccountToken(childComplexity), true

	case "ContainerVendor.social_media_links":
		if e.complexity.ContainerVendor.SocialMediaLinks == nil {
			break
		}

		return e.complexity.ContainerVendor.SocialMediaLinks(childComplexity), true

	case "ContainerVendorContact.email":
		if e.complexity.ContainerVendorContact.Email == nil {
			break
		}

		return e.complexity.ContainerVendorContact.Email(childComplexity), true

	case "ContainerVendorContact.phone":
		if e.complexity.ContainerVendorContact.Phone == nil {
			break
		}

		return e.complexity.ContainerVendorContact.Phone(childComplexity), true

	case "ContainerVendorEdges.product_listings_label":
		if e.complexity.ContainerVendorEdges.ProductListingsLabel == nil {
			break
		}

		args, err := ec.field_ContainerVendorEdges_product_listings_label_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerVendorEdges.ProductListingsLabel(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.ProductListingFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerVendorEdges.product_listings_org_id":
		if e.complexity.ContainerVendorEdges.ProductListingsOrgID == nil {
			break
		}

		args, err := ec.field_ContainerVendorEdges_product_listings_org_id_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerVendorEdges.ProductListingsOrgID(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.ProductListingFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerVendorEdges.repositories":
		if e.complexity.ContainerVendorEdges.Repositories == nil {
			break
		}

		args, err := ec.field_ContainerVendorEdges_repositories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerVendorEdges.Repositories(childComplexity, args["page_size"].(*int), args["page"].(*int), args["filter"].(*model.ContainerRepositoryFilter), args["sort_by"].([]*model.SortBy)), true

	case "ContainerVendorResponse.data":
		if e.complexity.ContainerVendorResponse.Data == nil {
			break
		}

		return e.complexity.ContainerVendorResponse.Data(childComplexity), true

	case "ContainerVendorResponse.error":
		if e.complexity.ContainerVendorResponse.Error == nil {
			break
		}

		return e.complexity.ContainerVendorResponse.Error(childComplexity), true

	case "ContainerVendorSocialMediaLinks.name":
		if e.complexity.ContainerVendorSocialMediaLinks.Name == nil {
			break
		}

		return e.complexity.ContainerVendorSocialMediaLinks.Name(childComplexity), true

	case "ContainerVendorSocialMediaLinks.url":
		if e.complexity.ContainerVendorSocialMediaLinks.URL == nil {
			break
		}

		return e.complexity.ContainerVendorSocialMediaLinks.URL(childComplexity), true

	case "Descriptions.long":
		if e.complexity.Descriptions.Long == nil {
			break
		}

		return e.complexity.Descriptions.Long(childComplexity), true

	case "Descriptions.short":
		if e.complexity.Descriptions.Short == nil {
			break
		}

		return e.complexity.Descriptions.Short(childComplexity), true

	case "FAQSItems.answer":
		if e.complexity.FAQSItems.Answer == nil {
			break
		}

		return e.complexity.FAQSItems.Answer(childComplexity), true

	case "FAQSItems.question":
		if e.complexity.FAQSItems.Question == nil {
			break
		}

		return e.complexity.FAQSItems.Question(childComplexity), true

	case "FeaturesItems.description":
		if e.complexity.FeaturesItems.Description == nil {
			break
		}

		return e.complexity.FeaturesItems.Description(childComplexity), true

	case "FeaturesItems.title":
		if e.complexity.FeaturesItems.Title == nil {
			break
		}

		return e.complexity.FeaturesItems.Title(childComplexity), true

	case "ForwarderStatus.forwarders":
		if e.complexity.ForwarderStatus.Forwarders == nil {
			break
		}

		return e.complexity.ForwarderStatus.Forwarders(childComplexity), true

	case "ForwarderStatusInfo.status":
		if e.complexity.ForwarderStatusInfo.Status == nil {
			break
		}

		return e.complexity.ForwarderStatusInfo.Status(childComplexity), true

	case "ForwarderStatusResponse.data":
		if e.complexity.ForwarderStatusResponse.Data == nil {
			break
		}

		return e.complexity.ForwarderStatusResponse.Data(childComplexity), true

	case "ForwarderStatusResponse.error":
		if e.complexity.ForwarderStatusResponse.Error == nil {
			break
		}

		return e.complexity.ForwarderStatusResponse.Error(childComplexity), true

	case "Forwarders.fluentd":
		if e.complexity.Forwarders.Fluentd == nil {
			break
		}

		return e.complexity.Forwarders.Fluentd(childComplexity), true

	case "FreshnessGrade.creation_date":
		if e.complexity.FreshnessGrade.CreationDate == nil {
			break
		}

		return e.complexity.FreshnessGrade.CreationDate(childComplexity), true

	case "FreshnessGrade.end_date":
		if e.complexity.FreshnessGrade.EndDate == nil {
			break
		}

		return e.complexity.FreshnessGrade.EndDate(childComplexity), true

	case "FreshnessGrade.grade":
		if e.complexity.FreshnessGrade.Grade == nil {
			break
		}

		return e.complexity.FreshnessGrade.Grade(childComplexity), true

	case "FreshnessGrade.start_date":
		if e.complexity.FreshnessGrade.StartDate == nil {
			break
		}

		return e.complexity.FreshnessGrade.StartDate(childComplexity), true

	case "History.brew_build":
		if e.complexity.History.BrewBuild == nil {
			break
		}

		return e.complexity.History.BrewBuild(childComplexity), true

	case "History.end_date":
		if e.complexity.History.EndDate == nil {
			break
		}

		return e.complexity.History.EndDate(childComplexity), true

	case "History.start_date":
		if e.complexity.History.StartDate == nil {
			break
		}

		return e.complexity.History.StartDate(childComplexity), true

	case "Issue.id":
		if e.complexity.Issue.ID == nil {
			break
		}

		return e.complexity.Issue.ID(childComplexity), true

	case "Issue.issue_tracker":
		if e.complexity.Issue.IssueTracker == nil {
			break
		}

		return e.complexity.Issue.IssueTracker(childComplexity), true

	case "Issue.url":
		if e.complexity.Issue.URL == nil {
			break
		}

		return e.complexity.Issue.URL(childComplexity), true

	case "Label.name":
		if e.complexity.Label.Name == nil {
			break
		}

		return e.complexity.Label.Name(childComplexity), true

	case "Label.value":
		if e.complexity.Label.Value == nil {
			break
		}

		return e.complexity.Label.Value(childComplexity), true

	case "Legal.description":
		if e.complexity.Legal.Description == nil {
			break
		}

		return e.complexity.Legal.Description(childComplexity), true

	case "Legal.license_agreement_url":
		if e.complexity.Legal.LicenseAgreementURL == nil {
			break
		}

		return e.complexity.Legal.LicenseAgreementURL(childComplexity), true

	case "Legal.privacy_policy_url":
		if e.complexity.Legal.PrivacyPolicyURL == nil {
			break
		}

		return e.complexity.Legal.PrivacyPolicyURL(childComplexity), true

	case "LinkedResourcesItems.category":
		if e.complexity.LinkedResourcesItems.Category == nil {
			break
		}

		return e.complexity.LinkedResourcesItems.Category(childComplexity), true

	case "LinkedResourcesItems.description":
		if e.complexity.LinkedResourcesItems.Description == nil {
			break
		}

		return e.complexity.LinkedResourcesItems.Description(childComplexity), true

	case "LinkedResourcesItems.thumbnail_url":
		if e.complexity.LinkedResourcesItems.ThumbnailURL == nil {
			break
		}

		return e.complexity.LinkedResourcesItems.ThumbnailURL(childComplexity), true

	case "LinkedResourcesItems.title":
		if e.complexity.LinkedResourcesItems.Title == nil {
			break
		}

		return e.complexity.LinkedResourcesItems.Title(childComplexity), true

	case "LinkedResourcesItems.type":
		if e.complexity.LinkedResourcesItems.Type == nil {
			break
		}

		return e.complexity.LinkedResourcesItems.Type(childComplexity), true

	case "LinkedResourcesItems.url":
		if e.complexity.LinkedResourcesItems.URL == nil {
			break
		}

		return e.complexity.LinkedResourcesItems.URL(childComplexity), true

	case "Logo.url":
		if e.complexity.Logo.URL == nil {
			break
		}

		return e.complexity.Logo.URL(childComplexity), true

	case "Marketplace.enablement_status":
		if e.complexity.Marketplace.EnablementStatus == nil {
			break
		}

		return e.complexity.Marketplace.EnablementStatus(childComplexity), true

	case "Marketplace.enablement_url":
		if e.complexity.Marketplace.EnablementURL == nil {
			break
		}

		return e.complexity.Marketplace.EnablementURL(childComplexity), true

	case "Marketplace.listing_url":
		if e.complexity.Marketplace.ListingURL == nil {
			break
		}

		return e.complexity.Marketplace.ListingURL(childComplexity), true

	case "Marketplace.published":
		if e.complexity.Marketplace.Published == nil {
			break
		}

		return e.complexity.Marketplace.Published(childComplexity), true

	case "Mutation.create_api_key":
		if e.complexity.Mutation.CreateAPIKey == nil {
			break
		}

		args, err := ec.field_Mutation_create_api_key_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAPIKey(childComplexity, args["input"].(*model.APIKeyInput)), true

	case "Mutation.create_certification_project":
		if e.complexity.Mutation.CreateCertificationProject == nil {
			break
		}

		args, err := ec.field_Mutation_create_certification_project_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCertificationProject(childComplexity, args["input"].(*model.CertificationProjectInput)), true

	case "Mutation.create_certification_project_artifact":
		if e.complexity.Mutation.CreateCertificationProjectArtifact == nil {
			break
		}

		args, err := ec.field_Mutation_create_certification_project_artifact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCertificationProjectArtifact(childComplexity, args["id"].(*string), args["input"].(*model.CertProjectTestResultInput)), true

	case "Mutation.create_certification_project_build_request":
		if e.complexity.Mutation.CreateCertificationProjectBuildRequest == nil {
			break
		}

		args, err := ec.field_Mutation_create_certification_project_build_request_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCertificationProjectBuildRequest(childComplexity, args["id"].(*string), args["input"].(*model.CertProjectBuildRequestInput)), true

	case "Mutation.create_certification_project_scan_request":
		if e.complexity.Mutation.CreateCertificationProjectScanRequest == nil {
			break
		}

		args, err := ec.field_Mutation_create_certification_project_scan_request_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCertificationProjectScanRequest(childComplexity, args["id"].(*string), args["input"].(*model.CertProjectScanRequestInput)), true

	case "Mutation.create_certification_project_tag_request":
		if e.complexity.Mutation.CreateCertificationProjectTagRequest == nil {
			break
		}

		args, err := ec.field_Mutation_create_certification_project_tag_request_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCertificationProjectTagRequest(childComplexity, args["id"].(*string), args["input"].(*model.CertProjectTagRequestInput)), true

	case "Mutation.create_certification_project_test_result":
		if e.complexity.Mutation.CreateCertificationProjectTestResult == nil {
			break
		}

		args, err := ec.field_Mutation_create_certification_project_test_result_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCertificationProjectTestResult(childComplexity, args["id"].(*string), args["input"].(*model.CertProjectTestResultInput)), true

	case "Mutation.create_image":
		if e.complexity.Mutation.CreateImage == nil {
			break
		}

		args, err := ec.field_Mutation_create_image_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateImage(childComplexity, args["input"].(*model.ContainerImageInput)), true

	case "Mutation.create_image_rpm_manifest":
		if e.complexity.Mutation.CreateImageRpmManifest == nil {
			break
		}

		args, err := ec.field_Mutation_create_image_rpm_manifest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateImageRpmManifest(childComplexity, args["id"].(*string), args["input"].(*model.ContainerImageRPMManifestInput)), true

	case "Mutation.create_product_listing":
		if e.complexity.Mutation.CreateProductListing == nil {
			break
		}

		args, err := ec.field_Mutation_create_product_listing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProductListing(childComplexity, args["input"].(*model.ProductListingInput)), true

	case "Mutation.delete_api_key":
		if e.complexity.Mutation.DeleteAPIKey == nil {
			break
		}

		args, err := ec.field_Mutation_delete_api_key_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAPIKey(childComplexity, args["key_id"].(*int)), true

	case "Mutation.patch_image_by_manifest_digest_registry_and_repository":
		if e.complexity.Mutation.PatchImageByManifestDigestRegistryAndRepository == nil {
			break
		}

		args, err := ec.field_Mutation_patch_image_by_manifest_digest_registry_and_repository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchImageByManifestDigestRegistryAndRepository(childComplexity, args["repository"].(*string), args["registry"].(*string), args["manifest_digest"].(*string), args["input"].(*model.ContainerImageInput)), true

	case "Mutation.put_image_by_manifest_digest_registry_and_repository":
		if e.complexity.Mutation.PutImageByManifestDigestRegistryAndRepository == nil {
			break
		}

		args, err := ec.field_Mutation_put_image_by_manifest_digest_registry_and_repository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PutImageByManifestDigestRegistryAndRepository(childComplexity, args["repository"].(*string), args["registry"].(*string), args["manifest_digest"].(*string), args["input"].(*model.ContainerImageInput)), true

	case "Mutation.replace_certification_project":
		if e.complexity.Mutation.ReplaceCertificationProject == nil {
			break
		}

		args, err := ec.field_Mutation_replace_certification_project_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceCertificationProject(childComplexity, args["id"].(*string), args["input"].(*model.CertificationProjectInput)), true

	case "Mutation.replace_image":
		if e.complexity.Mutation.ReplaceImage == nil {
			break
		}

		args, err := ec.field_Mutation_replace_image_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceImage(childComplexity, args["id"].(*string), args["input"].(*model.ContainerImageInput)), true

	case "Mutation.replace_image_rpm_manifest":
		if e.complexity.Mutation.ReplaceImageRpmManifest == nil {
			break
		}

		args, err := ec.field_Mutation_replace_image_rpm_manifest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceImageRpmManifest(childComplexity, args["id"].(*string), args["input"].(*model.ContainerImageRPMManifestInput)), true

	case "Mutation.replace_product_listing":
		if e.complexity.Mutation.ReplaceProductListing == nil {
			break
		}

		args, err := ec.field_Mutation_replace_product_listing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceProductListing(childComplexity, args["id"].(*string), args["input"].(*model.ProductListingInput)), true

	case "Mutation.update_certification_project":
		if e.complexity.Mutation.UpdateCertificationProject == nil {
			break
		}

		args, err := ec.field_Mutation_update_certification_project_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCertificationProject(childComplexity, args["id"].(*string), args["input"].(*model.CertificationProjectInput)), true

	case "Mutation.update_certification_project_test_result":
		if e.complexity.Mutation.UpdateCertificationProjectTestResult == nil {
			break
		}

		args, err := ec.field_Mutation_update_certification_project_test_result_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCertificationProjectTestResult(childComplexity, args["id"].(*string), args["input"].(*model.CertProjectTestResultInput)), true

	case "Mutation.update_image":
		if e.complexity.Mutation.UpdateImage == nil {
			break
		}

		args, err := ec.field_Mutation_update_image_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImage(childComplexity, args["id"].(*string), args["input"].(*model.ContainerImageInput)), true

	case "Mutation.update_image_rpm_manifest":
		if e.complexity.Mutation.UpdateImageRpmManifest == nil {
			break
		}

		args, err := ec.field_Mutation_update_image_rpm_manifest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImageRpmManifest(childComplexity, args["id"].(*string), args["input"].(*model.ContainerImageRPMManifestInput)), true

	case "Mutation.update_product_listing":
		if e.complexity.Mutation.UpdateProductListing == nil {
			break
		}

		args, err := ec.field_Mutation_update_product_listing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProductListing(childComplexity, args["id"].(*string), args["input"].(*model.ProductListingInput)), true

	case "Mutation.update_vendor":
		if e.complexity.Mutation.UpdateVendor == nil {
			break
		}

		args, err := ec.field_Mutation_update_vendor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVendor(childComplexity, args["id"].(*string), args["input"].(*model.ContainerVendorInput)), true

	case "OperatorBundle.alm_examples":
		if e.complexity.OperatorBundle.AlmExamples == nil {
			break
		}

		return e.complexity.OperatorBundle.AlmExamples(childComplexity), true

	case "OperatorBundle.annotations":
		if e.complexity.OperatorBundle.Annotations == nil {
			break
		}

		return e.complexity.OperatorBundle.Annotations(childComplexity), true

	case "OperatorBundle.architectures":
		if e.complexity.OperatorBundle.Architectures == nil {
			break
		}

		return e.complexity.OperatorBundle.Architectures(childComplexity), true

	case "OperatorBundle.bundle":
		if e.complexity.OperatorBundle.Bundle == nil {
			break
		}

		return e.complexity.OperatorBundle.Bundle(childComplexity), true

	case "OperatorBundle.bundle_path":
		if e.complexity.OperatorBundle.BundlePath == nil {
			break
		}

		return e.complexity.OperatorBundle.BundlePath(childComplexity), true

	case "OperatorBundle.bundle_path_digest":
		if e.complexity.OperatorBundle.BundlePathDigest == nil {
			break
		}

		return e.complexity.OperatorBundle.BundlePathDigest(childComplexity), true

	case "OperatorBundle.csv_description":
		if e.complexity.OperatorBundle.CSVDescription == nil {
			break
		}

		return e.complexity.OperatorBundle.CSVDescription(childComplexity), true

	case "OperatorBundle.csv_display_name":
		if e.complexity.OperatorBundle.CSVDisplayName == nil {
			break
		}

		return e.complexity.OperatorBundle.CSVDisplayName(childComplexity), true

	case "OperatorBundle.csv_metadata_description":
		if e.complexity.OperatorBundle.CSVMetadataDescription == nil {
			break
		}

		return e.complexity.OperatorBundle.CSVMetadataDescription(childComplexity), true

	case "OperatorBundle.csv_name":
		if e.complexity.OperatorBundle.CSVName == nil {
			break
		}

		return e.complexity.OperatorBundle.CSVName(childComplexity), true

	case "OperatorBundle.capabilities":
		if e.complexity.OperatorBundle.Capabilities == nil {
			break
		}

		return e.complexity.OperatorBundle.Capabilities(childComplexity), true

	case "OperatorBundle.channel_name":
		if e.complexity.OperatorBundle.ChannelName == nil {
			break
		}

		return e.complexity.OperatorBundle.ChannelName(childComplexity), true

	case "OperatorBundle.creation_date":
		if e.complexity.OperatorBundle.CreationDate == nil {
			break
		}

		return e.complexity.OperatorBundle.CreationDate(childComplexity), true

	case "OperatorBundle._id":
		if e.complexity.OperatorBundle.ID == nil {
			break
		}

		return e.complexity.OperatorBundle.ID(childComplexity), true

	case "OperatorBundle.in_index_img":
		if e.complexity.OperatorBundle.InIndexImg == nil {
			break
		}

		return e.complexity.OperatorBundle.InIndexImg(childComplexity), true

	case "OperatorBundle.install_modes":
		if e.complexity.OperatorBundle.InstallModes == nil {
			break
		}

		return e.complexity.OperatorBundle.InstallModes(childComplexity), true

	case "OperatorBundle.is_default_channel":
		if e.complexity.OperatorBundle.IsDefaultChannel == nil {
			break
		}

		return e.complexity.OperatorBundle.IsDefaultChannel(childComplexity), true

	case "OperatorBundle.last_update_date":
		if e.complexity.OperatorBundle.LastUpdateDate == nil {
			break
		}

		return e.complexity.OperatorBundle.LastUpdateDate(childComplexity), true

	case "OperatorBundle.latest_in_channel":
		if e.complexity.OperatorBundle.LatestInChannel == nil {
			break
		}

		return e.complexity.OperatorBundle.LatestInChannel(childComplexity), true

	case "OperatorBundle.ocp_version":
		if e.complexity.OperatorBundle.OcpVersion == nil {
			break
		}

		return e.complexity.OperatorBundle.OcpVersion(childComplexity), true

	case "OperatorBundle.organization":
		if e.complexity.OperatorBundle.Organization == nil {
			break
		}

		return e.complexity.OperatorBundle.Organization(childComplexity), true

	case "OperatorBundle.package":
		if e.complexity.OperatorBundle.Package == nil {
			break
		}

		return e.complexity.OperatorBundle.Package(childComplexity), true

	case "OperatorBundle.provided_apis":
		if e.complexity.OperatorBundle.ProvidedApis == nil {
			break
		}

		return e.complexity.OperatorBundle.ProvidedApis(childComplexity), true

	case "OperatorBundle.related_images":
		if e.complexity.OperatorBundle.RelatedImages == nil {
			break
		}

		return e.complexity.OperatorBundle.RelatedImages(childComplexity), true

	case "OperatorBundle.replaces":
		if e.complexity.OperatorBundle.Replaces == nil {
			break
		}

		return e.complexity.OperatorBundle.Replaces(childComplexity), true

	case "OperatorBundle.skip_range":
		if e.complexity.OperatorBundle.SkipRange == nil {
			break
		}

		return e.complexity.OperatorBundle.SkipRange(childComplexity), true

	case "OperatorBundle.skips":
		if e.complexity.OperatorBundle.Skips == nil {
			break
		}

		return e.complexity.OperatorBundle.Skips(childComplexity), true

	case "OperatorBundle.source_index_container_path":
		if e.complexity.OperatorBundle.SourceIndexContainerPath == nil {
			break
		}

		return e.complexity.OperatorBundle.SourceIndexContainerPath(childComplexity), true

	case "OperatorBundle.version":
		if e.complexity.OperatorBundle.Version == nil {
			break
		}

		return e.complexity.OperatorBundle.Version(childComplexity), true

	case "OperatorBundle.version_original":
		if e.complexity.OperatorBundle.VersionOriginal == nil {
			break
		}

		return e.complexity.OperatorBundle.VersionOriginal(childComplexity), true

	case "OperatorBundleAnnotation.infrastructure_features":
		if e.complexity.OperatorBundleAnnotation.InfrastructureFeatures == nil {
			break
		}

		return e.complexity.OperatorBundleAnnotation.InfrastructureFeatures(childComplexity), true

	case "OperatorBundleAnnotation.valid_subscription":
		if e.complexity.OperatorBundleAnnotation.ValidSubscription == nil {
			break
		}

		return e.complexity.OperatorBundleAnnotation.ValidSubscription(childComplexity), true

	case "OperatorBundleInstallMode.supported":
		if e.complexity.OperatorBundleInstallMode.Supported == nil {
			break
		}

		return e.complexity.OperatorBundleInstallMode.Supported(childComplexity), true

	case "OperatorBundleInstallMode.type":
		if e.complexity.OperatorBundleInstallMode.Type == nil {
			break
		}

		return e.complexity.OperatorBundleInstallMode.Type(childComplexity), true

	case "OperatorBundlePaginatedResponse.data":
		if e.complexity.OperatorBundlePaginatedResponse.Data == nil {
			break
		}

		return e.complexity.OperatorBundlePaginatedResponse.Data(childComplexity), true

	case "OperatorBundlePaginatedResponse.error":
		if e.complexity.OperatorBundlePaginatedResponse.Error == nil {
			break
		}

		return e.complexity.OperatorBundlePaginatedResponse.Error(childComplexity), true

	case "OperatorBundlePaginatedResponse.page":
		if e.complexity.OperatorBundlePaginatedResponse.Page == nil {
			break
		}

		return e.complexity.OperatorBundlePaginatedResponse.Page(childComplexity), true

	case "OperatorBundlePaginatedResponse.page_size":
		if e.complexity.OperatorBundlePaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.OperatorBundlePaginatedResponse.PageSize(childComplexity), true

	case "OperatorBundlePaginatedResponse.total":
		if e.complexity.OperatorBundlePaginatedResponse.Total == nil {
			break
		}

		return e.complexity.OperatorBundlePaginatedResponse.Total(childComplexity), true

	case "OperatorBundlesItems.capabilities":
		if e.complexity.OperatorBundlesItems.Capabilities == nil {
			break
		}

		return e.complexity.OperatorBundlesItems.Capabilities(childComplexity), true

	case "OperatorBundlesItems._id":
		if e.complexity.OperatorBundlesItems.ID == nil {
			break
		}

		return e.complexity.OperatorBundlesItems.ID(childComplexity), true

	case "OperatorBundlesItems.package":
		if e.complexity.OperatorBundlesItems.Package == nil {
			break
		}

		return e.complexity.OperatorBundlesItems.Package(childComplexity), true

	case "OperatorIndex.creation_date":
		if e.complexity.OperatorIndex.CreationDate == nil {
			break
		}

		return e.complexity.OperatorIndex.CreationDate(childComplexity), true

	case "OperatorIndex.end_of_life":
		if e.complexity.OperatorIndex.EndOfLife == nil {
			break
		}

		return e.complexity.OperatorIndex.EndOfLife(childComplexity), true

	case "OperatorIndex._id":
		if e.complexity.OperatorIndex.ID == nil {
			break
		}

		return e.complexity.OperatorIndex.ID(childComplexity), true

	case "OperatorIndex.last_update_date":
		if e.complexity.OperatorIndex.LastUpdateDate == nil {
			break
		}

		return e.complexity.OperatorIndex.LastUpdateDate(childComplexity), true

	case "OperatorIndex.ocp_version":
		if e.complexity.OperatorIndex.OcpVersion == nil {
			break
		}

		return e.complexity.OperatorIndex.OcpVersion(childComplexity), true

	case "OperatorIndex.organization":
		if e.complexity.OperatorIndex.Organization == nil {
			break
		}

		return e.complexity.OperatorIndex.Organization(childComplexity), true

	case "OperatorIndex.path":
		if e.complexity.OperatorIndex.Path == nil {
			break
		}

		return e.complexity.OperatorIndex.Path(childComplexity), true

	case "OperatorIndexPaginatedResponse.data":
		if e.complexity.OperatorIndexPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.OperatorIndexPaginatedResponse.Data(childComplexity), true

	case "OperatorIndexPaginatedResponse.error":
		if e.complexity.OperatorIndexPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.OperatorIndexPaginatedResponse.Error(childComplexity), true

	case "OperatorIndexPaginatedResponse.page":
		if e.complexity.OperatorIndexPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.OperatorIndexPaginatedResponse.Page(childComplexity), true

	case "OperatorIndexPaginatedResponse.page_size":
		if e.complexity.OperatorIndexPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.OperatorIndexPaginatedResponse.PageSize(childComplexity), true

	case "OperatorIndexPaginatedResponse.total":
		if e.complexity.OperatorIndexPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.OperatorIndexPaginatedResponse.Total(childComplexity), true

	case "OperatorIndexResponse.data":
		if e.complexity.OperatorIndexResponse.Data == nil {
			break
		}

		return e.complexity.OperatorIndexResponse.Data(childComplexity), true

	case "OperatorIndexResponse.error":
		if e.complexity.OperatorIndexResponse.Error == nil {
			break
		}

		return e.complexity.OperatorIndexResponse.Error(childComplexity), true

	case "OperatorPackage.association":
		if e.complexity.OperatorPackage.Association == nil {
			break
		}

		return e.complexity.OperatorPackage.Association(childComplexity), true

	case "OperatorPackage.creation_date":
		if e.complexity.OperatorPackage.CreationDate == nil {
			break
		}

		return e.complexity.OperatorPackage.CreationDate(childComplexity), true

	case "OperatorPackage._id":
		if e.complexity.OperatorPackage.ID == nil {
			break
		}

		return e.complexity.OperatorPackage.ID(childComplexity), true

	case "OperatorPackage.last_update_date":
		if e.complexity.OperatorPackage.LastUpdateDate == nil {
			break
		}

		return e.complexity.OperatorPackage.LastUpdateDate(childComplexity), true

	case "OperatorPackage.package_name":
		if e.complexity.OperatorPackage.PackageName == nil {
			break
		}

		return e.complexity.OperatorPackage.PackageName(childComplexity), true

	case "OperatorPackage.source":
		if e.complexity.OperatorPackage.Source == nil {
			break
		}

		return e.complexity.OperatorPackage.Source(childComplexity), true

	case "OperatorPackagePaginatedResponse.data":
		if e.complexity.OperatorPackagePaginatedResponse.Data == nil {
			break
		}

		return e.complexity.OperatorPackagePaginatedResponse.Data(childComplexity), true

	case "OperatorPackagePaginatedResponse.error":
		if e.complexity.OperatorPackagePaginatedResponse.Error == nil {
			break
		}

		return e.complexity.OperatorPackagePaginatedResponse.Error(childComplexity), true

	case "OperatorPackagePaginatedResponse.page":
		if e.complexity.OperatorPackagePaginatedResponse.Page == nil {
			break
		}

		return e.complexity.OperatorPackagePaginatedResponse.Page(childComplexity), true

	case "OperatorPackagePaginatedResponse.page_size":
		if e.complexity.OperatorPackagePaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.OperatorPackagePaginatedResponse.PageSize(childComplexity), true

	case "OperatorPackagePaginatedResponse.total":
		if e.complexity.OperatorPackagePaginatedResponse.Total == nil {
			break
		}

		return e.complexity.OperatorPackagePaginatedResponse.Total(childComplexity), true

	case "OperatorPackageResponse.data":
		if e.complexity.OperatorPackageResponse.Data == nil {
			break
		}

		return e.complexity.OperatorPackageResponse.Data(childComplexity), true

	case "OperatorPackageResponse.error":
		if e.complexity.OperatorPackageResponse.Error == nil {
			break
		}

		return e.complexity.OperatorPackageResponse.Error(childComplexity), true

	case "ParsedData.architecture":
		if e.complexity.ParsedData.Architecture == nil {
			break
		}

		return e.complexity.ParsedData.Architecture(childComplexity), true

	case "ParsedData.author":
		if e.complexity.ParsedData.Author == nil {
			break
		}

		return e.complexity.ParsedData.Author(childComplexity), true

	case "ParsedData.command":
		if e.complexity.ParsedData.Command == nil {
			break
		}

		return e.complexity.ParsedData.Command(childComplexity), true

	case "ParsedData.comment":
		if e.complexity.ParsedData.Comment == nil {
			break
		}

		return e.complexity.ParsedData.Comment(childComplexity), true

	case "ParsedData.container":
		if e.complexity.ParsedData.Container == nil {
			break
		}

		return e.complexity.ParsedData.Container(childComplexity), true

	case "ParsedData.created":
		if e.complexity.ParsedData.Created == nil {
			break
		}

		return e.complexity.ParsedData.Created(childComplexity), true

	case "ParsedData.docker_image_digest":
		if e.complexity.ParsedData.DockerImageDigest == nil {
			break
		}

		return e.complexity.ParsedData.DockerImageDigest(childComplexity), true

	case "ParsedData.docker_image_id":
		if e.complexity.ParsedData.DockerImageID == nil {
			break
		}

		return e.complexity.ParsedData.DockerImageID(childComplexity), true

	case "ParsedData.docker_version":
		if e.complexity.ParsedData.DockerVersion == nil {
			break
		}

		return e.complexity.ParsedData.DockerVersion(childComplexity), true

	case "ParsedData.env_variables":
		if e.complexity.ParsedData.EnvVariables == nil {
			break
		}

		return e.complexity.ParsedData.EnvVariables(childComplexity), true

	case "ParsedData.image_id":
		if e.complexity.ParsedData.ImageID == nil {
			break
		}

		return e.complexity.ParsedData.ImageID(childComplexity), true

	case "ParsedData.labels":
		if e.complexity.ParsedData.Labels == nil {
			break
		}

		return e.complexity.ParsedData.Labels(childComplexity), true

	case "ParsedData.layers":
		if e.complexity.ParsedData.Layers == nil {
			break
		}

		return e.complexity.ParsedData.Layers(childComplexity), true

	case "ParsedData.os":
		if e.complexity.ParsedData.Os == nil {
			break
		}

		return e.complexity.ParsedData.Os(childComplexity), true

	case "ParsedData.ports":
		if e.complexity.ParsedData.Ports == nil {
			break
		}

		return e.complexity.ParsedData.Ports(childComplexity), true

	case "ParsedData.repos":
		if e.complexity.ParsedData.Repos == nil {
			break
		}

		return e.complexity.ParsedData.Repos(childComplexity), true

	case "ParsedData.size":
		if e.complexity.ParsedData.Size == nil {
			break
		}

		return e.complexity.ParsedData.Size(childComplexity), true

	case "ParsedData.uncompressed_layer_sizes":
		if e.complexity.ParsedData.UncompressedLayerSizes == nil {
			break
		}

		return e.complexity.ParsedData.UncompressedLayerSizes(childComplexity), true

	case "ParsedData.uncompressed_size_bytes":
		if e.complexity.ParsedData.UncompressedSizeBytes == nil {
			break
		}

		return e.complexity.ParsedData.UncompressedSizeBytes(childComplexity), true

	case "ParsedData.user":
		if e.complexity.ParsedData.User == nil {
			break
		}

		return e.complexity.ParsedData.User(childComplexity), true

	case "ParsedData.virtual_size":
		if e.complexity.ParsedData.VirtualSize == nil {
			break
		}

		return e.complexity.ParsedData.VirtualSize(childComplexity), true

	case "ParsedDataRepo.baseurl":
		if e.complexity.ParsedDataRepo.Baseurl == nil {
			break
		}

		return e.complexity.ParsedDataRepo.Baseurl(childComplexity), true

	case "ParsedDataRepo.expire":
		if e.complexity.ParsedDataRepo.Expire == nil {
			break
		}

		return e.complexity.ParsedDataRepo.Expire(childComplexity), true

	case "ParsedDataRepo.filename":
		if e.complexity.ParsedDataRepo.Filename == nil {
			break
		}

		return e.complexity.ParsedDataRepo.Filename(childComplexity), true

	case "ParsedDataRepo.id":
		if e.complexity.ParsedDataRepo.ID == nil {
			break
		}

		return e.complexity.ParsedDataRepo.ID(childComplexity), true

	case "ParsedDataRepo.name":
		if e.complexity.ParsedDataRepo.Name == nil {
			break
		}

		return e.complexity.ParsedDataRepo.Name(childComplexity), true

	case "ParsedDataRepo.pkgs":
		if e.complexity.ParsedDataRepo.Pkgs == nil {
			break
		}

		return e.complexity.ParsedDataRepo.Pkgs(childComplexity), true

	case "ParsedDataRepo.size":
		if e.complexity.ParsedDataRepo.Size == nil {
			break
		}

		return e.complexity.ParsedDataRepo.Size(childComplexity), true

	case "ParsedDataRepo.updated":
		if e.complexity.ParsedDataRepo.Updated == nil {
			break
		}

		return e.complexity.ParsedDataRepo.Updated(childComplexity), true

	case "ProductListing.badges":
		if e.complexity.ProductListing.Badges == nil {
			break
		}

		return e.complexity.ProductListing.Badges(childComplexity), true

	case "ProductListing.category":
		if e.complexity.ProductListing.Category == nil {
			break
		}

		return e.complexity.ProductListing.Category(childComplexity), true

	case "ProductListing.cert_projects":
		if e.complexity.ProductListing.CertProjects == nil {
			break
		}

		return e.complexity.ProductListing.CertProjects(childComplexity), true

	case "ProductListing.contacts":
		if e.complexity.ProductListing.Contacts == nil {
			break
		}

		return e.complexity.ProductListing.Contacts(childComplexity), true

	case "ProductListing.creation_date":
		if e.complexity.ProductListing.CreationDate == nil {
			break
		}

		return e.complexity.ProductListing.CreationDate(childComplexity), true

	case "ProductListing.deleted":
		if e.complexity.ProductListing.Deleted == nil {
			break
		}

		return e.complexity.ProductListing.Deleted(childComplexity), true

	case "ProductListing.descriptions":
		if e.complexity.ProductListing.Descriptions == nil {
			break
		}

		return e.complexity.ProductListing.Descriptions(childComplexity), true

	case "ProductListing.drupal_company_id":
		if e.complexity.ProductListing.DrupalCompanyID == nil {
			break
		}

		return e.complexity.ProductListing.DrupalCompanyID(childComplexity), true

	case "ProductListing.edges":
		if e.complexity.ProductListing.Edges == nil {
			break
		}

		return e.complexity.ProductListing.Edges(childComplexity), true

	case "ProductListing.faqs":
		if e.complexity.ProductListing.Faqs == nil {
			break
		}

		return e.complexity.ProductListing.Faqs(childComplexity), true

	case "ProductListing.features":
		if e.complexity.ProductListing.Features == nil {
			break
		}

		return e.complexity.ProductListing.Features(childComplexity), true

	case "ProductListing.functional_categories":
		if e.complexity.ProductListing.FunctionalCategories == nil {
			break
		}

		return e.complexity.ProductListing.FunctionalCategories(childComplexity), true

	case "ProductListing._id":
		if e.complexity.ProductListing.ID == nil {
			break
		}

		return e.complexity.ProductListing.ID(childComplexity), true

	case "ProductListing.last_update_date":
		if e.complexity.ProductListing.LastUpdateDate == nil {
			break
		}

		return e.complexity.ProductListing.LastUpdateDate(childComplexity), true

	case "ProductListing.legal":
		if e.complexity.ProductListing.Legal == nil {
			break
		}

		return e.complexity.ProductListing.Legal(childComplexity), true

	case "ProductListing.linked_resources":
		if e.complexity.ProductListing.LinkedResources == nil {
			break
		}

		return e.complexity.ProductListing.LinkedResources(childComplexity), true

	case "ProductListing.logo":
		if e.complexity.ProductListing.Logo == nil {
			break
		}

		return e.complexity.ProductListing.Logo(childComplexity), true

	case "ProductListing.marketplace":
		if e.complexity.ProductListing.Marketplace == nil {
			break
		}

		return e.complexity.ProductListing.Marketplace(childComplexity), true

	case "ProductListing.name":
		if e.complexity.ProductListing.Name == nil {
			break
		}

		return e.complexity.ProductListing.Name(childComplexity), true

	case "ProductListing.operator_bundles":
		if e.complexity.ProductListing.OperatorBundles == nil {
			break
		}

		return e.complexity.ProductListing.OperatorBundles(childComplexity), true

	case "ProductListing.org_id":
		if e.complexity.ProductListing.OrgID == nil {
			break
		}

		return e.complexity.ProductListing.OrgID(childComplexity), true

	case "ProductListing.published":
		if e.complexity.ProductListing.Published == nil {
			break
		}

		return e.complexity.ProductListing.Published(childComplexity), true

	case "ProductListing.quick_start_configuration":
		if e.complexity.ProductListing.QuickStartConfiguration == nil {
			break
		}

		return e.complexity.ProductListing.QuickStartConfiguration(childComplexity), true

	case "ProductListing.repositories":
		if e.complexity.ProductListing.Repositories == nil {
			break
		}

		return e.complexity.ProductListing.Repositories(childComplexity), true

	case "ProductListing.search_aliases":
		if e.complexity.ProductListing.SearchAliases == nil {
			break
		}

		return e.complexity.ProductListing.SearchAliases(childComplexity), true

	case "ProductListing.support":
		if e.complexity.ProductListing.Support == nil {
			break
		}

		return e.complexity.ProductListing.Support(childComplexity), true

	case "ProductListing.type":
		if e.complexity.ProductListing.Type == nil {
			break
		}

		return e.complexity.ProductListing.Type(childComplexity), true

	case "ProductListing.vendor_label":
		if e.complexity.ProductListing.VendorLabel == nil {
			break
		}

		return e.complexity.ProductListing.VendorLabel(childComplexity), true

	case "ProductListingEdges.vendor":
		if e.complexity.ProductListingEdges.Vendor == nil {
			break
		}

		return e.complexity.ProductListingEdges.Vendor(childComplexity), true

	case "ProductListingPaginatedResponse.data":
		if e.complexity.ProductListingPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.ProductListingPaginatedResponse.Data(childComplexity), true

	case "ProductListingPaginatedResponse.error":
		if e.complexity.ProductListingPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.ProductListingPaginatedResponse.Error(childComplexity), true

	case "ProductListingPaginatedResponse.page":
		if e.complexity.ProductListingPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.ProductListingPaginatedResponse.Page(childComplexity), true

	case "ProductListingPaginatedResponse.page_size":
		if e.complexity.ProductListingPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.ProductListingPaginatedResponse.PageSize(childComplexity), true

	case "ProductListingPaginatedResponse.total":
		if e.complexity.ProductListingPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.ProductListingPaginatedResponse.Total(childComplexity), true

	case "ProductListingResponse.data":
		if e.complexity.ProductListingResponse.Data == nil {
			break
		}

		return e.complexity.ProductListingResponse.Data(childComplexity), true

	case "ProductListingResponse.error":
		if e.complexity.ProductListingResponse.Error == nil {
			break
		}

		return e.complexity.ProductListingResponse.Error(childComplexity), true

	case "ProvidedAPIsItems.group":
		if e.complexity.ProvidedAPIsItems.Group == nil {
			break
		}

		return e.complexity.ProvidedAPIsItems.Group(childComplexity), true

	case "ProvidedAPIsItems.kind":
		if e.complexity.ProvidedAPIsItems.Kind == nil {
			break
		}

		return e.complexity.ProvidedAPIsItems.Kind(childComplexity), true

	case "ProvidedAPIsItems.plural":
		if e.complexity.ProvidedAPIsItems.Plural == nil {
			break
		}

		return e.complexity.ProvidedAPIsItems.Plural(childComplexity), true

	case "ProvidedAPIsItems.version":
		if e.complexity.ProvidedAPIsItems.Version == nil {
			break
		}

		return e.complexity.ProvidedAPIsItems.Version(childComplexity), true

	case "PullRequest.id":
		if e.complexity.PullRequest.ID == nil {
			break
		}

		return e.complexity.PullRequest.ID(childComplexity), true

	case "PullRequest.status":
		if e.complexity.PullRequest.Status == nil {
			break
		}

		return e.complexity.PullRequest.Status(childComplexity), true

	case "PullRequest.url":
		if e.complexity.PullRequest.URL == nil {
			break
		}

		return e.complexity.PullRequest.URL(childComplexity), true

	case "Query.find_certification_projects_images":
		if e.complexity.Query.FindCertificationProjectsImages == nil {
			break
		}

		args, err := ec.field_Query_find_certification_projects_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindCertificationProjectsImages(childComplexity, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.ContainerImageFilter)), true

	case "Query.find_images":
		if e.complexity.Query.FindImages == nil {
			break
		}

		args, err := ec.field_Query_find_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindImages(childComplexity, args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.ContainerImageFilter)), true

	case "Query.get_cert_project_artifact":
		if e.complexity.Query.GetCertProjectArtifact == nil {
			break
		}

		args, err := ec.field_Query_get_cert_project_artifact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertProjectArtifact(childComplexity, args["id"].(*string)), true

	case "Query.get_cert_project_artifacts":
		if e.complexity.Query.GetCertProjectArtifacts == nil {
			break
		}

		args, err := ec.field_Query_get_cert_project_artifacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertProjectArtifacts(childComplexity, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.CertProjectArtifactFilter)), true

	case "Query.get_cert_project_test_result":
		if e.complexity.Query.GetCertProjectTestResult == nil {
			break
		}

		args, err := ec.field_Query_get_cert_project_test_result_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertProjectTestResult(childComplexity, args["id"].(*string)), true

	case "Query.get_cert_project_test_results":
		if e.complexity.Query.GetCertProjectTestResults == nil {
			break
		}

		args, err := ec.field_Query_get_cert_project_test_results_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertProjectTestResults(childComplexity, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.CertProjectTestResultFilter)), true

	case "Query.get_certification_artifacts_by_image_id":
		if e.complexity.Query.GetCertificationArtifactsByImageID == nil {
			break
		}

		args, err := ec.field_Query_get_certification_artifacts_by_image_id_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertificationArtifactsByImageID(childComplexity, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.CertProjectArtifactFilter)), true

	case "Query.get_certification_project":
		if e.complexity.Query.GetCertificationProject == nil {
			break
		}

		args, err := ec.field_Query_get_certification_project_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertificationProject(childComplexity, args["id"].(*string)), true

	case "Query.get_certification_project_by_pid":
		if e.complexity.Query.GetCertificationProjectByPid == nil {
			break
		}

		args, err := ec.field_Query_get_certification_project_by_pid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertificationProjectByPid(childComplexity, args["pid"].(*string)), true

	case "Query.get_image":
		if e.complexity.Query.GetImage == nil {
			break
		}

		args, err := ec.field_Query_get_image_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetImage(childComplexity, args["id"].(*string)), true

	case "Query.get_image_rpm_manifest":
		if e.complexity.Query.GetImageRpmManifest == nil {
			break
		}

		args, err := ec.field_Query_get_image_rpm_manifest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetImageRpmManifest(childComplexity, args["id"].(*string)), true

	case "Query.get_rpm_manifest":
		if e.complexity.Query.GetRpmManifest == nil {
			break
		}

		args, err := ec.field_Query_get_rpm_manifest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRpmManifest(childComplexity, args["id"].(*string)), true

	case "Query.get_test_results_by_image_id":
		if e.complexity.Query.GetTestResultsByImageID == nil {
			break
		}

		args, err := ec.field_Query_get_test_results_by_image_id_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTestResultsByImageID(childComplexity, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.CertProjectTestResultFilter)), true

	case "QuickStartConfiguration.instructions":
		if e.complexity.QuickStartConfiguration.Instructions == nil {
			break
		}

		return e.complexity.QuickStartConfiguration.Instructions(childComplexity), true

	case "RedHatContainerAdvisory.content_type":
		if e.complexity.RedHatContainerAdvisory.ContentType == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.ContentType(childComplexity), true

	case "RedHatContainerAdvisory.creation_date":
		if e.complexity.RedHatContainerAdvisory.CreationDate == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.CreationDate(childComplexity), true

	case "RedHatContainerAdvisory.cves":
		if e.complexity.RedHatContainerAdvisory.Cves == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.Cves(childComplexity), true

	case "RedHatContainerAdvisory.description":
		if e.complexity.RedHatContainerAdvisory.Description == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.Description(childComplexity), true

	case "RedHatContainerAdvisory._id":
		if e.complexity.RedHatContainerAdvisory.ID == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.ID(childComplexity), true

	case "RedHatContainerAdvisory.issues":
		if e.complexity.RedHatContainerAdvisory.Issues == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.Issues(childComplexity), true

	case "RedHatContainerAdvisory.last_update_date":
		if e.complexity.RedHatContainerAdvisory.LastUpdateDate == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.LastUpdateDate(childComplexity), true

	case "RedHatContainerAdvisory.object_type":
		if e.complexity.RedHatContainerAdvisory.ObjectType == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.ObjectType(childComplexity), true

	case "RedHatContainerAdvisory.severity":
		if e.complexity.RedHatContainerAdvisory.Severity == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.Severity(childComplexity), true

	case "RedHatContainerAdvisory.ship_date":
		if e.complexity.RedHatContainerAdvisory.ShipDate == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.ShipDate(childComplexity), true

	case "RedHatContainerAdvisory.solution":
		if e.complexity.RedHatContainerAdvisory.Solution == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.Solution(childComplexity), true

	case "RedHatContainerAdvisory.synopsis":
		if e.complexity.RedHatContainerAdvisory.Synopsis == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.Synopsis(childComplexity), true

	case "RedHatContainerAdvisory.topic":
		if e.complexity.RedHatContainerAdvisory.Topic == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.Topic(childComplexity), true

	case "RedHatContainerAdvisory.type":
		if e.complexity.RedHatContainerAdvisory.Type == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisory.Type(childComplexity), true

	case "RedHatContainerAdvisoryPaginatedResponse.data":
		if e.complexity.RedHatContainerAdvisoryPaginatedResponse.Data == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisoryPaginatedResponse.Data(childComplexity), true

	case "RedHatContainerAdvisoryPaginatedResponse.error":
		if e.complexity.RedHatContainerAdvisoryPaginatedResponse.Error == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisoryPaginatedResponse.Error(childComplexity), true

	case "RedHatContainerAdvisoryPaginatedResponse.page":
		if e.complexity.RedHatContainerAdvisoryPaginatedResponse.Page == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisoryPaginatedResponse.Page(childComplexity), true

	case "RedHatContainerAdvisoryPaginatedResponse.page_size":
		if e.complexity.RedHatContainerAdvisoryPaginatedResponse.PageSize == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisoryPaginatedResponse.PageSize(childComplexity), true

	case "RedHatContainerAdvisoryPaginatedResponse.total":
		if e.complexity.RedHatContainerAdvisoryPaginatedResponse.Total == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisoryPaginatedResponse.Total(childComplexity), true

	case "RedHatContainerAdvisoryResponse.data":
		if e.complexity.RedHatContainerAdvisoryResponse.Data == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisoryResponse.Data(childComplexity), true

	case "RedHatContainerAdvisoryResponse.error":
		if e.complexity.RedHatContainerAdvisoryResponse.Error == nil {
			break
		}

		return e.complexity.RedHatContainerAdvisoryResponse.Error(childComplexity), true

	case "RelatedImagesItems.digest":
		if e.complexity.RelatedImagesItems.Digest == nil {
			break
		}

		return e.complexity.RelatedImagesItems.Digest(childComplexity), true

	case "RelatedImagesItems.image":
		if e.complexity.RelatedImagesItems.Image == nil {
			break
		}

		return e.complexity.RelatedImagesItems.Image(childComplexity), true

	case "RelatedImagesItems.name":
		if e.complexity.RelatedImagesItems.Name == nil {
			break
		}

		return e.complexity.RelatedImagesItems.Name(childComplexity), true

	case "RepositoryContentStreamGrades.grade":
		if e.complexity.RepositoryContentStreamGrades.Grade == nil {
			break
		}

		return e.complexity.RepositoryContentStreamGrades.Grade(childComplexity), true

	case "RepositoryContentStreamGrades.tag":
		if e.complexity.RepositoryContentStreamGrades.Tag == nil {
			break
		}

		return e.complexity.RepositoryContentStreamGrades.Tag(childComplexity), true

	case "RepositoryDisplayData.long_description":
		if e.complexity.RepositoryDisplayData.LongDescription == nil {
			break
		}

		return e.complexity.RepositoryDisplayData.LongDescription(childComplexity), true

	case "RepositoryDisplayData.long_description_markdown":
		if e.complexity.RepositoryDisplayData.LongDescriptionMarkdown == nil {
			break
		}

		return e.complexity.RepositoryDisplayData.LongDescriptionMarkdown(childComplexity), true

	case "RepositoryDisplayData.name":
		if e.complexity.RepositoryDisplayData.Name == nil {
			break
		}

		return e.complexity.RepositoryDisplayData.Name(childComplexity), true

	case "RepositoryDisplayData.openshift_tags":
		if e.complexity.RepositoryDisplayData.OpenshiftTags == nil {
			break
		}

		return e.complexity.RepositoryDisplayData.OpenshiftTags(childComplexity), true

	case "RepositoryDisplayData.short_description":
		if e.complexity.RepositoryDisplayData.ShortDescription == nil {
			break
		}

		return e.complexity.RepositoryDisplayData.ShortDescription(childComplexity), true

	case "RepositoryDocumentationLink.title":
		if e.complexity.RepositoryDocumentationLink.Title == nil {
			break
		}

		return e.complexity.RepositoryDocumentationLink.Title(childComplexity), true

	case "RepositoryDocumentationLink.type":
		if e.complexity.RepositoryDocumentationLink.Type == nil {
			break
		}

		return e.complexity.RepositoryDocumentationLink.Type(childComplexity), true

	case "RepositoryDocumentationLink.url":
		if e.complexity.RepositoryDocumentationLink.URL == nil {
			break
		}

		return e.complexity.RepositoryDocumentationLink.URL(childComplexity), true

	case "RepositoryLabelOverride.description":
		if e.complexity.RepositoryLabelOverride.Description == nil {
			break
		}

		return e.complexity.RepositoryLabelOverride.Description(childComplexity), true

	case "RepositoryLabelOverride.io_k8s_displayName":
		if e.complexity.RepositoryLabelOverride.IoK8sDisplayName == nil {
			break
		}

		return e.complexity.RepositoryLabelOverride.IoK8sDisplayName(childComplexity), true

	case "RepositoryLabelOverride.io_openshift_tags":
		if e.complexity.RepositoryLabelOverride.IoOpenshiftTags == nil {
			break
		}

		return e.complexity.RepositoryLabelOverride.IoOpenshiftTags(childComplexity), true

	case "RepositoryLabelOverride.summary":
		if e.complexity.RepositoryLabelOverride.Summary == nil {
			break
		}

		return e.complexity.RepositoryLabelOverride.Summary(childComplexity), true

	case "RepositoryMetrics.last_update_date":
		if e.complexity.RepositoryMetrics.LastUpdateDate == nil {
			break
		}

		return e.complexity.RepositoryMetrics.LastUpdateDate(childComplexity), true

	case "RepositoryMetrics.pulls_in_last_30_days":
		if e.complexity.RepositoryMetrics.PullsInLast30Days == nil {
			break
		}

		return e.complexity.RepositoryMetrics.PullsInLast30Days(childComplexity), true

	case "RepositoryRunsOn.openshift_online":
		if e.complexity.RepositoryRunsOn.OpenshiftOnline == nil {
			break
		}

		return e.complexity.RepositoryRunsOn.OpenshiftOnline(childComplexity), true

	case "ResponseError.detail":
		if e.complexity.ResponseError.Detail == nil {
			break
		}

		return e.complexity.ResponseError.Detail(childComplexity), true

	case "ResponseError.status":
		if e.complexity.ResponseError.Status == nil {
			break
		}

		return e.complexity.ResponseError.Status(childComplexity), true

	case "Results.errors":
		if e.complexity.Results.Errors == nil {
			break
		}

		return e.complexity.Results.Errors(childComplexity), true

	case "Results.failed":
		if e.complexity.Results.Failed == nil {
			break
		}

		return e.complexity.Results.Failed(childComplexity), true

	case "Results.passed":
		if e.complexity.Results.Passed == nil {
			break
		}

		return e.complexity.Results.Passed(childComplexity), true

	case "RpmsItems.architecture":
		if e.complexity.RpmsItems.Architecture == nil {
			break
		}

		return e.complexity.RpmsItems.Architecture(childComplexity), true

	case "RpmsItems.gpg":
		if e.complexity.RpmsItems.Gpg == nil {
			break
		}

		return e.complexity.RpmsItems.Gpg(childComplexity), true

	case "RpmsItems.name":
		if e.complexity.RpmsItems.Name == nil {
			break
		}

		return e.complexity.RpmsItems.Name(childComplexity), true

	case "RpmsItems.nvra":
		if e.complexity.RpmsItems.Nvra == nil {
			break
		}

		return e.complexity.RpmsItems.Nvra(childComplexity), true

	case "RpmsItems.release":
		if e.complexity.RpmsItems.Release == nil {
			break
		}

		return e.complexity.RpmsItems.Release(childComplexity), true

	case "RpmsItems.srpm_name":
		if e.complexity.RpmsItems.SrpmName == nil {
			break
		}

		return e.complexity.RpmsItems.SrpmName(childComplexity), true

	case "RpmsItems.srpm_nevra":
		if e.complexity.RpmsItems.SrpmNevra == nil {
			break
		}

		return e.complexity.RpmsItems.SrpmNevra(childComplexity), true

	case "RpmsItems.summary":
		if e.complexity.RpmsItems.Summary == nil {
			break
		}

		return e.complexity.RpmsItems.Summary(childComplexity), true

	case "RpmsItems.version":
		if e.complexity.RpmsItems.Version == nil {
			break
		}

		return e.complexity.RpmsItems.Version(childComplexity), true

	case "SearchAliasesItems.key":
		if e.complexity.SearchAliasesItems.Key == nil {
			break
		}

		return e.complexity.SearchAliasesItems.Key(childComplexity), true

	case "SearchAliasesItems.value":
		if e.complexity.SearchAliasesItems.Value == nil {
			break
		}

		return e.complexity.SearchAliasesItems.Value(childComplexity), true

	case "SignatureInfo.key_long_id":
		if e.complexity.SignatureInfo.KeyLongID == nil {
			break
		}

		return e.complexity.SignatureInfo.KeyLongID(childComplexity), true

	case "SignatureInfo.tags":
		if e.complexity.SignatureInfo.Tags == nil {
			break
		}

		return e.complexity.SignatureInfo.Tags(childComplexity), true

	case "StringResponse.data":
		if e.complexity.StringResponse.Data == nil {
			break
		}

		return e.complexity.StringResponse.Data(childComplexity), true

	case "StringResponse.error":
		if e.complexity.StringResponse.Error == nil {
			break
		}

		return e.complexity.StringResponse.Error(childComplexity), true

	case "Support.description":
		if e.complexity.Support.Description == nil {
			break
		}

		return e.complexity.Support.Description(childComplexity), true

	case "Support.email_address":
		if e.complexity.Support.EmailAddress == nil {
			break
		}

		return e.complexity.Support.EmailAddress(childComplexity), true

	case "Support.phone_number":
		if e.complexity.Support.PhoneNumber == nil {
			break
		}

		return e.complexity.Support.PhoneNumber(childComplexity), true

	case "Support.url":
		if e.complexity.Support.URL == nil {
			break
		}

		return e.complexity.Support.URL(childComplexity), true

	case "TestLibrary.commit":
		if e.complexity.TestLibrary.Commit == nil {
			break
		}

		return e.complexity.TestLibrary.Commit(childComplexity), true

	case "TestLibrary.name":
		if e.complexity.TestLibrary.Name == nil {
			break
		}

		return e.complexity.TestLibrary.Name(childComplexity), true

	case "TestLibrary.version":
		if e.complexity.TestLibrary.Version == nil {
			break
		}

		return e.complexity.TestLibrary.Version(childComplexity), true

	case "TestResults.check_url":
		if e.complexity.TestResults.CheckURL == nil {
			break
		}

		return e.complexity.TestResults.CheckURL(childComplexity), true

	case "TestResults.description":
		if e.complexity.TestResults.Description == nil {
			break
		}

		return e.complexity.TestResults.Description(childComplexity), true

	case "TestResults.elapsed_time":
		if e.complexity.TestResults.ElapsedTime == nil {
			break
		}

		return e.complexity.TestResults.ElapsedTime(childComplexity), true

	case "TestResults.help":
		if e.complexity.TestResults.Help == nil {
			break
		}

		return e.complexity.TestResults.Help(childComplexity), true

	case "TestResults.knowledgebase_url":
		if e.complexity.TestResults.KnowledgebaseURL == nil {
			break
		}

		return e.complexity.TestResults.KnowledgebaseURL(childComplexity), true

	case "TestResults.name":
		if e.complexity.TestResults.Name == nil {
			break
		}

		return e.complexity.TestResults.Name(childComplexity), true

	case "TestResults.suggestion":
		if e.complexity.TestResults.Suggestion == nil {
			break
		}

		return e.complexity.TestResults.Suggestion(childComplexity), true

	case "TestedOn.name":
		if e.complexity.TestedOn.Name == nil {
			break
		}

		return e.complexity.TestedOn.Name(childComplexity), true

	case "TestedOn.version":
		if e.complexity.TestedOn.Version == nil {
			break
		}

		return e.complexity.TestedOn.Version(childComplexity), true

	case "UncompressedLayerSize.layer_id":
		if e.complexity.UncompressedLayerSize.LayerID == nil {
			break
		}

		return e.complexity.UncompressedLayerSize.LayerID(childComplexity), true

	case "UncompressedLayerSize.size_bytes":
		if e.complexity.UncompressedLayerSize.SizeBytes == nil {
			break
		}

		return e.complexity.UncompressedLayerSize.SizeBytes(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphqls", Input: `type Query {
  # Get container image by ID.
  get_image(id: String): ContainerImageResponse

  # Get container images. Exclude total for improved performance.
  find_images(
    sort_by: [SortBy]
    page: Int = 0
    page_size: Int = 50
    filter: ContainerImageFilter
  ): ContainerImagePaginatedResponse
  # Get a certification project test result
  get_cert_project_test_result(id: String): CertProjectTestResultResponse

  # Get many certification project test results
  get_cert_project_test_results(
    id: String
    sort_by: [SortBy]
    page: Int = 0
    page_size: Int = 50
    filter: CertProjectTestResultFilter
  ): CertProjectTestResultPaginatedResponse

  # Get test results by container image id
  get_test_results_by_image_id(
    id: String
    sort_by: [SortBy]
    page: Int = 0
    page_size: Int = 50
    filter: CertProjectTestResultFilter
  ): CertProjectTestResultPaginatedResponse

  # Get a certification project artifact
  get_cert_project_artifact(id: String): CertProjectArtifactResponse

  # Get a certification project artifacts
  get_cert_project_artifacts(
    id: String
    sort_by: [SortBy]
    page: Int = 0
    page_size: Int = 50
    filter: CertProjectArtifactFilter
  ): CertProjectArtifactPaginatedResponse

  # Get artifacts by container image id
  get_certification_artifacts_by_image_id(
    id: String
    sort_by: [SortBy]
    page: Int = 0
    page_size: Int = 50
    filter: CertProjectArtifactFilter
  ): CertProjectArtifactPaginatedResponse

  # Get an RPM manifest by ID
  get_rpm_manifest(id: String): ContainerImageRPMManifestResponse

  # Get the RPM manifest for an image
  get_image_rpm_manifest(id: String): ContainerImageRPMManifestResponse

  # Get certification project using its ID.
  get_certification_project(id: String): CertificationProjectResponse

  # Get certification project using Red Hat Connect project ID.
  get_certification_project_by_pid(pid: String): CertificationProjectResponse

  # Get images for certification project using its ID.
  find_certification_projects_images(
    id: String
    sort_by: [SortBy]
    page: Int = 0
    page_size: Int = 50
    filter: ContainerImageFilter
  ): ContainerImagePaginatedResponse
}

type StringResponse {
  data: String
  error: ResponseError
}

type ResponseError {
  status: Int
  detail: String
}

type ForwarderStatusResponse {
  data: ForwarderStatus
  error: ResponseError
}

#
type ForwarderStatus {
  forwarders: Forwarders
}

# Object with all log forwarder statuses
type Forwarders {
  fluentd: ForwarderStatusInfo
}

# Splunk forwarder status information
type ForwarderStatusInfo {
  # Forwarder status
  status: Boolean
}

type ContainerImageResponse {
  data: ContainerImage
  error: ResponseError
}

# Metadata about images contained in RedHat and ISV repositories
type ContainerImage {
  # The field contains an architecture for which the container image was built for. Value is used to distinguish between the default x86-64 architecture and other architectures. If the value is not set, the image was built for the x86-64 architecture.
  architecture: String

  # Brew related metadata.
  brew: Brew
  certifications: [Certification]
    @deprecated(
      reason: "The field is no longer supported. Certification test results were moved to test-results endpoint."
    )

  # A list of all content sets (YUM repositories) from where an image RPM content is.
  content_sets: [String]

  # A mapping of applicable advisories to RPM NEVRA. This data is required for scoring.
  cpe_ids: [String]

  # A mapping of applicable advisories for the base_images from the Red Hat repositories.
  cpe_ids_rh_base_images: [String]

  # Docker Image Digest. For Docker 1.10+ this is also known as the 'manifest digest'.
  docker_image_digest: String

  # Docker Image ID. For Docker 1.10+ this is also known as the 'config digest'.
  docker_image_id: String

  # The grade based on applicable updates and time provided by PST CVE engine.
  freshness_grades: [FreshnessGrade]
  object_type: String

  # Data parsed from image metadata.
  # These fields are not computed from any other source.
  parsed_data: ParsedData

  # Published repositories associated with the container image.
  repositories: [ContainerImageRepo]

  # The certification scan status. The field is generated based on certification info and it can't be used in query filter.
  scan_status: String @deprecated(reason: "The field is no longer supported.")

  # Indication if the image was certified.
  certified: Boolean

  # Indicates that an image was removed. Only unpublished images can be removed.
  deleted: Boolean

  # Image manifest digest.
  # Be careful, as this value is not unique among container image entries, as one image can be references several times.
  image_id: String

  # ID of the project in for ISV repositories. The ID can be also used to connect vendor to the image.
  isv_pid: String

  # The total size of the sum of all layers for each image in bytes. This is computed externally and may not match what is reported by the image metadata (see parsed_data.size).
  sum_layer_size_bytes: Int

  # Field for multiarch primary key
  top_layer_id: String

  # Hash (sha256) of the uncompressed top layer for this image (should be same value as - parsed_data.uncompressed_layer_sizes.0.layer_id)
  uncompressed_top_layer_id: String

  # Raw image configuration, such as output from docker inspect.
  raw_config: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: ContainerImageEdges
}

# Brew Build System related metadata.
type Brew {
  # Unique and immutable Brew build ID.
  build: String

  # Timestamp from Brew when the image has been succesfully built.
  completion_date: DateTime

  # Multi-Arch primary key.
  nvra: String

  # A package name in Brew.
  package: String
}

scalar DateTime

#
type Certification {
  assessment: [Assessment]
}

#
type Assessment {
  # Assesment name.
  name: String

  # Indicates if the assessment is required for certification.
  required_for_certification: Boolean

  # Indicates if the assesment was passed, True means yes.
  value: Boolean
}

# Grade based on applicable updates and time provided by PST CVE engine.
type FreshnessGrade {
  # Date after which the grade is no longer valid. See start_date for when the grade was effective. If no value is set, the grade applies forever. This should happen only for a grade of A (no vulnerabilities) or grade F.
  end_date: DateTime

  # The grade.
  grade: String

  # Date when the grade was added by the vulnerability engine.
  creation_date: DateTime

  # Date from which the grade is in effect. The grade is effective until the end_date, if end_date is set.
  start_date: DateTime
}

#
type ParsedData {
  architecture: String
  author: String
  command: String
  comment: String
  container: String

  # The 'created' date reported by image metadata. Stored as String because we do not have control on that format.
  created: String
  docker_image_digest: String
  docker_image_id: String

  # Version of docker reported by 'docker inspect' for this image.
  docker_version: String
  env_variables: [String]
  image_id: String
  labels: [Label]

  # Layer digests from the image.
  layers: [String]
  os: String
  ports: String

  # Repositories defined within an image as reported by yum command.
  repos: [ParsedDataRepo]

  # Size of this image as reported by image metadata.
  size: Int

  # Information about uncompressed layer sizes.
  uncompressed_layer_sizes: [UncompressedLayerSize]

  # Uncompressed images size in bytes (sum of uncompressed layers size).
  uncompressed_size_bytes: Int

  # The user on the images.
  user: String

  # Virtual size of this image as reported by image metadata.
  virtual_size: Int
}

# Image label.
type Label {
  # The name of the label
  name: String

  # Value of the label.
  value: String
}

#
type ParsedDataRepo {
  baseurl: String
  expire: String
  filename: String
  id: String
  name: String
  pkgs: String
  size: String
  updated: String
}

#
type UncompressedLayerSize {
  # The SHA256 layer ID.
  layer_id: String

  # The uncompressed layer size in bytes.
  size_bytes: Int
}

#
type ContainerImageRepo {
  # Store information about image comparison.
  comparison: ContainerImageRepoComparison

  # The _id's of the redHatContainerAdvisory that contains the content advisories.
  content_advisory_ids: [String]

  # The _id of the redHatContainerAdvisory that contains the image advisory.
  image_advisory_id: String

  # Available for multiarch images.
  manifest_list_digest: String

  # Available for single arch images.
  manifest_schema2_digest: String

  # Indicate if the image has been published to the container catalog.
  published: Boolean

  # Date the image was published to the container catalog.
  published_date: DateTime

  # When the image was pushed to this repository. For RH images this is picked from first found of advisory ship_date, brew completion_date, and finally repositories publish_date. For ISV images this TBD but is probably going to be only sourced from publish_date but could come from parsed_data.created.
  push_date: DateTime

  # Hostname of the registry where the repository can be accessed.
  registry: String

  # Repository name.
  repository: String

  # Image signing info.
  signatures: [SignatureInfo]

  # List of container tags assigned to this layer.
  tags: [ContainerImageRepoTag]
  edges: ContainerImageRepoEdges
}

#
type ContainerImageRepoComparison {
  # Mapping of a NVRA to multiple advisories IDs.
  advisory_rpm_mapping: [ContainerImageRepoComparisonMapping]

  # Reason why 'with_nvr' is or is not null.
  reason: String

  # Human readable reason.
  reason_text: String

  # List of rpms grouped by category (new, remove, upgrade, downgrade).
  rpms: ContainerImageRepoComparisonRPMs

  # NVR of image which this image was compared with.
  with_nvr: String
}

#
type ContainerImageRepoComparisonMapping {
  # Content advisory ID.
  advisory_ids: [String]

  # NVRA of the RPM related to advisories.
  nvra: String
}

#
type ContainerImageRepoComparisonRPMs {
  # List of NVRA which were downgraded in this image.
  downgrade: [String]

  # List of NVRA which were added to this image.
  new: [String]

  # List of NVRA which were removed in this image.
  remove: [String]

  # List of NVRA which were upgraded in this image.
  upgrade: [String]
}

#
type SignatureInfo {
  # The long 16-byte gpg key id.
  key_long_id: String

  # List of image tags that are signed with the given key.
  tags: [String]
}

#
type ContainerImageRepoTag {
  added_date: DateTime

  # Available when manifest_schema2_digest is not. All legacy images.
  manifest_schema1_digest: String

  # The name of the tag.
  name: String

  # Date this tag was removed from the image in this repo. If the tag is added back, add a new entry in 'tags' array.
  removed_date: DateTime
  edges: ContainerImageRepoTagEdges
}

type ContainerImageRepoTagEdges {
  tag_history: ContainerTagHistoryResponse
}

type ContainerTagHistoryResponse {
  data: ContainerTagHistory
  error: ResponseError
}

# The tag history stores a list of image that still have or used to have the given tag
type ContainerTagHistory {
  object_type: String

  # Hostname of the registry where the repository can be accessed.
  registry: String

  # Repository name.
  repository: String

  # The image tag name.
  tag: String

  # The tag type i.e. for floating or persistent.
  tag_type: String

  # Array with the tag history information.
  history: [History]

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: ContainerTagHistoryEdges
}

# Array with the tag history information.
type History {
  # Unique immutable build identifier in the brew build system.
  brew_build: String
  end_date: DateTime

  # The date for when the tag for the given docker_image_digest starts.
  start_date: DateTime
}

type ContainerTagHistoryEdges {
  images(
    page_size: Int = 50
    page: Int = 0
    filter: ContainerImageFilter
    sort_by: [SortBy]
  ): ContainerImagePaginatedResponse
}

type ContainerImagePaginatedResponse {
  data: [ContainerImage]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input ContainerImageFilter {
  architecture: StringFilter
  brew: BrewFilter
  certifications_size: ListSizeFilter
  certifications_index: StringIndexFilter
  certifications_elemMatch: CertificationElemMatchFilter
  certifications: CertificationFilter
  content_sets_size: ListSizeFilter
  content_sets_index: StringIndexFilter
  content_sets: StringFilter
  cpe_ids_size: ListSizeFilter
  cpe_ids_index: StringIndexFilter
  cpe_ids: StringFilter
  cpe_ids_rh_base_images_size: ListSizeFilter
  cpe_ids_rh_base_images_index: StringIndexFilter
  cpe_ids_rh_base_images: StringFilter
  docker_image_digest: StringFilter
  docker_image_id: StringFilter
  freshness_grades_size: ListSizeFilter
  freshness_grades_index: StringIndexFilter
  freshness_grades_elemMatch: FreshnessGradeElemMatchFilter
  freshness_grades: FreshnessGradeFilter
  object_type: StringFilter
  parsed_data: ParsedDataFilter
  repositories_size: ListSizeFilter
  repositories_index: StringIndexFilter
  repositories_elemMatch: ContainerImageRepoElemMatchFilter
  repositories: ContainerImageRepoFilter
  scan_status: StringFilter
  certified: BooleanFilter
  deleted: BooleanFilter
  image_id: StringFilter
  isv_pid: StringFilter
  sum_layer_size_bytes: IntFilter
  top_layer_id: StringFilter
  uncompressed_top_layer_id: StringFilter
  raw_config: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerImageFilter]
  or: [ContainerImageFilter]
  nor: [ContainerImageFilter]
  not: ContainerImageFilter
}

input StringFilter {
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  out: [String]
  all: [String]
  iregex: String
  regex: String
  size: Int
}

input BrewFilter {
  build: StringFilter
  completion_date: DateTimeFilter
  nvra: StringFilter
  package: StringFilter
  and: [BrewFilter]
  or: [BrewFilter]
  nor: [BrewFilter]
  not: BrewFilter
}

input DateTimeFilter {
  eq: DateTime
  ne: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
  in: [DateTime]
}

input ListSizeFilter {
  eq: Int
}

input StringIndexFilter {
  condition: StringFilter
  index: Int
}

input CertificationElemMatchFilter {
  and: [CertificationFilter]
  or: [CertificationFilter]
  nor: [CertificationFilter]
  not: CertificationFilter
}

input CertificationFilter {
  assessment_size: ListSizeFilter
  assessment_index: StringIndexFilter
  assessment_elemMatch: AssessmentElemMatchFilter
  assessment: AssessmentFilter
  and: [CertificationFilter]
  or: [CertificationFilter]
  nor: [CertificationFilter]
  not: CertificationFilter
}

input AssessmentElemMatchFilter {
  and: [AssessmentFilter]
  or: [AssessmentFilter]
  nor: [AssessmentFilter]
  not: AssessmentFilter
}

input AssessmentFilter {
  name: StringFilter
  required_for_certification: BooleanFilter
  value: BooleanFilter
  and: [AssessmentFilter]
  or: [AssessmentFilter]
  nor: [AssessmentFilter]
  not: AssessmentFilter
}

input BooleanFilter {
  eq: Boolean
  ne: Boolean
}

input FreshnessGradeElemMatchFilter {
  and: [FreshnessGradeFilter]
  or: [FreshnessGradeFilter]
  nor: [FreshnessGradeFilter]
  not: FreshnessGradeFilter
}

input FreshnessGradeFilter {
  end_date: DateTimeFilter
  grade: StringFilter
  creation_date: DateTimeFilter
  start_date: DateTimeFilter
  and: [FreshnessGradeFilter]
  or: [FreshnessGradeFilter]
  nor: [FreshnessGradeFilter]
  not: FreshnessGradeFilter
}

input ParsedDataFilter {
  architecture: StringFilter
  author: StringFilter
  command: StringFilter
  comment: StringFilter
  container: StringFilter
  created: StringFilter
  docker_image_digest: StringFilter
  docker_image_id: StringFilter
  docker_version: StringFilter
  env_variables_size: ListSizeFilter
  env_variables_index: StringIndexFilter
  env_variables: StringFilter
  image_id: StringFilter
  labels_size: ListSizeFilter
  labels_index: StringIndexFilter
  labels_elemMatch: LabelElemMatchFilter
  labels: LabelFilter
  layers_size: ListSizeFilter
  layers_index: StringIndexFilter
  layers: StringFilter
  os: StringFilter
  ports: StringFilter
  repos_size: ListSizeFilter
  repos_index: StringIndexFilter
  repos_elemMatch: ParsedDataRepoElemMatchFilter
  repos: ParsedDataRepoFilter
  size: IntFilter
  uncompressed_layer_sizes_size: ListSizeFilter
  uncompressed_layer_sizes_index: StringIndexFilter
  uncompressed_layer_sizes_elemMatch: UncompressedLayerSizeElemMatchFilter
  uncompressed_layer_sizes: UncompressedLayerSizeFilter
  uncompressed_size_bytes: IntFilter
  user: StringFilter
  virtual_size: IntFilter
  and: [ParsedDataFilter]
  or: [ParsedDataFilter]
  nor: [ParsedDataFilter]
  not: ParsedDataFilter
}

input LabelElemMatchFilter {
  and: [LabelFilter]
  or: [LabelFilter]
  nor: [LabelFilter]
  not: LabelFilter
}

input LabelFilter {
  name: StringFilter
  value: StringFilter
  and: [LabelFilter]
  or: [LabelFilter]
  nor: [LabelFilter]
  not: LabelFilter
}

input ParsedDataRepoElemMatchFilter {
  and: [ParsedDataRepoFilter]
  or: [ParsedDataRepoFilter]
  nor: [ParsedDataRepoFilter]
  not: ParsedDataRepoFilter
}

input ParsedDataRepoFilter {
  baseurl: StringFilter
  expire: StringFilter
  filename: StringFilter
  id: StringFilter
  name: StringFilter
  pkgs: StringFilter
  size: StringFilter
  updated: StringFilter
  and: [ParsedDataRepoFilter]
  or: [ParsedDataRepoFilter]
  nor: [ParsedDataRepoFilter]
  not: ParsedDataRepoFilter
}

input IntFilter {
  eq: Int
  ne: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int]
}

input UncompressedLayerSizeElemMatchFilter {
  and: [UncompressedLayerSizeFilter]
  or: [UncompressedLayerSizeFilter]
  nor: [UncompressedLayerSizeFilter]
  not: UncompressedLayerSizeFilter
}

input UncompressedLayerSizeFilter {
  layer_id: StringFilter
  size_bytes: IntFilter
  and: [UncompressedLayerSizeFilter]
  or: [UncompressedLayerSizeFilter]
  nor: [UncompressedLayerSizeFilter]
  not: UncompressedLayerSizeFilter
}

input ContainerImageRepoElemMatchFilter {
  and: [ContainerImageRepoFilter]
  or: [ContainerImageRepoFilter]
  nor: [ContainerImageRepoFilter]
  not: ContainerImageRepoFilter
}

input ContainerImageRepoFilter {
  comparison: ContainerImageRepoComparisonFilter
  content_advisory_ids_size: ListSizeFilter
  content_advisory_ids_index: StringIndexFilter
  content_advisory_ids: StringFilter
  image_advisory_id: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  published: BooleanFilter
  published_date: DateTimeFilter
  push_date: DateTimeFilter
  registry: StringFilter
  repository: StringFilter
  signatures_size: ListSizeFilter
  signatures_index: StringIndexFilter
  signatures_elemMatch: SignatureInfoElemMatchFilter
  signatures: SignatureInfoFilter
  tags_size: ListSizeFilter
  tags_index: StringIndexFilter
  tags_elemMatch: ContainerImageRepoTagElemMatchFilter
  tags: ContainerImageRepoTagFilter
  and: [ContainerImageRepoFilter]
  or: [ContainerImageRepoFilter]
  nor: [ContainerImageRepoFilter]
  not: ContainerImageRepoFilter
}

input ContainerImageRepoComparisonFilter {
  advisory_rpm_mapping_size: ListSizeFilter
  advisory_rpm_mapping_index: StringIndexFilter
  advisory_rpm_mapping_elemMatch: ContainerImageRepoComparisonMappingElemMatchFilter
  advisory_rpm_mapping: ContainerImageRepoComparisonMappingFilter
  reason: StringFilter
  reason_text: StringFilter
  rpms: ContainerImageRepoComparisonRPMsFilter
  with_nvr: StringFilter
  and: [ContainerImageRepoComparisonFilter]
  or: [ContainerImageRepoComparisonFilter]
  nor: [ContainerImageRepoComparisonFilter]
  not: ContainerImageRepoComparisonFilter
}

input ContainerImageRepoComparisonMappingElemMatchFilter {
  and: [ContainerImageRepoComparisonMappingFilter]
  or: [ContainerImageRepoComparisonMappingFilter]
  nor: [ContainerImageRepoComparisonMappingFilter]
  not: ContainerImageRepoComparisonMappingFilter
}

input ContainerImageRepoComparisonMappingFilter {
  advisory_ids_size: ListSizeFilter
  advisory_ids_index: StringIndexFilter
  advisory_ids: StringFilter
  nvra: StringFilter
  and: [ContainerImageRepoComparisonMappingFilter]
  or: [ContainerImageRepoComparisonMappingFilter]
  nor: [ContainerImageRepoComparisonMappingFilter]
  not: ContainerImageRepoComparisonMappingFilter
}

input ContainerImageRepoComparisonRPMsFilter {
  downgrade_size: ListSizeFilter
  downgrade_index: StringIndexFilter
  downgrade: StringFilter
  new_size: ListSizeFilter
  new_index: StringIndexFilter
  new: StringFilter
  remove_size: ListSizeFilter
  remove_index: StringIndexFilter
  remove: StringFilter
  upgrade_size: ListSizeFilter
  upgrade_index: StringIndexFilter
  upgrade: StringFilter
  and: [ContainerImageRepoComparisonRPMsFilter]
  or: [ContainerImageRepoComparisonRPMsFilter]
  nor: [ContainerImageRepoComparisonRPMsFilter]
  not: ContainerImageRepoComparisonRPMsFilter
}

input SignatureInfoElemMatchFilter {
  and: [SignatureInfoFilter]
  or: [SignatureInfoFilter]
  nor: [SignatureInfoFilter]
  not: SignatureInfoFilter
}

input SignatureInfoFilter {
  key_long_id: StringFilter
  tags_size: ListSizeFilter
  tags_index: StringIndexFilter
  tags: StringFilter
  and: [SignatureInfoFilter]
  or: [SignatureInfoFilter]
  nor: [SignatureInfoFilter]
  not: SignatureInfoFilter
}

input ContainerImageRepoTagElemMatchFilter {
  and: [ContainerImageRepoTagFilter]
  or: [ContainerImageRepoTagFilter]
  nor: [ContainerImageRepoTagFilter]
  not: ContainerImageRepoTagFilter
}

input ContainerImageRepoTagFilter {
  added_date: DateTimeFilter
  manifest_schema1_digest: StringFilter
  name: StringFilter
  removed_date: DateTimeFilter
  and: [ContainerImageRepoTagFilter]
  or: [ContainerImageRepoTagFilter]
  nor: [ContainerImageRepoTagFilter]
  not: ContainerImageRepoTagFilter
}

input SortBy {
  field: String
  order: SortDirectionEnum
}

enum SortDirectionEnum {
  ASC
  DESC
}

type ContainerImageRepoEdges {
  image_advisory: RedHatContainerAdvisoryResponse
  repository: ContainerRepositoryResponse
}

type RedHatContainerAdvisoryResponse {
  data: RedHatContainerAdvisory
  error: ResponseError
}

# Advisory associated with RH container image.
type RedHatContainerAdvisory {
  # MongoDB unique _id
  _id: String

  # The content type of advisory. i.e. for CONTAINER or RPM.
  content_type: String

  # Advisory description.
  description: String
  object_type: String

  # Severity of the advisory.
  severity: String

  # The date the image advisory shipped.
  ship_date: DateTime

  # The solution of the advisory.
  solution: String

  # Short summary of the advisory.
  synopsis: String

  # Topic of the advisory.
  topic: String

  # The type of advisory. i.e. for RHSA:2016-1001 the type is 'RHSA'.
  type: String

  # Array of CVEs fixed by this advisory.
  cves: [CVE]

  # Array of issues fixed by this advisory.
  issues: [Issue]

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

# CVE fixed by an advisory.
type CVE {
  # Unique identifier of the issue in the issue tracking system.
  id: String

  # Publicly accessible URL of the issue information.
  url: String
}

# Issue fixed by an advisory.
type Issue {
  # Unique identifier of the issue in the issue tracking system.
  id: String

  # Hostname of the issue tracking system used.
  issue_tracker: String

  # Publicly accessible URL of the issue information.
  url: String
}

type ContainerRepositoryResponse {
  data: ContainerRepository
  error: ResponseError
}

# Contains metadata associated with Red Hat and ISV repositories
type ContainerRepository {
  # The application categories (types).
  application_categories: [String]

  # Contains unique list of all container architectures for the given repository.
  architectures: [String]

  # Denote which tags to be used for auto-rebuilding processes.
  auto_rebuild_tags: [String]

  # Flag indicating whether the repository is still beta or not.
  beta: Boolean @deprecated(reason: "Deprecated")

  # What build categories does this fall into, such as standalone, s2i builder, etc.
  build_categories: [String]

  # Flag indicating whether the repository has opted-in to auto-release auto-built images.
  can_auto_release_cve_rebuild: Boolean
  cdn_base_url: String

  # To provide customers information which yum repos to enable ability to update the container content.
  content_sets: [String]
    @deprecated(reason: "Use containerImage.content_sets instead.")

  # Capture and provide an inventory of grades corresponding to the tags in the relevant contents stream.
  content_stream_grades: [RepositoryContentStreamGrades]

  # Capture and provide an inventory of tags corresponding to the content streams.
  content_stream_tags: [String]

  # Flag indicating whether the repository is still supported or not.
  deprecated: Boolean @deprecated(reason: "Deprecated")

  # Description of the repository.
  description: String
  display_data: RepositoryDisplayData

  # Links to marketing and doc collateral including categorization (solution brief, white paper, demo video, etc.) supposed to be displayed on the product page (NOT documentation tab on image overview tab).
  documentation_links: [RepositoryDocumentationLink]
  eol_date: DateTime

  # Date until the freshness grades for this repository are unknown.
  freshness_grades_unknown_until_date: DateTime

  # Defines  whether a repository contains multiple image streams.
  includes_multiple_content_streams: Boolean

  # Designates whether a repository is community-supported.
  is_community_supported: Boolean

  # ID of the project in for ISV repositories.
  isv_pid: String

  # Manually overriden label values.  When set, should be taken instead of label set on the image.
  label_override: RepositoryLabelOverride @deprecated(reason: "Deprecated")

  # Set of metrics about the repository.
  metrics: RepositoryMetrics

  # Namespace of the repository.
  namespace: String

  # Repository is intended for non-production use only.
  non_production_only: Boolean
  object_type: String

  # Indicates if images in this repository are allowed to run super-privileged.
  privileged_images_allowed: Boolean

  # ID of the project in PRM. Only for ISV repositories.
  prm_project_id: String

  # Reference to the product for this repository by id.
  product_id: String
    @deprecated(
      reason: "The product data has been replaced by product listings for ISVs. For RH products it will be replaced June 2020."
    )

  # List of unique identifiers for the product listings.
  product_listings: [String]

  # Map repositories to specific product versions.
  product_versions: [String]
  protected_for_pull: Boolean

  # Indicates whether the repository requires subscription or other access restrictions for search.
  protected_for_search: Boolean

  # Indicates that the repository does not have any images in it or has been deleted.
  published: Boolean

  # Hostname of the registry where the repository can be accessed.
  registry: String

  # Consumed by the Registry Proxy so that it can route users to the proper backend registry (e.g. Pulp or Quay).
  registry_target: String

  # The release categories of a repository.
  release_categories: [String]

  # Defines repository to point to in case this one is deprecated.
  replaced_by_repository_name: String

  # Combination of image repository and namespace.
  repository: String

  # Flag indicating whether (false) the repository is published on the legacy registry (registry.access.redhat.com), or (true) can only be published to registry.redhat.io.
  requires_terms: Boolean

  # Describes what the image can be run on.
  runs_on: RepositoryRunsOn

  # Flag indicating whether images associated with this repo are included in workflows where non-binary container images are published alongside their binary counterparts.
  source_container_image_enabled: Boolean

  # The support levels of a repository.
  support_levels: [String]

  # Flag indicating whether the repository is in tech preview or not.
  tech_preview: Boolean @deprecated(reason: "Deprecated")

  # Total size of all images in bytes.
  total_size_bytes: Int

  # Total size of all uncompressed images in bytes.
  total_uncompressed_size_bytes: Int

  # When populated this field will override the content on the 'get this image' tab in red hat container catalog.
  ui_get_this_image_override: String

  # Label of the vendor that owns this repository.
  vendor_label: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: ContainerRepositoryEdges
}

# Content stream grades associated with image tag.
type RepositoryContentStreamGrades {
  # Name of floating tag associated with the image.
  tag: String

  # Current image security grade.
  grade: String
}

# Display data for Catalog.
type RepositoryDisplayData {
  # The long description of the repository.
  long_description: String

  # Markdown for the long description of the repository.
  long_description_markdown: String

  # The repository name.
  name: String

  # The io_openshift_tags.
  openshift_tags: String

  # The short description of the repository.
  short_description: String
}

# Information about documentation link.
type RepositoryDocumentationLink {
  # Title of the link.
  title: String

  # The type of collateral.
  type: String

  # The URL for the documentation.
  url: String
}

# Label override data.
type RepositoryLabelOverride {
  # Override for 'description' label.
  description: String

  # Override for 'io.k8s.display-name' label.
  io_k8s_displayName: String

  # Override for 'io.openshift.tags' label.
  io_openshift_tags: String

  # Override for 'summary' label.
  summary: String
}

# Metrics information.
type RepositoryMetrics {
  # The date and time when these metrics were last updated for the repository.
  last_update_date: DateTime

  # The number of pulls in the last 30 days for the repository.
  pulls_in_last_30_days: Int
}

# Describes what the image can be run on.
type RepositoryRunsOn {
  # Can the image run on openshift_online.
  openshift_online: Boolean
}

type ContainerRepositoryEdges {
  certification_project(
    page_size: Int = 50
    page: Int = 0
    filter: CertificationProjectFilter
    sort_by: [SortBy]
  ): CertificationProjectPaginatedResponse
  images(
    page_size: Int = 50
    page: Int = 0
    filter: ContainerImageFilter
    sort_by: [SortBy]
  ): ContainerImagePaginatedResponse
  product_listings(
    page_size: Int = 50
    page: Int = 0
    filter: ProductListingFilter
    sort_by: [SortBy]
  ): ProductListingPaginatedResponse
  operator_bundles(
    page_size: Int = 50
    page: Int = 0
    filter: OperatorBundleFilter
    sort_by: [SortBy]
  ): OperatorBundlePaginatedResponse
  replaced_by_repository: ContainerRepositoryResponse
  vendor: ContainerVendorResponse
}

type CertificationProjectPaginatedResponse {
  data: [CertificationProject]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# Certification project information.
type CertificationProject {
  # Certification Date.
  certification_date: DateTime

  # Certification Status.
  certification_status: String

  # Certification User.
  certification_user: Int

  # Contacts for certification project.
  contacts: [CertProjectContacts]
  container: CertProjectContainer

  # Configuration specific to Helm Chart projects.
  helm_chart: CertProjectHelmChart
  drupal: CertProjectDrupal @deprecated(reason: "Deprecated.")
  marketplace: CertProjectMarketplace

  # The owner provided name of the certification project.
  name: String

  # Operator Distribution.
  operator_distribution: String

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # Unique identifier for the product listing.
  product_listings: [String]

  # Status of the certification project.
  project_status: String

  # Who published the certification project.
  published_by: String
  redhat: CertProjectRedhat
  self_certification: CertProjectSelfCertification

  # Certification project type.
  type: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: CertificationProjectEdges
}

# Contact info.
type CertProjectContacts {
  email_address: Email
  type: String
}

scalar Email

# Container related information.
type CertProjectContainer {
  # The application categories (types).
  application_categories: [String]

  # Once a container is certified it is automatically published. Auto-publish must be enabled in order to set up automatic rebuilds. Auto-publish must always be enabled when auto-rebuilding is enabled.
  auto_publish: Boolean

  # Auto rebuild enabled.
  auto_rebuild: Boolean

  # Distribution approval obtained.
  distribution_approval: Boolean

  # Distribution method.
  distribution_method: String

  # ID of the project in for ISV repositories.
  isv_pid: String

  # Kubernetes objects for operator registry projects. Value has to be a valid YAML.
  kube_objects: OpenPGPEncrypted

  # Docker config for operator registry projects. Value has to be a valid JSON.
  docker_config_json: OpenPGPEncrypted

  # OS Content Type.
  os_content_type: String

  # Passed RH Cert.
  passed_rhcert: Boolean

  # A container needs to run in a privileged state.
  privileged: Boolean
  published: Boolean
    @deprecated(reason: "The field was replaced by certification_status.")

  # Hostname of the registry where the repository can be accessed.
  # Examples: registry.company.com assumes the default port, 443. registry.company.com:5000 repository path with optional port specified.
  # It is only applicable for projects with an 'external' distribution method.
  registry: String

  # Note: These instructions will be displayed in the Red Hat Container Catalog as is. Please modify the following template as it suits your needs.
  registry_override_instruct: String

  # Release category.
  release_category: String

  # Path to the container repository as found in the registry.
  #
  # Examples:
  # path/to/repository
  # repository
  #
  # This field can only be edited when there are no published containers.
  # It is only applicable for projects with an 'external' distribution method.
  repository: String

  # The repository description is displayed on the container
  # catalog repository overview page.
  repository_description: String

  # This should represent your product (or the component if your product consists of multiple containers)
  # and a major version. For example, you could use names like jboss-server7, or agent5.
  #
  # This value is only editable when there are no published containers in this project.
  # It is only applicable for projects that do not have the 'external' distribution method.
  repository_name: String

  # Service Account Secret.
  service_account_secret: String

  # Short description of the container.
  short_description: String

  # Supported Platforms.
  support_platforms: [String]

  # Container type.
  # Field is required, if project type is 'Container', and the field is immutable for Partners after creation.
  type: String

  # Filename other than the default Dockerfile or a path to a Dockerfile in a subdirectory.
  source_dockerfile: String

  # Force the build to ignore cached layers and rerun all steps of the Dockerfile.
  build_no_cache: Boolean

  # Override default location (root directory) for applications within a subdirectory.
  source_context_dir: String

  # Whether Red Hat will build your container.
  build_service: Boolean

  # The specific Git branch to checkout.
  source_ref: String

  # The URL to the source used for the build.
  # For example: 'https://github.com/openshift/ruby-hello-world
  source_uri: URI

  # Base64 encoded SSH private key in PEM format. Used to pull the source.
  source_ssh_private_key: Base64OpenPGPEncrypted

  # GitHub users authorized to submit a certification pull request.
  github_usernames: [String]
  edges: CertProjectContainerEdges
}

scalar OpenPGPEncrypted

scalar URI

scalar Base64OpenPGPEncrypted

type CertProjectContainerEdges {
  repository: ContainerRepositoryResponse
}

# Helm chart related information.
type CertProjectHelmChart {
  # How your Helm Chart is distributed.
  distribution_method: String

  # The Helm Chart name as it will appear in GitHub.
  chart_name: String

  # URL to the externally distributed Helm Chart repository. This is not used if the chart is distributed via Red Hat.
  repository: URI

  # Instructions for users to access an externally distributed Helm Chart.
  distribution_instructions: String

  # Base64 encoded PGP public key. Used to sign result submissions.
  public_pgp_key: String

  # URL to the user submitted github pull request for this project.
  github_pull_request: URI

  # Short description of the Helm Chart.
  short_description: String

  # Long description of the Helm Chart.
  long_description: String

  # The application categories (types).
  application_categories: [String]

  # GitHub users authorized to submit a certification pull request.
  github_usernames: [String]
}

# Drupal related information.
type CertProjectDrupal {
  # Company node ID from Red Hat Connect.
  company_id: Int

  # Relation ID for certification project.
  relation: Int

  # Zone for certification project.
  zone: String
}

# Marketplace related information.
type CertProjectMarketplace {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

# Red Hat projects related information.
type CertProjectRedhat {
  # Red Hat Product ID.
  product_id: Int

  # Red Hat product name.
  product_name: String

  # Red Hat Product Version.
  product_version: String

  # Red Hat Product Version.
  product_version_id: Int
}

# Red Hat projects related information.
type CertProjectSelfCertification {
  # Application Profiler.
  app_profiler: Boolean

  # Application Runs on App Type.
  app_runs_on_app_type: Boolean

  # Whether the Self Certification Evidence URL requires a customer login.
  auth_login: Boolean

  # Self Certification Evidence URL.
  certification_url: URI

  # Can Commercially Support on App Type.
  comm_support_on_app_type: Boolean

  # Self Certification Requested.
  requested: Boolean

  # TsaNET Member.
  tsanet_member: Boolean
}

type CertificationProjectEdges {
  vendor: ContainerVendorResponse
  build_requests(
    page_size: Int = 50
    page: Int = 0
    filter: CertProjectBuildRequestFilter
    sort_by: [SortBy]
  ): CertProjectBuildRequestPaginatedResponse
  scan_requests(
    page_size: Int = 50
    page: Int = 0
    filter: CertProjectScanRequestFilter
    sort_by: [SortBy]
  ): CertProjectScanRequestPaginatedResponse
  tag_requests(
    page_size: Int = 50
    page: Int = 0
    filter: CertProjectTagRequestFilter
    sort_by: [SortBy]
  ): CertProjectTagRequestPaginatedResponse
}

type ContainerVendorResponse {
  data: ContainerVendor
  error: ResponseError
}

# Stores information about a Vendor
type ContainerVendor {
  # URL to the vendor's main website.
  company_url: URI

  # General contact information for the vendor, to be displayed on the vendor page on RHCC.
  contact: ContainerVendorContact
  description: String

  # Company node ID from Red Hat Connect.
  drupal_company_id: Int

  # The industry / vertical the vendor belongs to.
  industries: [String]
  label: String

  # A flag that determines if vendor label can be changed.
  label_locked: Boolean
  logo_url: URI
  name: String
  object_type: String

  # Indicate that the vendor has been published.
  published: Boolean
  registry_urls: [String]

  # RSS feed for vendor.
  rss_feed_url: URI

  # Token for outbound namespace for pulling published marketplace images.
  service_account_token: String
  social_media_links: [ContainerVendorSocialMediaLinks]

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: ContainerVendorEdges
}

# Contact information
type ContainerVendorContact {
  # General contact email address.
  email: String

  # General contact phone number.
  phone: String
}

# Social media links.
type ContainerVendorSocialMediaLinks {
  # The name of the social media provider.
  name: String

  # The URL to the social media site for the vendor.
  url: URI
}

type ContainerVendorEdges {
  product_listings_org_id(
    page_size: Int = 50
    page: Int = 0
    filter: ProductListingFilter
    sort_by: [SortBy]
  ): ProductListingPaginatedResponse
  product_listings_label(
    page_size: Int = 50
    page: Int = 0
    filter: ProductListingFilter
    sort_by: [SortBy]
  ): ProductListingPaginatedResponse
  repositories(
    page_size: Int = 50
    page: Int = 0
    filter: ContainerRepositoryFilter
    sort_by: [SortBy]
  ): ContainerRepositoryPaginatedResponse
}

type ProductListingPaginatedResponse {
  data: [ProductListing]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# Product listings define a marketing page in the Ecosystem Catalog. It allows you to group repos and showcase what they accomplish together as an application. In the case of operators, your CSV file populates OperatorHub, which can only be viewed in cluster through OpenShift. Your product listing is publicly visible in the Ecosystem Catalog so anyone can know that it is offered.
type ProductListing {
  badges: [BadgesItems] @deprecated(reason: "Deprecated")
  category: String

  # List of unique identifiers for the certification project.
  cert_projects: [String]

  # This field is required when the product listing is published.
  contacts: [ContactsItems]

  # This field is required when the product listing is published.
  descriptions: Descriptions

  # Company node ID from Red Hat Connect. Read only.
  drupal_company_id: Int

  # This field is required when the product listing is published.
  faqs: [FAQSItems]

  # This field is required when the product listing is published.
  features: [FeaturesItems]

  # This field is required when the product listing is published.
  functional_categories: [String]
  legal: Legal

  # This field is required when the product listing is published.
  linked_resources: [LinkedResourcesItems]
  logo: Logo
  marketplace: Marketplace
    @deprecated(reason: "This field has been moved to certProject.")
  name: String
  published: Boolean

  # Flag determining if product listing is considered to be deleted. Product listing can be deleted only if it is not published. Value is set to False by default.
  deleted: Boolean
  quick_start_configuration: QuickStartConfiguration

  # List of unique identifiers for the repository.
  repositories: [String]

  # This field is required when the product listing is published.
  search_aliases: [SearchAliasesItems]
  support: Support
  type: String
  vendor_label: String
  operator_bundles: [OperatorBundlesItems]

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: ProductListingEdges
}

#
type BadgesItems {
  badge: String
  project_id: ObjectID
}

scalar ObjectID

#
type ContactsItems {
  email_address: Email
  type: String
}

# This field is required when the product listing is published.
type Descriptions {
  long: String
  short: String
}

# This field is required when the product listing is published.
type FAQSItems {
  answer: String
  question: String
}

# This field is required when the product listing is published.
type FeaturesItems {
  description: String
  title: String
}

#
type Legal {
  description: String
  license_agreement_url: URI
  privacy_policy_url: URI
}

#
type LinkedResourcesItems {
  category: String
  description: String
  thumbnail_url: URI
  title: String
  type: String
  url: URI
}

#
type Logo {
  url: URI
}

#
type Marketplace {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

#
type QuickStartConfiguration {
  instructions: String
}

#
type SearchAliasesItems {
  key: String
  value: String
}

# This field is required when the product listing is published.
type Support {
  description: String
  email_address: Email
  phone_number: String
  url: URI
}

#
type OperatorBundlesItems {
  # Bundle unique identifier
  _id: ObjectID

  # Bundle package name
  package: String
  capabilities: [String]
}

type ProductListingEdges {
  vendor: ContainerVendorResponse
}

input ProductListingFilter {
  badges_size: ListSizeFilter
  badges_index: StringIndexFilter
  badges_elemMatch: BadgesItemsElemMatchFilter
  badges: BadgesItemsFilter
  category: StringFilter
  cert_projects_size: ListSizeFilter
  cert_projects_index: StringIndexFilter
  cert_projects: StringFilter
  contacts_size: ListSizeFilter
  contacts_index: StringIndexFilter
  contacts_elemMatch: ContactsItemsElemMatchFilter
  contacts: ContactsItemsFilter
  descriptions: DescriptionsFilter
  drupal_company_id: IntFilter
  faqs_size: ListSizeFilter
  faqs_index: StringIndexFilter
  faqs_elemMatch: FAQSItemsElemMatchFilter
  faqs: FAQSItemsFilter
  features_size: ListSizeFilter
  features_index: StringIndexFilter
  features_elemMatch: FeaturesItemsElemMatchFilter
  features: FeaturesItemsFilter
  functional_categories_size: ListSizeFilter
  functional_categories_index: StringIndexFilter
  functional_categories: StringFilter
  legal: LegalFilter
  linked_resources_size: ListSizeFilter
  linked_resources_index: StringIndexFilter
  linked_resources_elemMatch: LinkedResourcesItemsElemMatchFilter
  linked_resources: LinkedResourcesItemsFilter
  logo: LogoFilter
  marketplace: MarketplaceFilter
  name: StringFilter
  published: BooleanFilter
  deleted: BooleanFilter
  quick_start_configuration: QuickStartConfigurationFilter
  repositories_size: ListSizeFilter
  repositories_index: StringIndexFilter
  repositories: StringFilter
  search_aliases_size: ListSizeFilter
  search_aliases_index: StringIndexFilter
  search_aliases_elemMatch: SearchAliasesItemsElemMatchFilter
  search_aliases: SearchAliasesItemsFilter
  support: SupportFilter
  type: StringFilter
  vendor_label: StringFilter
  operator_bundles_size: ListSizeFilter
  operator_bundles_index: StringIndexFilter
  operator_bundles_elemMatch: OperatorBundlesItemsElemMatchFilter
  operator_bundles: OperatorBundlesItemsFilter
  org_id: IntFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ProductListingFilter]
  or: [ProductListingFilter]
  nor: [ProductListingFilter]
  not: ProductListingFilter
}

input BadgesItemsElemMatchFilter {
  and: [BadgesItemsFilter]
  or: [BadgesItemsFilter]
  nor: [BadgesItemsFilter]
  not: BadgesItemsFilter
}

input BadgesItemsFilter {
  badge: StringFilter
  project_id: StringFilter
  and: [BadgesItemsFilter]
  or: [BadgesItemsFilter]
  nor: [BadgesItemsFilter]
  not: BadgesItemsFilter
}

input ContactsItemsElemMatchFilter {
  and: [ContactsItemsFilter]
  or: [ContactsItemsFilter]
  nor: [ContactsItemsFilter]
  not: ContactsItemsFilter
}

input ContactsItemsFilter {
  email_address: EmailFilter
  type: StringFilter
  and: [ContactsItemsFilter]
  or: [ContactsItemsFilter]
  nor: [ContactsItemsFilter]
  not: ContactsItemsFilter
}

input EmailFilter {
  eq: Email
  ne: Email
  le: Email
  lt: Email
  ge: Email
  gt: Email
  in: [Email]
}

input DescriptionsFilter {
  long: StringFilter
  short: StringFilter
  and: [DescriptionsFilter]
  or: [DescriptionsFilter]
  nor: [DescriptionsFilter]
  not: DescriptionsFilter
}

input FAQSItemsElemMatchFilter {
  and: [FAQSItemsFilter]
  or: [FAQSItemsFilter]
  nor: [FAQSItemsFilter]
  not: FAQSItemsFilter
}

input FAQSItemsFilter {
  answer: StringFilter
  question: StringFilter
  and: [FAQSItemsFilter]
  or: [FAQSItemsFilter]
  nor: [FAQSItemsFilter]
  not: FAQSItemsFilter
}

input FeaturesItemsElemMatchFilter {
  and: [FeaturesItemsFilter]
  or: [FeaturesItemsFilter]
  nor: [FeaturesItemsFilter]
  not: FeaturesItemsFilter
}

input FeaturesItemsFilter {
  description: StringFilter
  title: StringFilter
  and: [FeaturesItemsFilter]
  or: [FeaturesItemsFilter]
  nor: [FeaturesItemsFilter]
  not: FeaturesItemsFilter
}

input LegalFilter {
  description: StringFilter
  license_agreement_url: URIFilter
  privacy_policy_url: URIFilter
  and: [LegalFilter]
  or: [LegalFilter]
  nor: [LegalFilter]
  not: LegalFilter
}

input URIFilter {
  eq: URI
  ne: URI
  le: URI
  lt: URI
  ge: URI
  gt: URI
  in: [URI]
}

input LinkedResourcesItemsElemMatchFilter {
  and: [LinkedResourcesItemsFilter]
  or: [LinkedResourcesItemsFilter]
  nor: [LinkedResourcesItemsFilter]
  not: LinkedResourcesItemsFilter
}

input LinkedResourcesItemsFilter {
  category: StringFilter
  description: StringFilter
  thumbnail_url: URIFilter
  title: StringFilter
  type: StringFilter
  url: URIFilter
  and: [LinkedResourcesItemsFilter]
  or: [LinkedResourcesItemsFilter]
  nor: [LinkedResourcesItemsFilter]
  not: LinkedResourcesItemsFilter
}

input LogoFilter {
  url: URIFilter
  and: [LogoFilter]
  or: [LogoFilter]
  nor: [LogoFilter]
  not: LogoFilter
}

input MarketplaceFilter {
  enablement_status: StringFilter
  enablement_url: URIFilter
  listing_url: URIFilter
  published: BooleanFilter
  and: [MarketplaceFilter]
  or: [MarketplaceFilter]
  nor: [MarketplaceFilter]
  not: MarketplaceFilter
}

input QuickStartConfigurationFilter {
  instructions: StringFilter
  and: [QuickStartConfigurationFilter]
  or: [QuickStartConfigurationFilter]
  nor: [QuickStartConfigurationFilter]
  not: QuickStartConfigurationFilter
}

input SearchAliasesItemsElemMatchFilter {
  and: [SearchAliasesItemsFilter]
  or: [SearchAliasesItemsFilter]
  nor: [SearchAliasesItemsFilter]
  not: SearchAliasesItemsFilter
}

input SearchAliasesItemsFilter {
  key: StringFilter
  value: StringFilter
  and: [SearchAliasesItemsFilter]
  or: [SearchAliasesItemsFilter]
  nor: [SearchAliasesItemsFilter]
  not: SearchAliasesItemsFilter
}

input SupportFilter {
  description: StringFilter
  email_address: EmailFilter
  phone_number: StringFilter
  url: URIFilter
  and: [SupportFilter]
  or: [SupportFilter]
  nor: [SupportFilter]
  not: SupportFilter
}

input OperatorBundlesItemsElemMatchFilter {
  and: [OperatorBundlesItemsFilter]
  or: [OperatorBundlesItemsFilter]
  nor: [OperatorBundlesItemsFilter]
  not: OperatorBundlesItemsFilter
}

input OperatorBundlesItemsFilter {
  _id: StringFilter
  package: StringFilter
  capabilities_size: ListSizeFilter
  capabilities_index: StringIndexFilter
  capabilities: StringFilter
  and: [OperatorBundlesItemsFilter]
  or: [OperatorBundlesItemsFilter]
  nor: [OperatorBundlesItemsFilter]
  not: OperatorBundlesItemsFilter
}

type ContainerRepositoryPaginatedResponse {
  data: [ContainerRepository]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input ContainerRepositoryFilter {
  application_categories_size: ListSizeFilter
  application_categories_index: StringIndexFilter
  application_categories: StringFilter
  architectures_size: ListSizeFilter
  architectures_index: StringIndexFilter
  architectures: StringFilter
  auto_rebuild_tags_size: ListSizeFilter
  auto_rebuild_tags_index: StringIndexFilter
  auto_rebuild_tags: StringFilter
  beta: BooleanFilter
  build_categories_size: ListSizeFilter
  build_categories_index: StringIndexFilter
  build_categories: StringFilter
  can_auto_release_cve_rebuild: BooleanFilter
  cdn_base_url: StringFilter
  content_sets_size: ListSizeFilter
  content_sets_index: StringIndexFilter
  content_sets: StringFilter
  content_stream_grades_size: ListSizeFilter
  content_stream_grades_index: StringIndexFilter
  content_stream_grades_elemMatch: RepositoryContentStreamGradesElemMatchFilter
  content_stream_grades: RepositoryContentStreamGradesFilter
  content_stream_tags_size: ListSizeFilter
  content_stream_tags_index: StringIndexFilter
  content_stream_tags: StringFilter
  deprecated: BooleanFilter
  description: StringFilter
  display_data: RepositoryDisplayDataFilter
  documentation_links_size: ListSizeFilter
  documentation_links_index: StringIndexFilter
  documentation_links_elemMatch: RepositoryDocumentationLinkElemMatchFilter
  documentation_links: RepositoryDocumentationLinkFilter
  eol_date: DateTimeFilter
  freshness_grades_unknown_until_date: DateTimeFilter
  includes_multiple_content_streams: BooleanFilter
  is_community_supported: BooleanFilter
  isv_pid: StringFilter
  label_override: RepositoryLabelOverrideFilter
  metrics: RepositoryMetricsFilter
  namespace: StringFilter
  non_production_only: BooleanFilter
  object_type: StringFilter
  privileged_images_allowed: BooleanFilter
  prm_project_id: StringFilter
  product_id: StringFilter
  product_listings_size: ListSizeFilter
  product_listings_index: StringIndexFilter
  product_listings: StringFilter
  product_versions_size: ListSizeFilter
  product_versions_index: StringIndexFilter
  product_versions: StringFilter
  protected_for_pull: BooleanFilter
  protected_for_search: BooleanFilter
  published: BooleanFilter
  registry: StringFilter
  registry_target: StringFilter
  release_categories_size: ListSizeFilter
  release_categories_index: StringIndexFilter
  release_categories: StringFilter
  replaced_by_repository_name: StringFilter
  repository: StringFilter
  requires_terms: BooleanFilter
  runs_on: RepositoryRunsOnFilter
  source_container_image_enabled: BooleanFilter
  support_levels_size: ListSizeFilter
  support_levels_index: StringIndexFilter
  support_levels: StringFilter
  tech_preview: BooleanFilter
  total_size_bytes: IntFilter
  total_uncompressed_size_bytes: IntFilter
  ui_get_this_image_override: StringFilter
  vendor_label: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerRepositoryFilter]
  or: [ContainerRepositoryFilter]
  nor: [ContainerRepositoryFilter]
  not: ContainerRepositoryFilter
}

input RepositoryContentStreamGradesElemMatchFilter {
  and: [RepositoryContentStreamGradesFilter]
  or: [RepositoryContentStreamGradesFilter]
  nor: [RepositoryContentStreamGradesFilter]
  not: RepositoryContentStreamGradesFilter
}

input RepositoryContentStreamGradesFilter {
  tag: StringFilter
  grade: StringFilter
  and: [RepositoryContentStreamGradesFilter]
  or: [RepositoryContentStreamGradesFilter]
  nor: [RepositoryContentStreamGradesFilter]
  not: RepositoryContentStreamGradesFilter
}

input RepositoryDisplayDataFilter {
  long_description: StringFilter
  long_description_markdown: StringFilter
  name: StringFilter
  openshift_tags: StringFilter
  short_description: StringFilter
  and: [RepositoryDisplayDataFilter]
  or: [RepositoryDisplayDataFilter]
  nor: [RepositoryDisplayDataFilter]
  not: RepositoryDisplayDataFilter
}

input RepositoryDocumentationLinkElemMatchFilter {
  and: [RepositoryDocumentationLinkFilter]
  or: [RepositoryDocumentationLinkFilter]
  nor: [RepositoryDocumentationLinkFilter]
  not: RepositoryDocumentationLinkFilter
}

input RepositoryDocumentationLinkFilter {
  title: StringFilter
  type: StringFilter
  url: StringFilter
  and: [RepositoryDocumentationLinkFilter]
  or: [RepositoryDocumentationLinkFilter]
  nor: [RepositoryDocumentationLinkFilter]
  not: RepositoryDocumentationLinkFilter
}

input RepositoryLabelOverrideFilter {
  description: StringFilter
  io_k8s_displayName: StringFilter
  io_openshift_tags: StringFilter
  summary: StringFilter
  and: [RepositoryLabelOverrideFilter]
  or: [RepositoryLabelOverrideFilter]
  nor: [RepositoryLabelOverrideFilter]
  not: RepositoryLabelOverrideFilter
}

input RepositoryMetricsFilter {
  last_update_date: DateTimeFilter
  pulls_in_last_30_days: IntFilter
  and: [RepositoryMetricsFilter]
  or: [RepositoryMetricsFilter]
  nor: [RepositoryMetricsFilter]
  not: RepositoryMetricsFilter
}

input RepositoryRunsOnFilter {
  openshift_online: BooleanFilter
  and: [RepositoryRunsOnFilter]
  or: [RepositoryRunsOnFilter]
  nor: [RepositoryRunsOnFilter]
  not: RepositoryRunsOnFilter
}

type CertProjectBuildRequestPaginatedResponse {
  data: [CertProjectBuildRequest]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# Contain status and related metadata of a certProject build request.
type CertProjectBuildRequest {
  # Unique identifier for the certification project.
  cert_project: ObjectID

  # The request status
  status: String

  # The tag that the container image gets when build is done.
  tag: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # An explanatory message to a request status.
  status_message: String
  edges: CertProjectBuildRequestEdges
}

type CertProjectBuildRequestEdges {
  cert_project: CertificationProjectResponse
  logs: CertProjectBuildLogResponse
}

type CertificationProjectResponse {
  data: CertificationProject
  error: ResponseError
}

type CertProjectBuildLogResponse {
  data: CertProjectBuildLog
  error: ResponseError
}

# Contain a certification project build's logs.
type CertProjectBuildLog {
  # Retrieved log for a certification project build.
  log: String
}

input CertProjectBuildRequestFilter {
  cert_project: StringFilter
  status: StringFilter
  tag: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  status_message: StringFilter
  and: [CertProjectBuildRequestFilter]
  or: [CertProjectBuildRequestFilter]
  nor: [CertProjectBuildRequestFilter]
  not: CertProjectBuildRequestFilter
}

type CertProjectScanRequestPaginatedResponse {
  data: [CertProjectScanRequest]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# Contain status and related metadata of a certProject scan request.
type CertProjectScanRequest {
  # Unique identifier for the certification project.
  cert_project: ObjectID

  # URL pointing to the location of DCI logs.
  external_tests_link: URI

  # Image pull specification in repo@sha256:digest format.
  pull_spec: String

  # Unique identifier of an ISV certification scan
  scan_uuid: String

  # Container image tag associated with the scan request.
  tag: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # The request status
  status: String

  # An explanatory message to a request status.
  status_message: String
  edges: CertProjectScanRequestEdges
}

type CertProjectScanRequestEdges {
  cert_project: CertificationProjectResponse
}

input CertProjectScanRequestFilter {
  cert_project: StringFilter
  external_tests_link: URIFilter
  pull_spec: StringFilter
  scan_uuid: StringFilter
  tag: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  status: StringFilter
  status_message: StringFilter
  and: [CertProjectScanRequestFilter]
  or: [CertProjectScanRequestFilter]
  nor: [CertProjectScanRequestFilter]
  not: CertProjectScanRequestFilter
}

type CertProjectTagRequestPaginatedResponse {
  data: [CertProjectTagRequest]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# Contain status and related metadata of a certProject tag request.
type CertProjectTagRequest {
  # Unique identifier for the certification project.
  cert_project: ObjectID

  # Container image id associated with the tag request.
  image_id: ObjectID

  # Operation performed during the tag request, e.g. publish
  operation: String

  # Container image tag associated with the tag request.
  tag: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # The request status
  status: String

  # An explanatory message to a request status.
  status_message: String
  edges: CertProjectTagRequestEdges
}

type CertProjectTagRequestEdges {
  cert_project: CertificationProjectResponse
  image: ContainerImageResponse
}

input CertProjectTagRequestFilter {
  cert_project: StringFilter
  image_id: StringFilter
  operation: StringFilter
  tag: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  status: StringFilter
  status_message: StringFilter
  and: [CertProjectTagRequestFilter]
  or: [CertProjectTagRequestFilter]
  nor: [CertProjectTagRequestFilter]
  not: CertProjectTagRequestFilter
}

input CertificationProjectFilter {
  certification_date: DateTimeFilter
  certification_status: StringFilter
  certification_user: IntFilter
  contacts_size: ListSizeFilter
  contacts_index: StringIndexFilter
  contacts_elemMatch: CertProjectContactsElemMatchFilter
  contacts: CertProjectContactsFilter
  container: CertProjectContainerFilter
  helm_chart: CertProjectHelmChartFilter
  drupal: CertProjectDrupalFilter
  marketplace: CertProjectMarketplaceFilter
  name: StringFilter
  operator_distribution: StringFilter
  org_id: IntFilter
  product_listings_size: ListSizeFilter
  product_listings_index: StringIndexFilter
  product_listings: StringFilter
  project_status: StringFilter
  published_by: StringFilter
  redhat: CertProjectRedhatFilter
  self_certification: CertProjectSelfCertificationFilter
  type: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [CertificationProjectFilter]
  or: [CertificationProjectFilter]
  nor: [CertificationProjectFilter]
  not: CertificationProjectFilter
}

input CertProjectContactsElemMatchFilter {
  and: [CertProjectContactsFilter]
  or: [CertProjectContactsFilter]
  nor: [CertProjectContactsFilter]
  not: CertProjectContactsFilter
}

input CertProjectContactsFilter {
  email_address: EmailFilter
  type: StringFilter
  and: [CertProjectContactsFilter]
  or: [CertProjectContactsFilter]
  nor: [CertProjectContactsFilter]
  not: CertProjectContactsFilter
}

input CertProjectContainerFilter {
  application_categories_size: ListSizeFilter
  application_categories_index: StringIndexFilter
  application_categories: StringFilter
  auto_publish: BooleanFilter
  auto_rebuild: BooleanFilter
  distribution_approval: BooleanFilter
  distribution_method: StringFilter
  isv_pid: StringFilter
  kube_objects: StringFilter
  docker_config_json: StringFilter
  os_content_type: StringFilter
  passed_rhcert: BooleanFilter
  privileged: BooleanFilter
  published: BooleanFilter
  registry: StringFilter
  registry_override_instruct: StringFilter
  release_category: StringFilter
  repository: StringFilter
  repository_description: StringFilter
  repository_name: StringFilter
  service_account_secret: StringFilter
  short_description: StringFilter
  support_platforms_size: ListSizeFilter
  support_platforms_index: StringIndexFilter
  support_platforms: StringFilter
  type: StringFilter
  source_dockerfile: StringFilter
  build_no_cache: BooleanFilter
  source_context_dir: StringFilter
  build_service: BooleanFilter
  source_ref: StringFilter
  source_uri: URIFilter
  source_ssh_private_key: StringFilter
  github_usernames_size: ListSizeFilter
  github_usernames_index: StringIndexFilter
  github_usernames: StringFilter
  and: [CertProjectContainerFilter]
  or: [CertProjectContainerFilter]
  nor: [CertProjectContainerFilter]
  not: CertProjectContainerFilter
}

input CertProjectHelmChartFilter {
  distribution_method: StringFilter
  chart_name: StringFilter
  repository: URIFilter
  distribution_instructions: StringFilter
  public_pgp_key: StringFilter
  github_pull_request: URIFilter
  short_description: StringFilter
  long_description: StringFilter
  application_categories_size: ListSizeFilter
  application_categories_index: StringIndexFilter
  application_categories: StringFilter
  github_usernames_size: ListSizeFilter
  github_usernames_index: StringIndexFilter
  github_usernames: StringFilter
  and: [CertProjectHelmChartFilter]
  or: [CertProjectHelmChartFilter]
  nor: [CertProjectHelmChartFilter]
  not: CertProjectHelmChartFilter
}

input CertProjectDrupalFilter {
  company_id: IntFilter
  relation: IntFilter
  zone: StringFilter
  and: [CertProjectDrupalFilter]
  or: [CertProjectDrupalFilter]
  nor: [CertProjectDrupalFilter]
  not: CertProjectDrupalFilter
}

input CertProjectMarketplaceFilter {
  enablement_status: StringFilter
  enablement_url: URIFilter
  listing_url: URIFilter
  published: BooleanFilter
  and: [CertProjectMarketplaceFilter]
  or: [CertProjectMarketplaceFilter]
  nor: [CertProjectMarketplaceFilter]
  not: CertProjectMarketplaceFilter
}

input CertProjectRedhatFilter {
  product_id: IntFilter
  product_name: StringFilter
  product_version: StringFilter
  product_version_id: IntFilter
  and: [CertProjectRedhatFilter]
  or: [CertProjectRedhatFilter]
  nor: [CertProjectRedhatFilter]
  not: CertProjectRedhatFilter
}

input CertProjectSelfCertificationFilter {
  app_profiler: BooleanFilter
  app_runs_on_app_type: BooleanFilter
  auth_login: BooleanFilter
  certification_url: URIFilter
  comm_support_on_app_type: BooleanFilter
  requested: BooleanFilter
  tsanet_member: BooleanFilter
  and: [CertProjectSelfCertificationFilter]
  or: [CertProjectSelfCertificationFilter]
  nor: [CertProjectSelfCertificationFilter]
  not: CertProjectSelfCertificationFilter
}

type OperatorBundlePaginatedResponse {
  data: [OperatorBundle]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# An Operator Bundle is a container image that stores the Kubernetes manifests and metadata associated with an operator. A bundle is meant to represent a specific version of an operator.
type OperatorBundle {
  # Specific information from the CSV requested by customer.
  alm_examples: [ALMExample]

  # A subset of the \"metadata.annotations\" object from the CSV. Any annotations that are in the \"operators.openshift.io\" namespace that are strings of JSON will be expanded if it is valid JSON. Namespaces are not preserved due to their usage of special characters and all dashes are converted to underscores for consistency with other fields.
  annotations: OperatorBundleAnnotation

  # List of all supported architectures. An empty list means that architectures are unknown as CSV doesn't include architecture labels.
  architectures: [String]

  # The 'bundle' is the operator representation of a version of operator metadata. There is one bundle per operator/package channel for a particular OpenShift version.
  bundle: String

  # Pullspec of the operator bundle e.g. quay.io/foo/bar@sha256:digest.
  bundle_path: String

  # Digest from the bundle_path.
  bundle_path_digest: String

  # Specific information from the CSV requested by customer.
  capabilities: [String]

  # The channel for which this bundle is being released, e.g. \"amq-streams-1.5.x.
  channel_name: String

  # Full name of the package. Usually consists of package_name.version.
  csv_name: String

  # A public name to identify the Operator.
  csv_display_name: String

  # A thorough description of the Operator’s functionality in form of a markdown blob.
  csv_description: String

  # Short description of the CRD and operator functionality.
  csv_metadata_description: String

  # Indicate if the bundle is in an index image.
  in_index_img: Boolean

  # Specific information from the CSV requested by customer.
  install_modes: [OperatorBundleInstallMode]

  # If true then the channel is the default for this package, false otherwise.
  is_default_channel: Boolean

  # Indicate that the bundle is the latest version of a package in a channel for its associated OCP version (index image).
  latest_in_channel: Boolean

  # Specific OCP version for this bundle, e.g. \"4.5\".
  ocp_version: SemVer

  # Organization as understood by iib, e.g. \"redhat-marketplace\".
  organization: String

  # The name of the operator, e.g. \"amq-streams\".
  package: String

  # Specific information from the CSV requested by customer. Should correspond with values from alm_examples.
  provided_apis: [ProvidedAPIsItems]

  # Specific information from the CSV requested by customer.
  related_images: [RelatedImagesItems]

  # Where this bundle was collected from, e.g. \"quay.io/foo/bar:v4.5\".
  source_index_container_path: String

  # The operator version for this bundle
  version: SemVer

  # Original version of the bundle, used to recognize semver validity.
  version_original: String

  # Name of operator which the bundle replaces.
  replaces: String

  # List of skipped updates. See OLM upgrades documentation for more details.
  skips: [String]

  # String describing skipped versions.
  skip_range: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

# Specific information from the CSV requested by customer.
type ALMExample {
  #
  api_version: String

  #
  kind: String
}

# A subset of the \"metadata.annotations\" object from the CSV. Any annotations that are in the \"operators.openshift.io\" namespace that are strings of JSON will be expanded if it is valid JSON. Namespaces are not preserved due to their usage of special characters and all dashes are converted to underscores for consistency with other fields.
type OperatorBundleAnnotation {
  # The deserialized value of operators.openshift.io/infrastructure-features. This defaults to an empty array.
  infrastructure_features: [String]

  # The deserialized value of operators.openshift.io/valid-subscription. This defaults to an empty array.
  valid_subscription: [String]
}

# Specific information from the CSV requested by customer.
type OperatorBundleInstallMode {
  supported: Boolean
  type: String
}

scalar SemVer

# Specific information from the CSV requested by customer.Should correspond with values from alm_examples.
type ProvidedAPIsItems {
  group: String
  kind: String
  plural: String
  version: String
}

# Specific information from the CSV requested by customer.
type RelatedImagesItems {
  digest: String
  image: String
  name: String
}

input OperatorBundleFilter {
  alm_examples_size: ListSizeFilter
  alm_examples_index: StringIndexFilter
  alm_examples_elemMatch: ALMExampleElemMatchFilter
  alm_examples: ALMExampleFilter
  annotations: OperatorBundleAnnotationFilter
  architectures_size: ListSizeFilter
  architectures_index: StringIndexFilter
  architectures: StringFilter
  bundle: StringFilter
  bundle_path: StringFilter
  bundle_path_digest: StringFilter
  capabilities_size: ListSizeFilter
  capabilities_index: StringIndexFilter
  capabilities: StringFilter
  channel_name: StringFilter
  csv_name: StringFilter
  csv_display_name: StringFilter
  csv_description: StringFilter
  csv_metadata_description: StringFilter
  in_index_img: BooleanFilter
  install_modes_size: ListSizeFilter
  install_modes_index: StringIndexFilter
  install_modes_elemMatch: OperatorBundleInstallModeElemMatchFilter
  install_modes: OperatorBundleInstallModeFilter
  is_default_channel: BooleanFilter
  latest_in_channel: BooleanFilter
  ocp_version: StringFilter
  organization: StringFilter
  package: StringFilter
  provided_apis_size: ListSizeFilter
  provided_apis_index: StringIndexFilter
  provided_apis_elemMatch: ProvidedAPIsItemsElemMatchFilter
  provided_apis: ProvidedAPIsItemsFilter
  related_images_size: ListSizeFilter
  related_images_index: StringIndexFilter
  related_images_elemMatch: RelatedImagesItemsElemMatchFilter
  related_images: RelatedImagesItemsFilter
  source_index_container_path: StringFilter
  version: StringFilter
  version_original: StringFilter
  replaces: StringFilter
  skips_size: ListSizeFilter
  skips_index: StringIndexFilter
  skips: StringFilter
  skip_range: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [OperatorBundleFilter]
  or: [OperatorBundleFilter]
  nor: [OperatorBundleFilter]
  not: OperatorBundleFilter
}

input ALMExampleElemMatchFilter {
  and: [ALMExampleFilter]
  or: [ALMExampleFilter]
  nor: [ALMExampleFilter]
  not: ALMExampleFilter
}

input ALMExampleFilter {
  api_version: StringFilter
  kind: StringFilter
  metadata: StringFilter
  spec: StringFilter
  and: [ALMExampleFilter]
  or: [ALMExampleFilter]
  nor: [ALMExampleFilter]
  not: ALMExampleFilter
}

input OperatorBundleAnnotationFilter {
  infrastructure_features_size: ListSizeFilter
  infrastructure_features_index: StringIndexFilter
  infrastructure_features: StringFilter
  valid_subscription_size: ListSizeFilter
  valid_subscription_index: StringIndexFilter
  valid_subscription: StringFilter
  and: [OperatorBundleAnnotationFilter]
  or: [OperatorBundleAnnotationFilter]
  nor: [OperatorBundleAnnotationFilter]
  not: OperatorBundleAnnotationFilter
}

input OperatorBundleInstallModeElemMatchFilter {
  and: [OperatorBundleInstallModeFilter]
  or: [OperatorBundleInstallModeFilter]
  nor: [OperatorBundleInstallModeFilter]
  not: OperatorBundleInstallModeFilter
}

input OperatorBundleInstallModeFilter {
  supported: BooleanFilter
  type: StringFilter
  and: [OperatorBundleInstallModeFilter]
  or: [OperatorBundleInstallModeFilter]
  nor: [OperatorBundleInstallModeFilter]
  not: OperatorBundleInstallModeFilter
}

input ProvidedAPIsItemsElemMatchFilter {
  and: [ProvidedAPIsItemsFilter]
  or: [ProvidedAPIsItemsFilter]
  nor: [ProvidedAPIsItemsFilter]
  not: ProvidedAPIsItemsFilter
}

input ProvidedAPIsItemsFilter {
  group: StringFilter
  kind: StringFilter
  plural: StringFilter
  version: StringFilter
  and: [ProvidedAPIsItemsFilter]
  or: [ProvidedAPIsItemsFilter]
  nor: [ProvidedAPIsItemsFilter]
  not: ProvidedAPIsItemsFilter
}

input RelatedImagesItemsElemMatchFilter {
  and: [RelatedImagesItemsFilter]
  or: [RelatedImagesItemsFilter]
  nor: [RelatedImagesItemsFilter]
  not: RelatedImagesItemsFilter
}

input RelatedImagesItemsFilter {
  digest: StringFilter
  image: StringFilter
  name: StringFilter
  and: [RelatedImagesItemsFilter]
  or: [RelatedImagesItemsFilter]
  nor: [RelatedImagesItemsFilter]
  not: RelatedImagesItemsFilter
}

type ContainerImageEdges {
  rpm_manifest: ContainerImageRPMManifestResponse
  vulnerabilities(
    page_size: Int = 50
    page: Int = 0
    filter: ContainerImageVulnerabilityFilter
    sort_by: [SortBy]
  ): ContainerImageVulnerabilityPaginatedResponse
  test_results(
    page_size: Int = 50
    page: Int = 0
    filter: CertProjectTestResultFilter
    sort_by: [SortBy]
  ): CertProjectTestResultPaginatedResponse
  artifacts(
    page_size: Int = 50
    page: Int = 0
    filter: CertProjectArtifactFilter
    sort_by: [SortBy]
  ): CertProjectArtifactPaginatedResponse
}

type ContainerImageRPMManifestResponse {
  data: ContainerImageRPMManifest
  error: ResponseError
}

# A containerImageRPMManifest contains all the RPM packages for a given containerImage
type ContainerImageRPMManifest {
  # The foreign key to containerImage._id.
  image_id: ObjectID
  object_type: String

  # Content manifest of this image. RPM content included in the image.
  rpms: [RpmsItems]

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: ContainerImageRPMManifestEdges
}

# RPM content of an image.
type RpmsItems {
  # RPM architecture.
  architecture: String

  # GPG key used to sign the RPM.
  gpg: String

  # RPM name.
  name: String

  # RPM name, version, release, and architecture.
  nvra: String

  # RPM release.
  release: String

  # Source RPM name.
  srpm_name: String

  # Source RPM NEVRA (name, epoch, version, release, architecture).
  srpm_nevra: String

  # RPM summary.
  summary: String

  # RPM version.
  version: String
}

type ContainerImageRPMManifestEdges {
  image: ContainerImageResponse
}

type ContainerImageVulnerabilityPaginatedResponse {
  data: [ContainerImageVulnerability]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# Vulnerability present in the content that is installed in the image.
type ContainerImageVulnerability {
  # Advisory identifier.
  advisory_id: String

  # Advisory type (RHSA, RHBA, ...).
  advisory_type: String

  # ID of the CVE.
  cve_id: String

  #
  object_type: String

  # Array of package information applicable to this CVE.
  packages: [ContainerImageVulnerabilityPackage]

  # Date the CVE was made public.
  public_date: String

  # CVE severity.
  severity: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: ContainerImageVulnerabilityEdges
}

# Package information applicable to this CVE.
type ContainerImageVulnerabilityPackage {
  # The next image that fixes this vulnerability.
  fixed_by_image: ContainerImageVulnerabilityFixedByImage

  # The source RPM that contains the fix.
  srpm_nevra: String

  # RPMs, identified by their RPM NVRA, that are present in the image and vulnerable.
  rpm_nvra: [String]
}

# The image that fixes the vulnerability.
type ContainerImageVulnerabilityFixedByImage {
  # The _id of the image that fixes the vulnerability.
  id: String

  # The data is denormalized to not require lookup in UI.
  #
  # RISK: could get out of sync with real refrenced data.
  repositories: [ContainerImageVulnerabilityFixedByRepository]
  edges: ContainerImageVulnerabilityFixedByImageEdges
}

#
type ContainerImageVulnerabilityFixedByRepository {
  #
  registry: String

  #
  repository: String

  #
  tags: [ContainerImageVulnerabilityTag]
}

#
type ContainerImageVulnerabilityTag {
  #
  name: String
}

type ContainerImageVulnerabilityFixedByImageEdges {
  image: ContainerImageResponse
}

type ContainerImageVulnerabilityEdges {
  advisory: RedHatContainerAdvisoryResponse
}

input ContainerImageVulnerabilityFilter {
  advisory_id: StringFilter
  advisory_type: StringFilter
  cve_id: StringFilter
  object_type: StringFilter
  packages_size: ListSizeFilter
  packages_index: StringIndexFilter
  packages_elemMatch: ContainerImageVulnerabilityPackageElemMatchFilter
  packages: ContainerImageVulnerabilityPackageFilter
  public_date: StringFilter
  severity: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerImageVulnerabilityFilter]
  or: [ContainerImageVulnerabilityFilter]
  nor: [ContainerImageVulnerabilityFilter]
  not: ContainerImageVulnerabilityFilter
}

input ContainerImageVulnerabilityPackageElemMatchFilter {
  and: [ContainerImageVulnerabilityPackageFilter]
  or: [ContainerImageVulnerabilityPackageFilter]
  nor: [ContainerImageVulnerabilityPackageFilter]
  not: ContainerImageVulnerabilityPackageFilter
}

input ContainerImageVulnerabilityPackageFilter {
  fixed_by_image: ContainerImageVulnerabilityFixedByImageFilter
  srpm_nevra: StringFilter
  rpm_nvra_size: ListSizeFilter
  rpm_nvra_index: StringIndexFilter
  rpm_nvra: StringFilter
  and: [ContainerImageVulnerabilityPackageFilter]
  or: [ContainerImageVulnerabilityPackageFilter]
  nor: [ContainerImageVulnerabilityPackageFilter]
  not: ContainerImageVulnerabilityPackageFilter
}

input ContainerImageVulnerabilityFixedByImageFilter {
  id: StringFilter
  repositories_size: ListSizeFilter
  repositories_index: StringIndexFilter
  repositories_elemMatch: ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter
  repositories: ContainerImageVulnerabilityFixedByRepositoryFilter
  and: [ContainerImageVulnerabilityFixedByImageFilter]
  or: [ContainerImageVulnerabilityFixedByImageFilter]
  nor: [ContainerImageVulnerabilityFixedByImageFilter]
  not: ContainerImageVulnerabilityFixedByImageFilter
}

input ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter {
  and: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  or: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  nor: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  not: ContainerImageVulnerabilityFixedByRepositoryFilter
}

input ContainerImageVulnerabilityFixedByRepositoryFilter {
  registry: StringFilter
  repository: StringFilter
  tags_size: ListSizeFilter
  tags_index: StringIndexFilter
  tags_elemMatch: ContainerImageVulnerabilityTagElemMatchFilter
  tags: ContainerImageVulnerabilityTagFilter
  and: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  or: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  nor: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  not: ContainerImageVulnerabilityFixedByRepositoryFilter
}

input ContainerImageVulnerabilityTagElemMatchFilter {
  and: [ContainerImageVulnerabilityTagFilter]
  or: [ContainerImageVulnerabilityTagFilter]
  nor: [ContainerImageVulnerabilityTagFilter]
  not: ContainerImageVulnerabilityTagFilter
}

input ContainerImageVulnerabilityTagFilter {
  name: StringFilter
  and: [ContainerImageVulnerabilityTagFilter]
  or: [ContainerImageVulnerabilityTagFilter]
  nor: [ContainerImageVulnerabilityTagFilter]
  not: ContainerImageVulnerabilityTagFilter
}

type CertProjectTestResultPaginatedResponse {
  data: [CertProjectTestResult]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# Contain certification test results of related certProject
type CertProjectTestResult {
  # Unique identifier for the certification project.
  cert_project: ObjectID

  # Hashed content for the certification project.
  certification_hash: String

  # Image associated with the test result.
  image: String

  # Operator package name associated with the test result.
  operator_package_name: String

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # Whether or not the test has passed overall.
  passed: Boolean

  # Identifier of container image collection.
  image_id: ObjectID

  # The test results stored in lists based on result status.
  results: Results

  # The test library of the test result.
  test_library: TestLibrary

  # Version associated with the content tested.
  version: String

  # Pull request of certification test results
  pull_request: PullRequest

  # A platform where tests were executed.
  tested_on: TestedOn

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: CertProjectTestResultEdges
}

# The test results stored in lists based on result status.
type Results {
  # Test results of cert project certification
  failed: [TestResults]

  # Test results of cert project certification
  errors: [TestResults]

  # Test results of cert project certification
  passed: [TestResults]
}

# The cert project pipeline test result.
type TestResults {
  check_url: URI
  description: String
  elapsed_time: Float
  help: String
  knowledgebase_url: URI
  name: String
  suggestion: String
}

# The test library of the test result.
type TestLibrary {
  commit: String
  name: String
  version: String
}

# Pull request of certification test results.
type PullRequest {
  # Pull request URL
  url: String

  # Pull request identifier
  id: Int

  # Pull request status
  status: String
}

# A platform where tests were executed.
type TestedOn {
  name: String
  version: String
}

type CertProjectTestResultEdges {
  cert_project: CertificationProjectResponse
  container_image: ContainerImageResponse
}

input CertProjectTestResultFilter {
  cert_project: StringFilter
  certification_hash: StringFilter
  image: StringFilter
  operator_package_name: StringFilter
  org_id: IntFilter
  passed: BooleanFilter
  image_id: StringFilter
  results: ResultsFilter
  test_library: TestLibraryFilter
  version: StringFilter
  pull_request: PullRequestFilter
  tested_on: TestedOnFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [CertProjectTestResultFilter]
  or: [CertProjectTestResultFilter]
  nor: [CertProjectTestResultFilter]
  not: CertProjectTestResultFilter
}

input ResultsFilter {
  failed_size: ListSizeFilter
  failed_index: StringIndexFilter
  failed_elemMatch: TestResultsElemMatchFilter
  failed: TestResultsFilter
  errors_size: ListSizeFilter
  errors_index: StringIndexFilter
  errors_elemMatch: TestResultsElemMatchFilter
  errors: TestResultsFilter
  passed_size: ListSizeFilter
  passed_index: StringIndexFilter
  passed_elemMatch: TestResultsElemMatchFilter
  passed: TestResultsFilter
  and: [ResultsFilter]
  or: [ResultsFilter]
  nor: [ResultsFilter]
  not: ResultsFilter
}

input TestResultsElemMatchFilter {
  and: [TestResultsFilter]
  or: [TestResultsFilter]
  nor: [TestResultsFilter]
  not: TestResultsFilter
}

input TestResultsFilter {
  check_url: URIFilter
  description: StringFilter
  elapsed_time: FloatFilter
  help: StringFilter
  knowledgebase_url: URIFilter
  name: StringFilter
  suggestion: StringFilter
  and: [TestResultsFilter]
  or: [TestResultsFilter]
  nor: [TestResultsFilter]
  not: TestResultsFilter
}

input FloatFilter {
  eq: Float
  ne: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float]
}

input TestLibraryFilter {
  commit: StringFilter
  name: StringFilter
  version: StringFilter
  and: [TestLibraryFilter]
  or: [TestLibraryFilter]
  nor: [TestLibraryFilter]
  not: TestLibraryFilter
}

input PullRequestFilter {
  url: StringFilter
  id: IntFilter
  status: StringFilter
  and: [PullRequestFilter]
  or: [PullRequestFilter]
  nor: [PullRequestFilter]
  not: PullRequestFilter
}

input TestedOnFilter {
  name: StringFilter
  version: StringFilter
  and: [TestedOnFilter]
  or: [TestedOnFilter]
  nor: [TestedOnFilter]
  not: TestedOnFilter
}

type CertProjectArtifactPaginatedResponse {
  data: [CertProjectArtifact]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

# Contains the logs from the preflight test results from operator pipelines project
type CertProjectArtifact {
  # Cert Project Identifier.
  cert_project: ObjectID

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # Content version.
  version: String

  # The operator package name of the cert project artifact.
  operator_package_name: String

  # The cert project hashed content.
  certification_hash: String

  # Identifier of container image collection.
  image_id: ObjectID

  # Base64 encoded the cert project artifact content.
  content: String

  # The content type associated with the content type.
  content_type: String

  # The file name associated with the content test results.
  filename: String

  # File size in bytes.
  file_size: Int

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
  edges: CertProjectArtifactEdges
}

type CertProjectArtifactEdges {
  cert_project: CertificationProjectResponse
  container_image: ContainerImageResponse
}

input CertProjectArtifactFilter {
  cert_project: StringFilter
  org_id: IntFilter
  version: StringFilter
  operator_package_name: StringFilter
  certification_hash: StringFilter
  image_id: StringFilter
  content: StringFilter
  content_type: StringFilter
  filename: StringFilter
  file_size: IntFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [CertProjectArtifactFilter]
  or: [CertProjectArtifactFilter]
  nor: [CertProjectArtifactFilter]
  not: CertProjectArtifactFilter
}

type ContainerFilePaginatedResponse {
  data: [ContainerFile]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

#
type ContainerFile {
  filename: String
  content: String
  key: String
}

input ContainerFileFilter {
  filename: StringFilter
  content: StringFilter
  key: StringFilter
  and: [ContainerFileFilter]
  or: [ContainerFileFilter]
  nor: [ContainerFileFilter]
  not: ContainerFileFilter
}

type ContainerTagHistoryPaginatedResponse {
  data: [ContainerTagHistory]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input ContainerTagHistoryFilter {
  object_type: StringFilter
  registry: StringFilter
  repository: StringFilter
  tag: StringFilter
  tag_type: StringFilter
  history_size: ListSizeFilter
  history_index: StringIndexFilter
  history_elemMatch: HistoryElemMatchFilter
  history: HistoryFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [ContainerTagHistoryFilter]
  or: [ContainerTagHistoryFilter]
  nor: [ContainerTagHistoryFilter]
  not: ContainerTagHistoryFilter
}

input HistoryElemMatchFilter {
  and: [HistoryFilter]
  or: [HistoryFilter]
  nor: [HistoryFilter]
  not: HistoryFilter
}

input HistoryFilter {
  brew_build: StringFilter
  end_date: DateTimeFilter
  start_date: DateTimeFilter
  and: [HistoryFilter]
  or: [HistoryFilter]
  nor: [HistoryFilter]
  not: HistoryFilter
}

type CertProjectBuildRequestResponse {
  data: CertProjectBuildRequest
  error: ResponseError
}

type CertProjectScanRequestResponse {
  data: CertProjectScanRequest
  error: ResponseError
}

type CertProjectTagRequestResponse {
  data: CertProjectTagRequest
  error: ResponseError
}

type CertProjectTestResultResponse {
  data: CertProjectTestResult
  error: ResponseError
}

type CertProjectArtifactResponse {
  data: CertProjectArtifact
  error: ResponseError
}

type OperatorPackageResponse {
  data: OperatorPackage
  error: ResponseError
}

#
type OperatorPackage {
  #
  association: String

  #
  package_name: String

  #
  source: String

  # MongoDB unique _id
  _id: ObjectID

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

type OperatorPackagePaginatedResponse {
  data: [OperatorPackage]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input OperatorPackageFilter {
  association: StringFilter
  package_name: StringFilter
  source: StringFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [OperatorPackageFilter]
  or: [OperatorPackageFilter]
  nor: [OperatorPackageFilter]
  not: OperatorPackageFilter
}

type OperatorIndexResponse {
  data: OperatorIndex
  error: ResponseError
}

#
type OperatorIndex {
  # OCP version, e.g. 4.5.
  ocp_version: SemVer

  # Organization, as understood by iib, e.g. redhat-marketplace.
  organization: String

  # The docker path used to pull this index container, e.g. quay.io/foo/bar:v4.5.
  path: String

  # The date till the index image is valid
  end_of_life: DateTime

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

type OperatorIndexPaginatedResponse {
  data: [OperatorIndex]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input OperatorIndexFilter {
  ocp_version: StringFilter
  organization: StringFilter
  path: StringFilter
  end_of_life: DateTimeFilter
  _id: StringFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [OperatorIndexFilter]
  or: [OperatorIndexFilter]
  nor: [OperatorIndexFilter]
  not: OperatorIndexFilter
}

type RedHatContainerAdvisoryPaginatedResponse {
  data: [RedHatContainerAdvisory]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

input RedHatContainerAdvisoryFilter {
  _id: StringFilter
  content_type: StringFilter
  description: StringFilter
  object_type: StringFilter
  severity: StringFilter
  ship_date: DateTimeFilter
  solution: StringFilter
  synopsis: StringFilter
  topic: StringFilter
  type: StringFilter
  cves_size: ListSizeFilter
  cves_index: StringIndexFilter
  cves_elemMatch: CVEElemMatchFilter
  cves: CVEFilter
  issues_size: ListSizeFilter
  issues_index: StringIndexFilter
  issues_elemMatch: IssueElemMatchFilter
  issues: IssueFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  and: [RedHatContainerAdvisoryFilter]
  or: [RedHatContainerAdvisoryFilter]
  nor: [RedHatContainerAdvisoryFilter]
  not: RedHatContainerAdvisoryFilter
}

input CVEElemMatchFilter {
  and: [CVEFilter]
  or: [CVEFilter]
  nor: [CVEFilter]
  not: CVEFilter
}

input CVEFilter {
  id: StringFilter
  url: StringFilter
  and: [CVEFilter]
  or: [CVEFilter]
  nor: [CVEFilter]
  not: CVEFilter
}

input IssueElemMatchFilter {
  and: [IssueFilter]
  or: [IssueFilter]
  nor: [IssueFilter]
  not: IssueFilter
}

input IssueFilter {
  id: StringFilter
  issue_tracker: StringFilter
  url: StringFilter
  and: [IssueFilter]
  or: [IssueFilter]
  nor: [IssueFilter]
  not: IssueFilter
}

type BinarySignatureResponse {
  data: BinarySignature
  error: ResponseError
}

# Object for GraphQL response
type BinarySignature {
  binary_signature: String
}

# Combination of field name and the sorting direction used to sort the responses. If multiple pairs are set, they go from the most important to the least important.
input SortByMembersInput {
  # Name of the field that should be used to sort results. If the field is nested, use dot notation.
  field: String

  # If the fields should be in ascending or descending order.
  order: String
}

type ContainerImageVulnerabilityResponse {
  data: ContainerImageVulnerability
  error: ResponseError
}

type ProductListingResponse {
  data: ProductListing
  error: ResponseError
}

type AnalyticsPageViewsResponse {
  data: AnalyticsPageViews
  error: ResponseError
}

# Page views statistics.
type AnalyticsPageViews {
  # Page view statistics by date.
  by_date: [AnalyticsPageViewsByDate]

  # Total number of page views.
  total_pageviews: Int
}

# Page view statistics by date.
type AnalyticsPageViewsByDate {
  # Date of the page view.
  activity_date: DateTime

  # Number of page views.
  pageviews: Int
}

type AnalyticsPullCountResponse {
  data: AnalyticsPullCount
  error: ResponseError
}

# Pull count statistics.
type AnalyticsPullCount {
  # Pull count statistics by costumer.
  by_customers: [AnalyticsPullCountByCostumer]

  # Pull count statistics by tags.
  by_tags: [AnalyticsPullCountByTag]

  # Total number of distinct customers.
  total_customers: Int

  # Total number of distinct countries customers are from.
  total_countries: Int

  # Total number of image pulls performed.
  total_pulls: Int
}

# Pull count statistics by costumer.
type AnalyticsPullCountByCostumer {
  # Country that the customer is from.
  country: String

  # Name of the customer.
  customer_name: String

  # Date of the image pull.
  download_date: DateTime

  # Number of image pulls associated with the customer.
  pull_count: Int
}

# Pull count statistics by tags.
type AnalyticsPullCountByTag {
  # Date of the image pull.
  download_date: DateTime

  # Tags of the image pulled.
  image_tags: [String]

  # Number of image pulls associated with their tags.
  pull_count: Int
}

type ApiKeyListResponse {
  data: [ApiKey]
  error: ResponseError
}

# API key stored in Loki.
type ApiKey {
  id: Int
  description: String
  company_id: Int
  created: DateTime
  last_used: DateTime
  created_by: String

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int
}

type ContainerGradesListResponse {
  data: [ContainerGrades]
  error: ResponseError
}

# Grades are describing security risk with containers that Red Hat provides through the Red Hat Ecosystem Catalog.
type ContainerGrades {
  # Image architecture.
  architecture: String

  # Current image security grade based on current date and grading schedule.
  current_grade: String

  # the grade based on applicable updates and time provided by PST CVE engine.
  freshness_grades: [FreshnessGrade]

  # Unique identifier for image.
  image_id: String

  # A date when current grade drops.
  next_drop_date: DateTime

  # Name of floating tag associated with the image.
  tag: String
  edges: ContainerGradesEdges
}

type ContainerGradesEdges {
  image: ContainerImageResponse
}

type Mutation {
  # Create image.
  create_image(input: ContainerImageInput): ContainerImageResponse

  # Update/Patch image.
  update_image(id: String, input: ContainerImageInput): ContainerImageResponse

  # Replace image.
  replace_image(id: String, input: ContainerImageInput): ContainerImageResponse

  # Replace container image by manifest digest.
  put_image_by_manifest_digest_registry_and_repository(
    repository: String
    registry: String
    manifest_digest: String
    input: ContainerImageInput
  ): ContainerImageResponse

  # Update container image by manifest digest.
  patch_image_by_manifest_digest_registry_and_repository(
    repository: String
    registry: String
    manifest_digest: String
    input: ContainerImageInput
  ): ContainerImageResponse

  # Update/Patch a RPM manifest by ID.
  update_image_rpm_manifest(
    id: String
    input: ContainerImageRPMManifestInput
  ): ContainerImageRPMManifestResponse

  # Replace a RPM Manifest by ID.
  replace_image_rpm_manifest(
    id: String
    input: ContainerImageRPMManifestInput
  ): ContainerImageRPMManifestResponse

  # Create a new RPM manifest for an image.
  create_image_rpm_manifest(
    id: String
    input: ContainerImageRPMManifestInput
  ): ContainerImageRPMManifestResponse

  # Create a certification project build request
  create_certification_project_build_request(
    id: String
    input: CertProjectBuildRequestInput
  ): CertProjectBuildRequestResponse

  # Create a certification project scan request
  create_certification_project_scan_request(
    id: String
    input: CertProjectScanRequestInput
  ): CertProjectScanRequestResponse

  # Create a certification project tag request
  create_certification_project_tag_request(
    id: String
    input: CertProjectTagRequestInput
  ): CertProjectTagRequestResponse

  # Partially update a vendor.
  update_vendor(
    id: String
    input: ContainerVendorInput
  ): ContainerVendorResponse

  # Create a certification project.
  create_certification_project(
    input: CertificationProjectInput
  ): CertificationProjectResponse

  # Partially update a certification project.
  update_certification_project(
    id: String
    input: CertificationProjectInput
  ): CertificationProjectResponse

  # Update a certification project.
  replace_certification_project(
    id: String
    input: CertificationProjectInput
  ): CertificationProjectResponse

  # Replace product listing.
  replace_product_listing(
    id: String
    input: ProductListingInput
  ): ProductListingResponse

  # Update product listing.
  update_product_listing(
    id: String
    input: ProductListingInput
  ): ProductListingResponse

  # Create product listing.
  create_product_listing(input: ProductListingInput): ProductListingResponse

  # Create an API key.
  create_api_key(input: ApiKeyInput): ApiKeyResponse

  # Delete API key.
  delete_api_key(key_id: Int): ApiKeyResponse

  # Create a certification project test result
  create_certification_project_test_result(
    id: String
    input: CertProjectTestResultInput
  ): CertProjectTestResultResponse

  # Update/Patch certification project test result
  update_certification_project_test_result(
    id: String
    input: CertProjectTestResultInput
  ): CertProjectTestResultResponse

  # Create a certification project artifact
  create_certification_project_artifact(
    id: String
    input: CertProjectTestResultInput
  ): CertProjectArtifactResponse
}

# Metadata about images contained in RedHat and ISV repositories
input ContainerImageInput {
  # The field contains an architecture for which the container image was built for. Value is used to distinguish between the default x86-64 architecture and other architectures. If the value is not set, the image was built for the x86-64 architecture.
  architecture: String

  # Brew related metadata.
  brew: BrewInput

  # A list of all content sets (YUM repositories) from where an image RPM content is.
  content_sets: [String]

  # A mapping of applicable advisories to RPM NEVRA. This data is required for scoring.
  cpe_ids: [String]

  # A mapping of applicable advisories for the base_images from the Red Hat repositories.
  cpe_ids_rh_base_images: [String]

  # Docker Image Digest. For Docker 1.10+ this is also known as the 'manifest digest'.
  docker_image_digest: String

  # Docker Image ID. For Docker 1.10+ this is also known as the 'config digest'.
  docker_image_id: String

  # The grade based on applicable updates and time provided by PST CVE engine.
  freshness_grades: [FreshnessGradeInput]
  object_type: String

  # Data parsed from image metadata.
  # These fields are not computed from any other source.
  parsed_data: ParsedDataInput

  # Published repositories associated with the container image.
  repositories: [ContainerImageRepoInput]

  # Indication if the image was certified.
  certified: Boolean

  # Indicates that an image was removed. Only unpublished images can be removed.
  deleted: Boolean

  # Image manifest digest.
  # Be careful, as this value is not unique among container image entries, as one image can be references several times.
  image_id: String

  # ID of the project in for ISV repositories. The ID can be also used to connect vendor to the image.
  isv_pid: String

  # The total size of the sum of all layers for each image in bytes. This is computed externally and may not match what is reported by the image metadata (see parsed_data.size).
  sum_layer_size_bytes: Int

  # Field for multiarch primary key
  top_layer_id: String

  # Hash (sha256) of the uncompressed top layer for this image (should be same value as - parsed_data.uncompressed_layer_sizes.0.layer_id)
  uncompressed_top_layer_id: String

  # Raw image configuration, such as output from docker inspect.
  raw_config: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

# Brew Build System related metadata.
input BrewInput {
  # Unique and immutable Brew build ID.
  build: String

  # Timestamp from Brew when the image has been succesfully built.
  completion_date: DateTime

  # Multi-Arch primary key.
  nvra: String

  # A package name in Brew.
  package: String
}

#
input CertificationInput {
  assessment: [AssessmentInput]
}

#
input AssessmentInput {
  # Assesment name.
  name: String

  # Indicates if the assessment is required for certification.
  required_for_certification: Boolean

  # Indicates if the assesment was passed, True means yes.
  value: Boolean
}

# Grade based on applicable updates and time provided by PST CVE engine.
input FreshnessGradeInput {
  # Date after which the grade is no longer valid. See start_date for when the grade was effective. If no value is set, the grade applies forever. This should happen only for a grade of A (no vulnerabilities) or grade F.
  end_date: DateTime

  # The grade.
  grade: String

  # Date when the grade was added by the vulnerability engine.
  creation_date: DateTime

  # Date from which the grade is in effect. The grade is effective until the end_date, if end_date is set.
  start_date: DateTime
}

#
input ParsedDataInput {
  architecture: String
  author: String
  command: String
  comment: String
  container: String

  # The 'created' date reported by image metadata. Stored as String because we do not have control on that format.
  created: String
  docker_image_digest: String
  docker_image_id: String

  # Version of docker reported by 'docker inspect' for this image.
  docker_version: String
  env_variables: [String]
  image_id: String
  labels: [LabelInput]

  # Layer digests from the image.
  layers: [String]
  os: String
  ports: String

  # Repositories defined within an image as reported by yum command.
  repos: [ParsedDataRepoInput]

  # Size of this image as reported by image metadata.
  size: Int

  # Information about uncompressed layer sizes.
  uncompressed_layer_sizes: [UncompressedLayerSizeInput]

  # Uncompressed images size in bytes (sum of uncompressed layers size).
  uncompressed_size_bytes: Int

  # The user on the images.
  user: String

  # Virtual size of this image as reported by image metadata.
  virtual_size: Int
}

# Image label.
input LabelInput {
  # The name of the label
  name: String

  # Value of the label.
  value: String
}

#
input ParsedDataRepoInput {
  baseurl: String
  expire: String
  filename: String
  id: String
  name: String
  pkgs: String
  size: String
  updated: String
}

#
input UncompressedLayerSizeInput {
  # The SHA256 layer ID.
  layer_id: String

  # The uncompressed layer size in bytes.
  size_bytes: Int
}

#
input ContainerImageRepoInput {
  # Store information about image comparison.
  comparison: ContainerImageRepoComparisonInput

  # The _id's of the redHatContainerAdvisory that contains the content advisories.
  content_advisory_ids: [String]

  # The _id of the redHatContainerAdvisory that contains the image advisory.
  image_advisory_id: String

  # Available for multiarch images.
  manifest_list_digest: String

  # Available for single arch images.
  manifest_schema2_digest: String

  # Indicate if the image has been published to the container catalog.
  published: Boolean

  # Date the image was published to the container catalog.
  published_date: DateTime

  # When the image was pushed to this repository. For RH images this is picked from first found of advisory ship_date, brew completion_date, and finally repositories publish_date. For ISV images this TBD but is probably going to be only sourced from publish_date but could come from parsed_data.created.
  push_date: DateTime

  # Hostname of the registry where the repository can be accessed.
  registry: String

  # Repository name.
  repository: String

  # Image signing info.
  signatures: [SignatureInfoInput]

  # List of container tags assigned to this layer.
  tags: [ContainerImageRepoTagInput]
}

#
input ContainerImageRepoComparisonInput {
  # Mapping of a NVRA to multiple advisories IDs.
  advisory_rpm_mapping: [ContainerImageRepoComparisonMappingInput]

  # Reason why 'with_nvr' is or is not null.
  reason: String

  # Human readable reason.
  reason_text: String

  # List of rpms grouped by category (new, remove, upgrade, downgrade).
  rpms: ContainerImageRepoComparisonRPMsInput

  # NVR of image which this image was compared with.
  with_nvr: String
}

#
input ContainerImageRepoComparisonMappingInput {
  # Content advisory ID.
  advisory_ids: [String]

  # NVRA of the RPM related to advisories.
  nvra: String
}

#
input ContainerImageRepoComparisonRPMsInput {
  # List of NVRA which were downgraded in this image.
  downgrade: [String]

  # List of NVRA which were added to this image.
  new: [String]

  # List of NVRA which were removed in this image.
  remove: [String]

  # List of NVRA which were upgraded in this image.
  upgrade: [String]
}

#
input SignatureInfoInput {
  # The long 16-byte gpg key id.
  key_long_id: String

  # List of image tags that are signed with the given key.
  tags: [String]
}

#
input ContainerImageRepoTagInput {
  added_date: DateTime

  # Available when manifest_schema2_digest is not. All legacy images.
  manifest_schema1_digest: String

  # The name of the tag.
  name: String

  # Date this tag was removed from the image in this repo. If the tag is added back, add a new entry in 'tags' array.
  removed_date: DateTime
}

# A containerImageRPMManifest contains all the RPM packages for a given containerImage
input ContainerImageRPMManifestInput {
  # The foreign key to containerImage._id.
  image_id: ObjectID
  object_type: String

  # Content manifest of this image. RPM content included in the image.
  rpms: [RpmsItemsInput]

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

# RPM content of an image.
input RpmsItemsInput {
  # RPM architecture.
  architecture: String

  # GPG key used to sign the RPM.
  gpg: String

  # RPM name.
  name: String

  # RPM name, version, release, and architecture.
  nvra: String

  # RPM release.
  release: String

  # Source RPM name.
  srpm_name: String

  # Source RPM NEVRA (name, epoch, version, release, architecture).
  srpm_nevra: String

  # RPM summary.
  summary: String

  # RPM version.
  version: String
}

# Contain status and related metadata of a certProject build request.
input CertProjectBuildRequestInput {
  # Unique identifier for the certification project.
  cert_project: ObjectID

  # The request status
  status: String

  # The tag that the container image gets when build is done.
  tag: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # An explanatory message to a request status.
  status_message: String
}

# Contain status and related metadata of a certProject scan request.
input CertProjectScanRequestInput {
  # Unique identifier for the certification project.
  cert_project: ObjectID

  # URL pointing to the location of DCI logs.
  external_tests_link: URI

  # Image pull specification in repo@sha256:digest format.
  pull_spec: String

  # Unique identifier of an ISV certification scan
  scan_uuid: String

  # Container image tag associated with the scan request.
  tag: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # The request status
  status: String

  # An explanatory message to a request status.
  status_message: String
}

# Contain status and related metadata of a certProject tag request.
input CertProjectTagRequestInput {
  # Unique identifier for the certification project.
  cert_project: ObjectID

  # Container image id associated with the tag request.
  image_id: ObjectID

  # Operation performed during the tag request, e.g. publish
  operation: String

  # Container image tag associated with the tag request.
  tag: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # The request status
  status: String

  # An explanatory message to a request status.
  status_message: String
}

# Stores information about a Vendor
input ContainerVendorInput {
  # URL to the vendor's main website.
  company_url: URI

  # General contact information for the vendor, to be displayed on the vendor page on RHCC.
  contact: ContainerVendorContactInput
  description: String

  # Company node ID from Red Hat Connect.
  drupal_company_id: Int

  # The industry / vertical the vendor belongs to.
  industries: [String]
  label: String

  # A flag that determines if vendor label can be changed.
  label_locked: Boolean
  logo_url: URI
  name: String
  object_type: String

  # Indicate that the vendor has been published.
  published: Boolean
  registry_urls: [String]

  # RSS feed for vendor.
  rss_feed_url: URI

  # Token for outbound namespace for pulling published marketplace images.
  service_account_token: String
  social_media_links: [ContainerVendorSocialMediaLinksInput]

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

# Contact information
input ContainerVendorContactInput {
  # General contact email address.
  email: String

  # General contact phone number.
  phone: String
}

# Social media links.
input ContainerVendorSocialMediaLinksInput {
  # The name of the social media provider.
  name: String

  # The URL to the social media site for the vendor.
  url: URI
}

# Certification project information.
input CertificationProjectInput {
  # Certification Date.
  certification_date: DateTime

  # Certification Status.
  certification_status: String

  # Certification User.
  certification_user: Int

  # Contacts for certification project.
  contacts: [CertProjectContactsInput]
  container: CertProjectContainerInput

  # Configuration specific to Helm Chart projects.
  helm_chart: CertProjectHelmChartInput
  marketplace: CertProjectMarketplaceInput

  # The owner provided name of the certification project.
  name: String

  # Operator Distribution.
  operator_distribution: String

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # Unique identifier for the product listing.
  product_listings: [String]

  # Status of the certification project.
  project_status: String

  # Who published the certification project.
  published_by: String
  redhat: CertProjectRedhatInput
  self_certification: CertProjectSelfCertificationInput

  # Certification project type.
  type: String

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

# Contact info.
input CertProjectContactsInput {
  email_address: Email
  type: String
}

# Container related information.
input CertProjectContainerInput {
  # The application categories (types).
  application_categories: [String]

  # Once a container is certified it is automatically published. Auto-publish must be enabled in order to set up automatic rebuilds. Auto-publish must always be enabled when auto-rebuilding is enabled.
  auto_publish: Boolean

  # Auto rebuild enabled.
  auto_rebuild: Boolean

  # Distribution approval obtained.
  distribution_approval: Boolean

  # Distribution method.
  distribution_method: String

  # ID of the project in for ISV repositories.
  isv_pid: String

  # Kubernetes objects for operator registry projects. Value has to be a valid YAML.
  kube_objects: OpenPGPEncrypted

  # Docker config for operator registry projects. Value has to be a valid JSON.
  docker_config_json: OpenPGPEncrypted

  # OS Content Type.
  os_content_type: String

  # Passed RH Cert.
  passed_rhcert: Boolean

  # A container needs to run in a privileged state.
  privileged: Boolean

  # Hostname of the registry where the repository can be accessed.
  # Examples: registry.company.com assumes the default port, 443. registry.company.com:5000 repository path with optional port specified.
  # It is only applicable for projects with an 'external' distribution method.
  registry: String

  # Note: These instructions will be displayed in the Red Hat Container Catalog as is. Please modify the following template as it suits your needs.
  registry_override_instruct: String

  # Release category.
  release_category: String

  # Path to the container repository as found in the registry.
  #
  # Examples:
  # path/to/repository
  # repository
  #
  # This field can only be edited when there are no published containers.
  # It is only applicable for projects with an 'external' distribution method.
  repository: String

  # The repository description is displayed on the container
  # catalog repository overview page.
  repository_description: String

  # This should represent your product (or the component if your product consists of multiple containers)
  # and a major version. For example, you could use names like jboss-server7, or agent5.
  #
  # This value is only editable when there are no published containers in this project.
  # It is only applicable for projects that do not have the 'external' distribution method.
  repository_name: String

  # Service Account Secret.
  service_account_secret: String

  # Short description of the container.
  short_description: String

  # Supported Platforms.
  support_platforms: [String]

  # Container type.
  # Field is required, if project type is 'Container', and the field is immutable for Partners after creation.
  type: String

  # Filename other than the default Dockerfile or a path to a Dockerfile in a subdirectory.
  source_dockerfile: String

  # Force the build to ignore cached layers and rerun all steps of the Dockerfile.
  build_no_cache: Boolean

  # Override default location (root directory) for applications within a subdirectory.
  source_context_dir: String

  # Whether Red Hat will build your container.
  build_service: Boolean

  # The specific Git branch to checkout.
  source_ref: String

  # The URL to the source used for the build.
  # For example: 'https://github.com/openshift/ruby-hello-world
  source_uri: URI

  # Base64 encoded SSH private key in PEM format. Used to pull the source.
  source_ssh_private_key: Base64OpenPGPEncrypted

  # GitHub users authorized to submit a certification pull request.
  github_usernames: [String]
}

# Helm chart related information.
input CertProjectHelmChartInput {
  # How your Helm Chart is distributed.
  distribution_method: String

  # The Helm Chart name as it will appear in GitHub.
  chart_name: String

  # URL to the externally distributed Helm Chart repository. This is not used if the chart is distributed via Red Hat.
  repository: URI

  # Instructions for users to access an externally distributed Helm Chart.
  distribution_instructions: String

  # Base64 encoded PGP public key. Used to sign result submissions.
  public_pgp_key: String

  # URL to the user submitted github pull request for this project.
  github_pull_request: URI

  # Short description of the Helm Chart.
  short_description: String

  # Long description of the Helm Chart.
  long_description: String

  # The application categories (types).
  application_categories: [String]

  # GitHub users authorized to submit a certification pull request.
  github_usernames: [String]
}

# Drupal related information.
input CertProjectDrupalInput {
  # Company node ID from Red Hat Connect.
  company_id: Int

  # Relation ID for certification project.
  relation: Int

  # Zone for certification project.
  zone: String
}

# Marketplace related information.
input CertProjectMarketplaceInput {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

# Red Hat projects related information.
input CertProjectRedhatInput {
  # Red Hat Product ID.
  product_id: Int

  # Red Hat product name.
  product_name: String

  # Red Hat Product Version.
  product_version: String

  # Red Hat Product Version.
  product_version_id: Int
}

# Red Hat projects related information.
input CertProjectSelfCertificationInput {
  # Application Profiler.
  app_profiler: Boolean

  # Application Runs on App Type.
  app_runs_on_app_type: Boolean

  # Whether the Self Certification Evidence URL requires a customer login.
  auth_login: Boolean

  # Self Certification Evidence URL.
  certification_url: URI

  # Can Commercially Support on App Type.
  comm_support_on_app_type: Boolean

  # Self Certification Requested.
  requested: Boolean

  # TsaNET Member.
  tsanet_member: Boolean
}

# Product listings define a marketing page in the Ecosystem Catalog. It allows you to group repos and showcase what they accomplish together as an application. In the case of operators, your CSV file populates OperatorHub, which can only be viewed in cluster through OpenShift. Your product listing is publicly visible in the Ecosystem Catalog so anyone can know that it is offered.
input ProductListingInput {
  category: String

  # List of unique identifiers for the certification project.
  cert_projects: [String]

  # This field is required when the product listing is published.
  contacts: [ContactsItemsInput]

  # This field is required when the product listing is published.
  descriptions: DescriptionsInput

  # Company node ID from Red Hat Connect. Read only.
  drupal_company_id: Int

  # This field is required when the product listing is published.
  faqs: [FAQSItemsInput]

  # This field is required when the product listing is published.
  features: [FeaturesItemsInput]

  # This field is required when the product listing is published.
  functional_categories: [String]
  legal: LegalInput

  # This field is required when the product listing is published.
  linked_resources: [LinkedResourcesItemsInput]
  logo: LogoInput
  name: String
  published: Boolean

  # Flag determining if product listing is considered to be deleted. Product listing can be deleted only if it is not published. Value is set to False by default.
  deleted: Boolean
  quick_start_configuration: QuickStartConfigurationInput

  # List of unique identifiers for the repository.
  repositories: [String]

  # This field is required when the product listing is published.
  search_aliases: [SearchAliasesItemsInput]
  support: SupportInput
  type: String
  vendor_label: String
  operator_bundles: [OperatorBundlesItemsInput]

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

#
input BadgesItemsInput {
  badge: String
  project_id: ObjectID
}

#
input ContactsItemsInput {
  email_address: Email
  type: String
}

# This field is required when the product listing is published.
input DescriptionsInput {
  long: String
  short: String
}

# This field is required when the product listing is published.
input FAQSItemsInput {
  answer: String
  question: String
}

# This field is required when the product listing is published.
input FeaturesItemsInput {
  description: String
  title: String
}

#
input LegalInput {
  description: String
  license_agreement_url: URI
  privacy_policy_url: URI
}

#
input LinkedResourcesItemsInput {
  category: String
  description: String
  thumbnail_url: URI
  title: String
  type: String
  url: URI
}

#
input LogoInput {
  url: URI
}

#
input MarketplaceInput {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

#
input QuickStartConfigurationInput {
  instructions: String
}

#
input SearchAliasesItemsInput {
  key: String
  value: String
}

# This field is required when the product listing is published.
input SupportInput {
  description: String
  email_address: Email
  phone_number: String
  url: URI
}

#
input OperatorBundlesItemsInput {
  # Bundle unique identifier
  _id: ObjectID

  # Bundle package name
  package: String
  capabilities: [String]
}

#
type ApiKeyResponse {
  api_key: String
  key_data: ApiKey
}

# API key stored in Loki.
input ApiKeyInput {
  id: Int
  description: String
  company_id: Int
  created: DateTime
  last_used: DateTime
  created_by: String

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int
}

# Contain certification test results of related certProject
input CertProjectTestResultInput {
  # Unique identifier for the certification project.
  cert_project: ObjectID

  # Hashed content for the certification project.
  certification_hash: String

  # Image associated with the test result.
  image: String

  # Operator package name associated with the test result.
  operator_package_name: String

  # Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  org_id: Int

  # Whether or not the test has passed overall.
  passed: Boolean

  # Identifier of container image collection.
  image_id: ObjectID

  # The test results stored in lists based on result status.
  results: ResultsInput

  # The test library of the test result.
  test_library: TestLibraryInput

  # Version associated with the content tested.
  version: String

  # Pull request of certification test results
  pull_request: PullRequestInput

  # A platform where tests were executed.
  tested_on: TestedOnInput

  # MongoDB unique _id
  _id: String

  # The date when the entry was created. Value is created automatically on creation.
  creation_date: DateTime

  # The date when the entry was last updated.
  last_update_date: DateTime
}

# The test results stored in lists based on result status.
input ResultsInput {
  # Test results of cert project certification
  failed: [TestResultsInput]

  # Test results of cert project certification
  errors: [TestResultsInput]

  # Test results of cert project certification
  passed: [TestResultsInput]
}

# The cert project pipeline test result.
input TestResultsInput {
  check_url: URI
  description: String
  elapsed_time: Float
  help: String
  knowledgebase_url: URI
  name: String
  suggestion: String
}

# The test library of the test result.
input TestLibraryInput {
  commit: String
  name: String
  version: String
}

# Pull request of certification test results.
input PullRequestInput {
  # Pull request URL
  url: String

  # Pull request identifier
  id: Int

  # Pull request status
  status: String
}

# A platform where tests were executed.
input TestedOnInput {
  name: String
  version: String
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_CertificationProjectEdges_build_requests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.CertProjectBuildRequestFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCertProjectBuildRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CertificationProjectEdges_scan_requests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.CertProjectScanRequestFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCertProjectScanRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_CertificationProjectEdges_tag_requests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.CertProjectTagRequestFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCertProjectTagRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerImageEdges_artifacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.CertProjectArtifactFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCertProjectArtifactFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerImageEdges_test_results_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.CertProjectTestResultFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCertProjectTestResultFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerImageEdges_vulnerabilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.ContainerImageVulnerabilityFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOContainerImageVulnerabilityFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerRepositoryEdges_certification_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.CertificationProjectFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCertificationProjectFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerRepositoryEdges_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.ContainerImageFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOContainerImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerRepositoryEdges_operator_bundles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.OperatorBundleFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOOperatorBundleFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerRepositoryEdges_product_listings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.ProductListingFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOProductListingFilter2ᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerTagHistoryEdges_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.ContainerImageFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOContainerImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerVendorEdges_product_listings_label_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.ProductListingFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOProductListingFilter2ᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerVendorEdges_product_listings_org_id_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.ProductListingFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOProductListingFilter2ᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_ContainerVendorEdges_repositories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *model.ContainerRepositoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOContainerRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg3, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_create_api_key_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.APIKeyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOApiKeyInput2ᚖexampleᚋgraphᚋmodelᚐAPIKeyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_create_certification_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CertificationProjectInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCertificationProjectInput2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_create_certification_project_artifact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.CertProjectTestResultInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCertProjectTestResultInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_create_certification_project_build_request_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.CertProjectBuildRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCertProjectBuildRequestInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_create_certification_project_scan_request_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.CertProjectScanRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCertProjectScanRequestInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_create_certification_project_tag_request_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.CertProjectTagRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCertProjectTagRequestInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_create_certification_project_test_result_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.CertProjectTestResultInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCertProjectTestResultInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_create_image_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ContainerImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOContainerImageInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_create_image_rpm_manifest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.ContainerImageRPMManifestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOContainerImageRPMManifestInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_create_product_listing_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProductListingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOProductListingInput2ᚖexampleᚋgraphᚋmodelᚐProductListingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_api_key_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["key_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_patch_image_by_manifest_digest_registry_and_repository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["repository"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["repository"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["registry"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registry"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["manifest_digest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manifest_digest"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["manifest_digest"] = arg2
	var arg3 *model.ContainerImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg3, err = ec.unmarshalOContainerImageInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_put_image_by_manifest_digest_registry_and_repository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["repository"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["repository"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["registry"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registry"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["manifest_digest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manifest_digest"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["manifest_digest"] = arg2
	var arg3 *model.ContainerImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg3, err = ec.unmarshalOContainerImageInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_replace_certification_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.CertificationProjectInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCertificationProjectInput2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_replace_image_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.ContainerImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOContainerImageInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_replace_image_rpm_manifest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.ContainerImageRPMManifestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOContainerImageRPMManifestInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_replace_product_listing_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.ProductListingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOProductListingInput2ᚖexampleᚋgraphᚋmodelᚐProductListingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_certification_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.CertificationProjectInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCertificationProjectInput2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_certification_project_test_result_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.CertProjectTestResultInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCertProjectTestResultInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_image_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.ContainerImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOContainerImageInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_image_rpm_manifest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.ContainerImageRPMManifestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOContainerImageRPMManifestInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_product_listing_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.ProductListingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOProductListingInput2ᚖexampleᚋgraphᚋmodelᚐProductListingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vendor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *model.ContainerVendorInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOContainerVendorInput2ᚖexampleᚋgraphᚋmodelᚐContainerVendorInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_find_certification_projects_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg1, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg3
	var arg4 *model.ContainerImageFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOContainerImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_find_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg0, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg2
	var arg3 *model.ContainerImageFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg3, err = ec.unmarshalOContainerImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_get_cert_project_artifact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get_cert_project_artifacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg1, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg3
	var arg4 *model.CertProjectArtifactFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOCertProjectArtifactFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_get_cert_project_test_result_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get_cert_project_test_results_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg1, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg3
	var arg4 *model.CertProjectTestResultFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOCertProjectTestResultFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_get_certification_artifacts_by_image_id_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg1, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg3
	var arg4 *model.CertProjectArtifactFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOCertProjectArtifactFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_get_certification_project_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get_certification_project_by_pid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["pid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get_image_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get_image_rpm_manifest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get_rpm_manifest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get_test_results_by_image_id_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*model.SortBy
	if tmp, ok := rawArgs["sort_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_by"))
		arg1, err = ec.unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort_by"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["page_size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page_size"] = arg3
	var arg4 *model.CertProjectTestResultFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOCertProjectTestResultFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ALMExample_api_version(ctx context.Context, field graphql.CollectedField, obj *model.ALMExample) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ALMExample",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ALMExample_kind(ctx context.Context, field graphql.CollectedField, obj *model.ALMExample) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ALMExample",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPageViews_by_date(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPageViews) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPageViews",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ByDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AnalyticsPageViewsByDate)
	fc.Result = res
	return ec.marshalOAnalyticsPageViewsByDate2ᚕᚖexampleᚋgraphᚋmodelᚐAnalyticsPageViewsByDate(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPageViews_total_pageviews(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPageViews) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPageViews",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPageviews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPageViewsByDate_activity_date(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPageViewsByDate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPageViewsByDate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivityDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPageViewsByDate_pageviews(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPageViewsByDate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPageViewsByDate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pageviews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPageViewsResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPageViewsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPageViewsResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnalyticsPageViews)
	fc.Result = res
	return ec.marshalOAnalyticsPageViews2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPageViews(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPageViewsResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPageViewsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPageViewsResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCount_by_customers(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ByCustomers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AnalyticsPullCountByCostumer)
	fc.Result = res
	return ec.marshalOAnalyticsPullCountByCostumer2ᚕᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCountByCostumer(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCount_by_tags(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ByTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AnalyticsPullCountByTag)
	fc.Result = res
	return ec.marshalOAnalyticsPullCountByTag2ᚕᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCountByTag(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCount_total_customers(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCustomers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCount_total_countries(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCountries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCount_total_pulls(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPulls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountByCostumer_country(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountByCostumer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountByCostumer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountByCostumer_customer_name(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountByCostumer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountByCostumer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountByCostumer_download_date(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountByCostumer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountByCostumer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DownloadDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountByCostumer_pull_count(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountByCostumer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountByCostumer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PullCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountByTag_download_date(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountByTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountByTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DownloadDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountByTag_image_tags(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountByTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountByTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountByTag_pull_count(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountByTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountByTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PullCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnalyticsPullCount)
	fc.Result = res
	return ec.marshalOAnalyticsPullCount2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCount(ctx, field.Selections, res)
}

func (ec *executionContext) _AnalyticsPullCountResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.AnalyticsPullCountResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AnalyticsPullCountResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKey_id(ctx context.Context, field graphql.CollectedField, obj *model.APIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKey_description(ctx context.Context, field graphql.CollectedField, obj *model.APIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKey_company_id(ctx context.Context, field graphql.CollectedField, obj *model.APIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKey_created(ctx context.Context, field graphql.CollectedField, obj *model.APIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKey_last_used(ctx context.Context, field graphql.CollectedField, obj *model.APIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUsed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKey_created_by(ctx context.Context, field graphql.CollectedField, obj *model.APIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKey_org_id(ctx context.Context, field graphql.CollectedField, obj *model.APIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKeyListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.APIKeyListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKeyListResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.APIKey)
	fc.Result = res
	return ec.marshalOApiKey2ᚕᚖexampleᚋgraphᚋmodelᚐAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKeyListResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.APIKeyListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKeyListResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKeyResponse_api_key(ctx context.Context, field graphql.CollectedField, obj *model.APIKeyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKeyResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiKeyResponse_key_data(ctx context.Context, field graphql.CollectedField, obj *model.APIKeyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiKeyResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.APIKey)
	fc.Result = res
	return ec.marshalOApiKey2ᚖexampleᚋgraphᚋmodelᚐAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) _Assessment_name(ctx context.Context, field graphql.CollectedField, obj *model.Assessment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Assessment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Assessment_required_for_certification(ctx context.Context, field graphql.CollectedField, obj *model.Assessment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Assessment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredForCertification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Assessment_value(ctx context.Context, field graphql.CollectedField, obj *model.Assessment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Assessment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BadgesItems_badge(ctx context.Context, field graphql.CollectedField, obj *model.BadgesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BadgesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BadgesItems_project_id(ctx context.Context, field graphql.CollectedField, obj *model.BadgesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BadgesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BinarySignature_binary_signature(ctx context.Context, field graphql.CollectedField, obj *model.BinarySignature) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BinarySignature",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BinarySignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BinarySignatureResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.BinarySignatureResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BinarySignatureResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BinarySignature)
	fc.Result = res
	return ec.marshalOBinarySignature2ᚖexampleᚋgraphᚋmodelᚐBinarySignature(ctx, field.Selections, res)
}

func (ec *executionContext) _BinarySignatureResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.BinarySignatureResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BinarySignatureResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _Brew_build(ctx context.Context, field graphql.CollectedField, obj *model.Brew) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Brew",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Build, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Brew_completion_date(ctx context.Context, field graphql.CollectedField, obj *model.Brew) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Brew",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Brew_nvra(ctx context.Context, field graphql.CollectedField, obj *model.Brew) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Brew",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nvra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Brew_package(ctx context.Context, field graphql.CollectedField, obj *model.Brew) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Brew",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_id(ctx context.Context, field graphql.CollectedField, obj *model.Cve) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CVE_url(ctx context.Context, field graphql.CollectedField, obj *model.Cve) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CVE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_org_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_version(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_operator_package_name(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorPackageName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_certification_hash(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificationHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_image_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_content(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_content_type(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_filename(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_file_size(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact__id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifact_edges(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectArtifactEdges)
	fc.Result = res
	return ec.marshalOCertProjectArtifactEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactEdges_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactEdges_container_image(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertProjectArtifact)
	fc.Result = res
	return ec.marshalOCertProjectArtifact2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectArtifact)
	fc.Result = res
	return ec.marshalOCertProjectArtifact2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectArtifactResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectArtifactResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectArtifactResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildLog_log(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Log, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildLogResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildLogResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildLogResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectBuildLog)
	fc.Result = res
	return ec.marshalOCertProjectBuildLog2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildLog(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildLogResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildLogResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildLogResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest_status(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest_tag(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest__id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest_org_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest_status_message(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequest_edges(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectBuildRequestEdges)
	fc.Result = res
	return ec.marshalOCertProjectBuildRequestEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestEdges_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestEdges_logs(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectBuildLogResponse)
	fc.Result = res
	return ec.marshalOCertProjectBuildLogResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildLogResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertProjectBuildRequest)
	fc.Result = res
	return ec.marshalOCertProjectBuildRequest2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectBuildRequest)
	fc.Result = res
	return ec.marshalOCertProjectBuildRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectBuildRequestResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectBuildRequestResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectBuildRequestResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContacts_email_address(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContacts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContacts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOEmail2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContacts_type(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContacts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContacts",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_application_categories(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_auto_publish(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoPublish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_auto_rebuild(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoRebuild, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_distribution_approval(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistributionApproval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_distribution_method(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistributionMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_isv_pid(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsvPid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_kube_objects(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KubeObjects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOOpenPGPEncrypted2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_docker_config_json(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DockerConfigJSON, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOOpenPGPEncrypted2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_os_content_type(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OsContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_passed_rhcert(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassedRhcert, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_privileged(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Privileged, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_published(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_registry(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_registry_override_instruct(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistryOverrideInstruct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_release_category(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_repository(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_repository_description(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepositoryDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_repository_name(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepositoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_service_account_secret(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceAccountSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_short_description(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_support_platforms(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportPlatforms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_type(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_source_dockerfile(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceDockerfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_build_no_cache(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildNoCache, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_source_context_dir(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceContextDir, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_build_service(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildService, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_source_ref(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceRef, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_source_uri(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_source_ssh_private_key(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceSSHPrivateKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOBase64OpenPGPEncrypted2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_github_usernames(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GithubUsernames, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainer_edges(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectContainerEdges)
	fc.Result = res
	return ec.marshalOCertProjectContainerEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainerEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectContainerEdges_repository(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectContainerEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectContainerEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerRepositoryResponse)
	fc.Result = res
	return ec.marshalOContainerRepositoryResponse2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectDrupal_company_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectDrupal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectDrupal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectDrupal_relation(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectDrupal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectDrupal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Relation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectDrupal_zone(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectDrupal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectDrupal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_distribution_method(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistributionMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_chart_name(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChartName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_repository(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_distribution_instructions(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistributionInstructions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_public_pgp_key(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicPGPKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_github_pull_request(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GithubPullRequest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_short_description(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_long_description(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LongDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_application_categories(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectHelmChart_github_usernames(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectHelmChart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectHelmChart",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GithubUsernames, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectMarketplace_enablement_status(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectMarketplace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectMarketplace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnablementStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectMarketplace_enablement_url(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectMarketplace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectMarketplace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnablementURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectMarketplace_listing_url(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectMarketplace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectMarketplace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectMarketplace_published(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectMarketplace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectMarketplace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectRedhat_product_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectRedhat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectRedhat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectRedhat_product_name(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectRedhat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectRedhat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectRedhat_product_version(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectRedhat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectRedhat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectRedhat_product_version_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectRedhat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectRedhat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_external_tests_link(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalTestsLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_pull_spec(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PullSpec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_scan_uuid(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanUUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_tag(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest__id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_org_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_status(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_status_message(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequest_edges(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectScanRequestEdges)
	fc.Result = res
	return ec.marshalOCertProjectScanRequestEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequestEdges_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequestEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequestEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequestPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertProjectScanRequest)
	fc.Result = res
	return ec.marshalOCertProjectScanRequest2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequestPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequestPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequestPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequestPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequestResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequestResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequestResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectScanRequest)
	fc.Result = res
	return ec.marshalOCertProjectScanRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectScanRequestResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectScanRequestResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectScanRequestResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectSelfCertification_app_profiler(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectSelfCertification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectSelfCertification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProfiler, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectSelfCertification_app_runs_on_app_type(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectSelfCertification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectSelfCertification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppRunsOnAppType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectSelfCertification_auth_login(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectSelfCertification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectSelfCertification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthLogin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectSelfCertification_certification_url(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectSelfCertification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectSelfCertification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificationURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectSelfCertification_comm_support_on_app_type(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectSelfCertification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectSelfCertification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommSupportOnAppType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectSelfCertification_requested(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectSelfCertification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectSelfCertification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Requested, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectSelfCertification_tsanet_member(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectSelfCertification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectSelfCertification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TsanetMember, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_image_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_operation(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_tag(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest__id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_org_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_status(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_status_message(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequest_edges(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTagRequestEdges)
	fc.Result = res
	return ec.marshalOCertProjectTagRequestEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestEdges_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestEdges_image(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertProjectTagRequest)
	fc.Result = res
	return ec.marshalOCertProjectTagRequest2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTagRequest)
	fc.Result = res
	return ec.marshalOCertProjectTagRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTagRequestResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTagRequestResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTagRequestResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_certification_hash(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificationHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_image(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_operator_package_name(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorPackageName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_org_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_passed(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_image_id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_results(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Results)
	fc.Result = res
	return ec.marshalOResults2ᚖexampleᚋgraphᚋmodelᚐResults(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_test_library(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TestLibrary)
	fc.Result = res
	return ec.marshalOTestLibrary2ᚖexampleᚋgraphᚋmodelᚐTestLibrary(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_version(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_pull_request(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PullRequest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PullRequest)
	fc.Result = res
	return ec.marshalOPullRequest2ᚖexampleᚋgraphᚋmodelᚐPullRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_tested_on(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TestedOn)
	fc.Result = res
	return ec.marshalOTestedOn2ᚖexampleᚋgraphᚋmodelᚐTestedOn(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult__id(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResult_edges(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTestResultEdges)
	fc.Result = res
	return ec.marshalOCertProjectTestResultEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultEdges_cert_project(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultEdges_container_image(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertProjectTestResult)
	fc.Result = res
	return ec.marshalOCertProjectTestResult2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTestResult(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTestResult)
	fc.Result = res
	return ec.marshalOCertProjectTestResult2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResult(ctx, field.Selections, res)
}

func (ec *executionContext) _CertProjectTestResultResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertProjectTestResultResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertProjectTestResultResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _Certification_assessment(ctx context.Context, field graphql.CollectedField, obj *model.Certification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Certification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Assessment)
	fc.Result = res
	return ec.marshalOAssessment2ᚕᚖexampleᚋgraphᚋmodelᚐAssessment(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_certification_date(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_certification_status(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_certification_user(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_contacts(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertProjectContacts)
	fc.Result = res
	return ec.marshalOCertProjectContacts2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContacts(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_container(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Container, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectContainer)
	fc.Result = res
	return ec.marshalOCertProjectContainer2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainer(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_helm_chart(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HelmChart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectHelmChart)
	fc.Result = res
	return ec.marshalOCertProjectHelmChart2ᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChart(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_drupal(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Drupal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectDrupal)
	fc.Result = res
	return ec.marshalOCertProjectDrupal2ᚖexampleᚋgraphᚋmodelᚐCertProjectDrupal(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_marketplace(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marketplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectMarketplace)
	fc.Result = res
	return ec.marshalOCertProjectMarketplace2ᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplace(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_name(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_operator_distribution(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorDistribution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_org_id(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_product_listings(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_project_status(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_published_by(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_redhat(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Redhat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectRedhat)
	fc.Result = res
	return ec.marshalOCertProjectRedhat2ᚖexampleᚋgraphᚋmodelᚐCertProjectRedhat(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_self_certification(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelfCertification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectSelfCertification)
	fc.Result = res
	return ec.marshalOCertProjectSelfCertification2ᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertification(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_type(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject__id(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProject_edges(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProject) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectEdges)
	fc.Result = res
	return ec.marshalOCertificationProjectEdges2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectEdges_vendor(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vendor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerVendorResponse)
	fc.Result = res
	return ec.marshalOContainerVendorResponse2ᚖexampleᚋgraphᚋmodelᚐContainerVendorResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectEdges_build_requests(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CertificationProjectEdges_build_requests_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectBuildRequestPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectBuildRequestPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectEdges_scan_requests(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CertificationProjectEdges_scan_requests_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectScanRequestPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectScanRequestPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectEdges_tag_requests(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_CertificationProjectEdges_tag_requests_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTagRequestPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectTagRequestPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertificationProject)
	fc.Result = res
	return ec.marshalOCertificationProject2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationProject(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProject)
	fc.Result = res
	return ec.marshalOCertificationProject2ᚖexampleᚋgraphᚋmodelᚐCertificationProject(ctx, field.Selections, res)
}

func (ec *executionContext) _CertificationProjectResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CertificationProjectResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CertificationProjectResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactsItems_email_address(ctx context.Context, field graphql.CollectedField, obj *model.ContactsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOEmail2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactsItems_type(ctx context.Context, field graphql.CollectedField, obj *model.ContactsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerFile_filename(ctx context.Context, field graphql.CollectedField, obj *model.ContainerFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerFile_content(ctx context.Context, field graphql.CollectedField, obj *model.ContainerFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerFile_key(ctx context.Context, field graphql.CollectedField, obj *model.ContainerFile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerFilePaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerFilePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerFilePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerFile)
	fc.Result = res
	return ec.marshalOContainerFile2ᚕᚖexampleᚋgraphᚋmodelᚐContainerFile(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerFilePaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerFilePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerFilePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerFilePaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.ContainerFilePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerFilePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerFilePaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.ContainerFilePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerFilePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerFilePaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.ContainerFilePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerFilePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGrades_architecture(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Architecture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGrades_current_grade(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentGrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGrades_freshness_grades(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreshnessGrades, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FreshnessGrade)
	fc.Result = res
	return ec.marshalOFreshnessGrade2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGrades_image_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGrades_next_drop_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextDropDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGrades_tag(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGrades_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerGradesEdges)
	fc.Result = res
	return ec.marshalOContainerGradesEdges2ᚖexampleᚋgraphᚋmodelᚐContainerGradesEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGradesEdges_image(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGradesEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGradesEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGradesListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGradesListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGradesListResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerGrades)
	fc.Result = res
	return ec.marshalOContainerGrades2ᚕᚖexampleᚋgraphᚋmodelᚐContainerGrades(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerGradesListResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerGradesListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerGradesListResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_architecture(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Architecture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_brew(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brew, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Brew)
	fc.Result = res
	return ec.marshalOBrew2ᚖexampleᚋgraphᚋmodelᚐBrew(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_certifications(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Certification)
	fc.Result = res
	return ec.marshalOCertification2ᚕᚖexampleᚋgraphᚋmodelᚐCertification(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_content_sets(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentSets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_cpe_ids(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CpeIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_cpe_ids_rh_base_images(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CpeIdsRhBaseImages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_docker_image_digest(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DockerImageDigest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_docker_image_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DockerImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_freshness_grades(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreshnessGrades, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FreshnessGrade)
	fc.Result = res
	return ec.marshalOFreshnessGrade2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGrade(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_object_type(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_parsed_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParsedData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ParsedData)
	fc.Result = res
	return ec.marshalOParsedData2ᚖexampleᚋgraphᚋmodelᚐParsedData(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_repositories(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repositories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerImageRepo)
	fc.Result = res
	return ec.marshalOContainerImageRepo2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_scan_status(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_certified(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_image_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_isv_pid(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsvPid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_sum_layer_size_bytes(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumLayerSizeBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_top_layer_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopLayerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_uncompressed_top_layer_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UncompressedTopLayerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_raw_config(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage__id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImage_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageEdges)
	fc.Result = res
	return ec.marshalOContainerImageEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageEdges_rpm_manifest(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RpmManifest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRPMManifestResponse)
	fc.Result = res
	return ec.marshalOContainerImageRPMManifestResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageEdges_vulnerabilities(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerImageEdges_vulnerabilities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vulnerabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageVulnerabilityPaginatedResponse)
	fc.Result = res
	return ec.marshalOContainerImageVulnerabilityPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageEdges_test_results(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerImageEdges_test_results_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTestResultPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectTestResultPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageEdges_artifacts(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerImageEdges_artifacts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Artifacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectArtifactPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectArtifactPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImagePaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerImage)
	fc.Result = res
	return ec.marshalOContainerImage2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImage(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImagePaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImagePaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImagePaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImagePaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifest_image_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifest_object_type(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifest_rpms(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rpms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RpmsItems)
	fc.Result = res
	return ec.marshalORpmsItems2ᚕᚖexampleᚋgraphᚋmodelᚐRpmsItems(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifest__id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifest_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifest_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifest_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRPMManifestEdges)
	fc.Result = res
	return ec.marshalOContainerImageRPMManifestEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifestEdges_image(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifestEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifestEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifestResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifestResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifestResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRPMManifest)
	fc.Result = res
	return ec.marshalOContainerImageRPMManifest2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifest(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRPMManifestResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRPMManifestResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRPMManifestResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_comparison(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comparison, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRepoComparison)
	fc.Result = res
	return ec.marshalOContainerImageRepoComparison2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparison(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_content_advisory_ids(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentAdvisoryIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_image_advisory_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAdvisoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_manifest_list_digest(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManifestListDigest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_manifest_schema2_digest(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManifestSchema2Digest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_published(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_published_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_push_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_registry(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_repository(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_signatures(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signatures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignatureInfo)
	fc.Result = res
	return ec.marshalOSignatureInfo2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_tags(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerImageRepoTag)
	fc.Result = res
	return ec.marshalOContainerImageRepoTag2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTag(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepo_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRepoEdges)
	fc.Result = res
	return ec.marshalOContainerImageRepoEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparison_advisory_rpm_mapping(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparison) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparison",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvisoryRpmMapping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerImageRepoComparisonMapping)
	fc.Result = res
	return ec.marshalOContainerImageRepoComparisonMapping2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMapping(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparison_reason(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparison) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparison",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparison_reason_text(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparison) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparison",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparison_rpms(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparison) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparison",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rpms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRepoComparisonRPMs)
	fc.Result = res
	return ec.marshalOContainerImageRepoComparisonRPMs2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMs(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparison_with_nvr(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparison) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparison",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WithNvr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparisonMapping_advisory_ids(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparisonMapping) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparisonMapping",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvisoryIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparisonMapping_nvra(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparisonMapping) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparisonMapping",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nvra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparisonRPMs_downgrade(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparisonRPMs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparisonRPMs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Downgrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparisonRPMs_new(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparisonRPMs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparisonRPMs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.New, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparisonRPMs_remove(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparisonRPMs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparisonRPMs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remove, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoComparisonRPMs_upgrade(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoComparisonRPMs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoComparisonRPMs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Upgrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoEdges_image_advisory(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAdvisory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RedHatContainerAdvisoryResponse)
	fc.Result = res
	return ec.marshalORedHatContainerAdvisoryResponse2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoEdges_repository(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerRepositoryResponse)
	fc.Result = res
	return ec.marshalOContainerRepositoryResponse2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoTag_added_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoTag_manifest_schema1_digest(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManifestSchema1Digest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoTag_name(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoTag_removed_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemovedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoTag_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRepoTagEdges)
	fc.Result = res
	return ec.marshalOContainerImageRepoTagEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageRepoTagEdges_tag_history(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageRepoTagEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageRepoTagEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerTagHistoryResponse)
	fc.Result = res
	return ec.marshalOContainerTagHistoryResponse2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImage)
	fc.Result = res
	return ec.marshalOContainerImage2ᚖexampleᚋgraphᚋmodelᚐContainerImage(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_advisory_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvisoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_advisory_type(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvisoryType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_cve_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CveID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_object_type(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_packages(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Packages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerImageVulnerabilityPackage)
	fc.Result = res
	return ec.marshalOContainerImageVulnerabilityPackage2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackage(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_public_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_severity(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability__id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerability_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerability) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerability",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageVulnerabilityEdges)
	fc.Result = res
	return ec.marshalOContainerImageVulnerabilityEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityEdges_advisory(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Advisory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RedHatContainerAdvisoryResponse)
	fc.Result = res
	return ec.marshalORedHatContainerAdvisoryResponse2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByImage_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityFixedByImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityFixedByImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByImage_repositories(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityFixedByImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityFixedByImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repositories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerImageVulnerabilityFixedByRepository)
	fc.Result = res
	return ec.marshalOContainerImageVulnerabilityFixedByRepository2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByImage_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityFixedByImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityFixedByImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageVulnerabilityFixedByImageEdges)
	fc.Result = res
	return ec.marshalOContainerImageVulnerabilityFixedByImageEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByImageEdges_image(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityFixedByImageEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityFixedByImageEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByRepository_registry(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityFixedByRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityFixedByRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByRepository_repository(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityFixedByRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityFixedByRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByRepository_tags(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityFixedByRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityFixedByRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerImageVulnerabilityTag)
	fc.Result = res
	return ec.marshalOContainerImageVulnerabilityTag2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTag(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityPackage_fixed_by_image(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedByImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageVulnerabilityFixedByImage)
	fc.Result = res
	return ec.marshalOContainerImageVulnerabilityFixedByImage2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImage(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityPackage_srpm_nevra(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SrpmNevra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityPackage_rpm_nvra(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RpmNvra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerImageVulnerability)
	fc.Result = res
	return ec.marshalOContainerImageVulnerability2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageVulnerability)
	fc.Result = res
	return ec.marshalOContainerImageVulnerability2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerImageVulnerabilityTag_name(ctx context.Context, field graphql.CollectedField, obj *model.ContainerImageVulnerabilityTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerImageVulnerabilityTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_application_categories(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_architectures(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Architectures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_auto_rebuild_tags(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoRebuildTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_beta(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Beta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_build_categories(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_can_auto_release_cve_rebuild(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanAutoReleaseCveRebuild, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_cdn_base_url(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CdnBaseURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_content_sets(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentSets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_content_stream_grades(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentStreamGrades, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RepositoryContentStreamGrades)
	fc.Result = res
	return ec.marshalORepositoryContentStreamGrades2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGrades(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_content_stream_tags(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentStreamTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_deprecated(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_description(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_display_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RepositoryDisplayData)
	fc.Result = res
	return ec.marshalORepositoryDisplayData2ᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayData(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_documentation_links(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentationLinks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RepositoryDocumentationLink)
	fc.Result = res
	return ec.marshalORepositoryDocumentationLink2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLink(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_eol_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EolDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_freshness_grades_unknown_until_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreshnessGradesUnknownUntilDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_includes_multiple_content_streams(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncludesMultipleContentStreams, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_is_community_supported(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCommunitySupported, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_isv_pid(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsvPid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_label_override(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LabelOverride, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RepositoryLabelOverride)
	fc.Result = res
	return ec.marshalORepositoryLabelOverride2ᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverride(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_metrics(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RepositoryMetrics)
	fc.Result = res
	return ec.marshalORepositoryMetrics2ᚖexampleᚋgraphᚋmodelᚐRepositoryMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_namespace(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Namespace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_non_production_only(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonProductionOnly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_object_type(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_privileged_images_allowed(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivilegedImagesAllowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_prm_project_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrmProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_product_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_product_listings(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_product_versions(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductVersions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_protected_for_pull(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProtectedForPull, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_protected_for_search(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProtectedForSearch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_published(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_registry(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_registry_target(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistryTarget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_release_categories(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_replaced_by_repository_name(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplacedByRepositoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_repository(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_requires_terms(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresTerms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_runs_on(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunsOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RepositoryRunsOn)
	fc.Result = res
	return ec.marshalORepositoryRunsOn2ᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOn(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_source_container_image_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceContainerImageEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_support_levels(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportLevels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_tech_preview(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechPreview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_total_size_bytes(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalSizeBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_total_uncompressed_size_bytes(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalUncompressedSizeBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_ui_get_this_image_override(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UIGetThisImageOverride, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_vendor_label(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VendorLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository__id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepository_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerRepositoryEdges)
	fc.Result = res
	return ec.marshalOContainerRepositoryEdges2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryEdges_certification_project(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerRepositoryEdges_certification_project_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificationProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryEdges_images(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerRepositoryEdges_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImagePaginatedResponse)
	fc.Result = res
	return ec.marshalOContainerImagePaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImagePaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryEdges_product_listings(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerRepositoryEdges_product_listings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductListingPaginatedResponse)
	fc.Result = res
	return ec.marshalOProductListingPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐProductListingPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryEdges_operator_bundles(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerRepositoryEdges_operator_bundles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorBundles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatorBundlePaginatedResponse)
	fc.Result = res
	return ec.marshalOOperatorBundlePaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlePaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryEdges_replaced_by_repository(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplacedByRepository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerRepositoryResponse)
	fc.Result = res
	return ec.marshalOContainerRepositoryResponse2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryEdges_vendor(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vendor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerVendorResponse)
	fc.Result = res
	return ec.marshalOContainerVendorResponse2ᚖexampleᚋgraphᚋmodelᚐContainerVendorResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerRepository)
	fc.Result = res
	return ec.marshalOContainerRepository2ᚕᚖexampleᚋgraphᚋmodelᚐContainerRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerRepository)
	fc.Result = res
	return ec.marshalOContainerRepository2ᚖexampleᚋgraphᚋmodelᚐContainerRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerRepositoryResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerRepositoryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerRepositoryResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_object_type(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_registry(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_repository(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_tag(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_tag_type(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_history(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.History)
	fc.Result = res
	return ec.marshalOHistory2ᚕᚖexampleᚋgraphᚋmodelᚐHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory__id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistory_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerTagHistoryEdges)
	fc.Result = res
	return ec.marshalOContainerTagHistoryEdges2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistoryEdges_images(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistoryEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistoryEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerTagHistoryEdges_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImagePaginatedResponse)
	fc.Result = res
	return ec.marshalOContainerImagePaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImagePaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistoryPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerTagHistory)
	fc.Result = res
	return ec.marshalOContainerTagHistory2ᚕᚖexampleᚋgraphᚋmodelᚐContainerTagHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistoryPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistoryPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistoryPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistoryPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistoryResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistoryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistoryResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerTagHistory)
	fc.Result = res
	return ec.marshalOContainerTagHistory2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerTagHistoryResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerTagHistoryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerTagHistoryResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_company_url(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_contact(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerVendorContact)
	fc.Result = res
	return ec.marshalOContainerVendorContact2ᚖexampleᚋgraphᚋmodelᚐContainerVendorContact(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_description(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_drupal_company_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrupalCompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_industries(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_label(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_label_locked(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LabelLocked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_logo_url(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_name(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_object_type(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_published(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_registry_urls(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistryUrls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_rss_feed_url(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RssFeedURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_service_account_token(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceAccountToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_social_media_links(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialMediaLinks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContainerVendorSocialMediaLinks)
	fc.Result = res
	return ec.marshalOContainerVendorSocialMediaLinks2ᚕᚖexampleᚋgraphᚋmodelᚐContainerVendorSocialMediaLinks(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_org_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor__id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendor_edges(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerVendorEdges)
	fc.Result = res
	return ec.marshalOContainerVendorEdges2ᚖexampleᚋgraphᚋmodelᚐContainerVendorEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorContact_email(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorContact_phone(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorEdges_product_listings_org_id(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerVendorEdges_product_listings_org_id_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductListingsOrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductListingPaginatedResponse)
	fc.Result = res
	return ec.marshalOProductListingPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐProductListingPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorEdges_product_listings_label(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerVendorEdges_product_listings_label_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductListingsLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductListingPaginatedResponse)
	fc.Result = res
	return ec.marshalOProductListingPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐProductListingPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorEdges_repositories(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ContainerVendorEdges_repositories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repositories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerRepositoryPaginatedResponse)
	fc.Result = res
	return ec.marshalOContainerRepositoryPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerVendor)
	fc.Result = res
	return ec.marshalOContainerVendor2ᚖexampleᚋgraphᚋmodelᚐContainerVendor(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorSocialMediaLinks_name(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorSocialMediaLinks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorSocialMediaLinks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContainerVendorSocialMediaLinks_url(ctx context.Context, field graphql.CollectedField, obj *model.ContainerVendorSocialMediaLinks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContainerVendorSocialMediaLinks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Descriptions_long(ctx context.Context, field graphql.CollectedField, obj *model.Descriptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Descriptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Long, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Descriptions_short(ctx context.Context, field graphql.CollectedField, obj *model.Descriptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Descriptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Short, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FAQSItems_answer(ctx context.Context, field graphql.CollectedField, obj *model.FAQSItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FAQSItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FAQSItems_question(ctx context.Context, field graphql.CollectedField, obj *model.FAQSItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FAQSItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FeaturesItems_description(ctx context.Context, field graphql.CollectedField, obj *model.FeaturesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeaturesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FeaturesItems_title(ctx context.Context, field graphql.CollectedField, obj *model.FeaturesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeaturesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ForwarderStatus_forwarders(ctx context.Context, field graphql.CollectedField, obj *model.ForwarderStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ForwarderStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Forwarders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Forwarders)
	fc.Result = res
	return ec.marshalOForwarders2ᚖexampleᚋgraphᚋmodelᚐForwarders(ctx, field.Selections, res)
}

func (ec *executionContext) _ForwarderStatusInfo_status(ctx context.Context, field graphql.CollectedField, obj *model.ForwarderStatusInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ForwarderStatusInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ForwarderStatusResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ForwarderStatusResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ForwarderStatusResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ForwarderStatus)
	fc.Result = res
	return ec.marshalOForwarderStatus2ᚖexampleᚋgraphᚋmodelᚐForwarderStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ForwarderStatusResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ForwarderStatusResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ForwarderStatusResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _Forwarders_fluentd(ctx context.Context, field graphql.CollectedField, obj *model.Forwarders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Forwarders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fluentd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ForwarderStatusInfo)
	fc.Result = res
	return ec.marshalOForwarderStatusInfo2ᚖexampleᚋgraphᚋmodelᚐForwarderStatusInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FreshnessGrade_end_date(ctx context.Context, field graphql.CollectedField, obj *model.FreshnessGrade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FreshnessGrade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FreshnessGrade_grade(ctx context.Context, field graphql.CollectedField, obj *model.FreshnessGrade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FreshnessGrade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FreshnessGrade_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.FreshnessGrade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FreshnessGrade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FreshnessGrade_start_date(ctx context.Context, field graphql.CollectedField, obj *model.FreshnessGrade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FreshnessGrade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _History_brew_build(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrewBuild, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _History_end_date(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _History_start_date(ctx context.Context, field graphql.CollectedField, obj *model.History) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "History",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_id(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_issue_tracker(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueTracker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_url(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_name(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Label_value(ctx context.Context, field graphql.CollectedField, obj *model.Label) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Label",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Legal_description(ctx context.Context, field graphql.CollectedField, obj *model.Legal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Legal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Legal_license_agreement_url(ctx context.Context, field graphql.CollectedField, obj *model.Legal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Legal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseAgreementURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Legal_privacy_policy_url(ctx context.Context, field graphql.CollectedField, obj *model.Legal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Legal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivacyPolicyURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedResourcesItems_category(ctx context.Context, field graphql.CollectedField, obj *model.LinkedResourcesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LinkedResourcesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedResourcesItems_description(ctx context.Context, field graphql.CollectedField, obj *model.LinkedResourcesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LinkedResourcesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedResourcesItems_thumbnail_url(ctx context.Context, field graphql.CollectedField, obj *model.LinkedResourcesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LinkedResourcesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedResourcesItems_title(ctx context.Context, field graphql.CollectedField, obj *model.LinkedResourcesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LinkedResourcesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedResourcesItems_type(ctx context.Context, field graphql.CollectedField, obj *model.LinkedResourcesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LinkedResourcesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LinkedResourcesItems_url(ctx context.Context, field graphql.CollectedField, obj *model.LinkedResourcesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LinkedResourcesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Logo_url(ctx context.Context, field graphql.CollectedField, obj *model.Logo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Logo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Marketplace_enablement_status(ctx context.Context, field graphql.CollectedField, obj *model.Marketplace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Marketplace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnablementStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Marketplace_enablement_url(ctx context.Context, field graphql.CollectedField, obj *model.Marketplace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Marketplace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnablementURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Marketplace_listing_url(ctx context.Context, field graphql.CollectedField, obj *model.Marketplace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Marketplace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Marketplace_published(ctx context.Context, field graphql.CollectedField, obj *model.Marketplace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Marketplace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_image(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_image_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateImage(rctx, args["input"].(*model.ContainerImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_image(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_image_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateImage(rctx, args["id"].(*string), args["input"].(*model.ContainerImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_replace_image(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_replace_image_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceImage(rctx, args["id"].(*string), args["input"].(*model.ContainerImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_put_image_by_manifest_digest_registry_and_repository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_put_image_by_manifest_digest_registry_and_repository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PutImageByManifestDigestRegistryAndRepository(rctx, args["repository"].(*string), args["registry"].(*string), args["manifest_digest"].(*string), args["input"].(*model.ContainerImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_patch_image_by_manifest_digest_registry_and_repository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_patch_image_by_manifest_digest_registry_and_repository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchImageByManifestDigestRegistryAndRepository(rctx, args["repository"].(*string), args["registry"].(*string), args["manifest_digest"].(*string), args["input"].(*model.ContainerImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_image_rpm_manifest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_image_rpm_manifest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateImageRpmManifest(rctx, args["id"].(*string), args["input"].(*model.ContainerImageRPMManifestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRPMManifestResponse)
	fc.Result = res
	return ec.marshalOContainerImageRPMManifestResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_replace_image_rpm_manifest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_replace_image_rpm_manifest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceImageRpmManifest(rctx, args["id"].(*string), args["input"].(*model.ContainerImageRPMManifestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRPMManifestResponse)
	fc.Result = res
	return ec.marshalOContainerImageRPMManifestResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_image_rpm_manifest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_image_rpm_manifest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateImageRpmManifest(rctx, args["id"].(*string), args["input"].(*model.ContainerImageRPMManifestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRPMManifestResponse)
	fc.Result = res
	return ec.marshalOContainerImageRPMManifestResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_certification_project_build_request(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_certification_project_build_request_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCertificationProjectBuildRequest(rctx, args["id"].(*string), args["input"].(*model.CertProjectBuildRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectBuildRequestResponse)
	fc.Result = res
	return ec.marshalOCertProjectBuildRequestResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_certification_project_scan_request(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_certification_project_scan_request_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCertificationProjectScanRequest(rctx, args["id"].(*string), args["input"].(*model.CertProjectScanRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectScanRequestResponse)
	fc.Result = res
	return ec.marshalOCertProjectScanRequestResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_certification_project_tag_request(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_certification_project_tag_request_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCertificationProjectTagRequest(rctx, args["id"].(*string), args["input"].(*model.CertProjectTagRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTagRequestResponse)
	fc.Result = res
	return ec.marshalOCertProjectTagRequestResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vendor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vendor_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVendor(rctx, args["id"].(*string), args["input"].(*model.ContainerVendorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerVendorResponse)
	fc.Result = res
	return ec.marshalOContainerVendorResponse2ᚖexampleᚋgraphᚋmodelᚐContainerVendorResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_certification_project(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_certification_project_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCertificationProject(rctx, args["input"].(*model.CertificationProjectInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_certification_project(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_certification_project_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCertificationProject(rctx, args["id"].(*string), args["input"].(*model.CertificationProjectInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_replace_certification_project(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_replace_certification_project_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceCertificationProject(rctx, args["id"].(*string), args["input"].(*model.CertificationProjectInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_replace_product_listing(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_replace_product_listing_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceProductListing(rctx, args["id"].(*string), args["input"].(*model.ProductListingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductListingResponse)
	fc.Result = res
	return ec.marshalOProductListingResponse2ᚖexampleᚋgraphᚋmodelᚐProductListingResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_product_listing(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_product_listing_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProductListing(rctx, args["id"].(*string), args["input"].(*model.ProductListingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductListingResponse)
	fc.Result = res
	return ec.marshalOProductListingResponse2ᚖexampleᚋgraphᚋmodelᚐProductListingResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_product_listing(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_product_listing_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProductListing(rctx, args["input"].(*model.ProductListingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductListingResponse)
	fc.Result = res
	return ec.marshalOProductListingResponse2ᚖexampleᚋgraphᚋmodelᚐProductListingResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_api_key(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_api_key_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAPIKey(rctx, args["input"].(*model.APIKeyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.APIKeyResponse)
	fc.Result = res
	return ec.marshalOApiKeyResponse2ᚖexampleᚋgraphᚋmodelᚐAPIKeyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_api_key(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_api_key_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAPIKey(rctx, args["key_id"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.APIKeyResponse)
	fc.Result = res
	return ec.marshalOApiKeyResponse2ᚖexampleᚋgraphᚋmodelᚐAPIKeyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_certification_project_test_result(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_certification_project_test_result_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCertificationProjectTestResult(rctx, args["id"].(*string), args["input"].(*model.CertProjectTestResultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTestResultResponse)
	fc.Result = res
	return ec.marshalOCertProjectTestResultResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_certification_project_test_result(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_certification_project_test_result_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCertificationProjectTestResult(rctx, args["id"].(*string), args["input"].(*model.CertProjectTestResultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTestResultResponse)
	fc.Result = res
	return ec.marshalOCertProjectTestResultResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_create_certification_project_artifact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_create_certification_project_artifact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCertificationProjectArtifact(rctx, args["id"].(*string), args["input"].(*model.CertProjectTestResultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectArtifactResponse)
	fc.Result = res
	return ec.marshalOCertProjectArtifactResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_alm_examples(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlmExamples, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ALMExample)
	fc.Result = res
	return ec.marshalOALMExample2ᚕᚖexampleᚋgraphᚋmodelᚐALMExample(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_annotations(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatorBundleAnnotation)
	fc.Result = res
	return ec.marshalOOperatorBundleAnnotation2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_architectures(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Architectures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_bundle(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bundle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_bundle_path(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BundlePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_bundle_path_digest(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BundlePathDigest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_capabilities(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Capabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_channel_name(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_csv_name(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CSVName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_csv_display_name(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CSVDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_csv_description(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CSVDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_csv_metadata_description(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CSVMetadataDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_in_index_img(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InIndexImg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_install_modes(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallModes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OperatorBundleInstallMode)
	fc.Result = res
	return ec.marshalOOperatorBundleInstallMode2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallMode(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_is_default_channel(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefaultChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_latest_in_channel(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestInChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_ocp_version(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OcpVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOSemVer2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_organization(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_package(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_provided_apis(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvidedApis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProvidedAPIsItems)
	fc.Result = res
	return ec.marshalOProvidedAPIsItems2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItems(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_related_images(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedImages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RelatedImagesItems)
	fc.Result = res
	return ec.marshalORelatedImagesItems2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItems(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_source_index_container_path(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceIndexContainerPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_version(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOSemVer2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_version_original(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionOriginal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_replaces(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replaces, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_skips(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skips, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_skip_range(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle__id(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundle_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundleAnnotation_infrastructure_features(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundleAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundleAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InfrastructureFeatures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundleAnnotation_valid_subscription(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundleAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundleAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidSubscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundleInstallMode_supported(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundleInstallMode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundleInstallMode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supported, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundleInstallMode_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundleInstallMode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundleInstallMode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundlePaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundlePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundlePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OperatorBundle)
	fc.Result = res
	return ec.marshalOOperatorBundle2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundle(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundlePaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundlePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundlePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundlePaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundlePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundlePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundlePaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundlePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundlePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundlePaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundlePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundlePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundlesItems__id(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundlesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundlesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundlesItems_package(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundlesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundlesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorBundlesItems_capabilities(ctx context.Context, field graphql.CollectedField, obj *model.OperatorBundlesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorBundlesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Capabilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndex_ocp_version(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndex) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndex",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OcpVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOSemVer2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndex_organization(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndex) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndex",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndex_path(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndex) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndex",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndex_end_of_life(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndex) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndex",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndOfLife, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndex__id(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndex) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndex",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndex_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndex) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndex",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndex_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndex) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndex",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndexPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndexPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndexPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OperatorIndex)
	fc.Result = res
	return ec.marshalOOperatorIndex2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorIndex(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndexPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndexPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndexPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndexPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndexPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndexPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndexPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndexPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndexPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndexPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndexPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndexPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndexResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndexResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndexResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatorIndex)
	fc.Result = res
	return ec.marshalOOperatorIndex2ᚖexampleᚋgraphᚋmodelᚐOperatorIndex(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorIndexResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.OperatorIndexResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorIndexResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackage_association(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Association, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackage_package_name(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackage_source(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackage__id(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOObjectID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackage_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackage_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackagePaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OperatorPackage)
	fc.Result = res
	return ec.marshalOOperatorPackage2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorPackage(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackagePaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackagePaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackagePaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackagePaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackagePaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackagePaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackageResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackageResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackageResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatorPackage)
	fc.Result = res
	return ec.marshalOOperatorPackage2ᚖexampleᚋgraphᚋmodelᚐOperatorPackage(ctx, field.Selections, res)
}

func (ec *executionContext) _OperatorPackageResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.OperatorPackageResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OperatorPackageResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_architecture(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Architecture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_author(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_command(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Command, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_comment(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_container(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Container, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_created(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_docker_image_digest(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DockerImageDigest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_docker_image_id(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DockerImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_docker_version(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DockerVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_env_variables(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvVariables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_image_id(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_labels(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Label)
	fc.Result = res
	return ec.marshalOLabel2ᚕᚖexampleᚋgraphᚋmodelᚐLabel(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_layers(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Layers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_os(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Os, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_ports(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ports, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_repos(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ParsedDataRepo)
	fc.Result = res
	return ec.marshalOParsedDataRepo2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepo(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_size(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_uncompressed_layer_sizes(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UncompressedLayerSizes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UncompressedLayerSize)
	fc.Result = res
	return ec.marshalOUncompressedLayerSize2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSize(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_uncompressed_size_bytes(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UncompressedSizeBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_user(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedData_virtual_size(ctx context.Context, field graphql.CollectedField, obj *model.ParsedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VirtualSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedDataRepo_baseurl(ctx context.Context, field graphql.CollectedField, obj *model.ParsedDataRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedDataRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Baseurl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedDataRepo_expire(ctx context.Context, field graphql.CollectedField, obj *model.ParsedDataRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedDataRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedDataRepo_filename(ctx context.Context, field graphql.CollectedField, obj *model.ParsedDataRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedDataRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedDataRepo_id(ctx context.Context, field graphql.CollectedField, obj *model.ParsedDataRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedDataRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedDataRepo_name(ctx context.Context, field graphql.CollectedField, obj *model.ParsedDataRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedDataRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedDataRepo_pkgs(ctx context.Context, field graphql.CollectedField, obj *model.ParsedDataRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedDataRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pkgs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedDataRepo_size(ctx context.Context, field graphql.CollectedField, obj *model.ParsedDataRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedDataRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ParsedDataRepo_updated(ctx context.Context, field graphql.CollectedField, obj *model.ParsedDataRepo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParsedDataRepo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_badges(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BadgesItems)
	fc.Result = res
	return ec.marshalOBadgesItems2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItems(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_category(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_cert_projects(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertProjects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_contacts(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ContactsItems)
	fc.Result = res
	return ec.marshalOContactsItems2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItems(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_descriptions(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descriptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Descriptions)
	fc.Result = res
	return ec.marshalODescriptions2ᚖexampleᚋgraphᚋmodelᚐDescriptions(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_drupal_company_id(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrupalCompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_faqs(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faqs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FAQSItems)
	fc.Result = res
	return ec.marshalOFAQSItems2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItems(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_features(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Features, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FeaturesItems)
	fc.Result = res
	return ec.marshalOFeaturesItems2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItems(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_functional_categories(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FunctionalCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_legal(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Legal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Legal)
	fc.Result = res
	return ec.marshalOLegal2ᚖexampleᚋgraphᚋmodelᚐLegal(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_linked_resources(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedResources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LinkedResourcesItems)
	fc.Result = res
	return ec.marshalOLinkedResourcesItems2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItems(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_logo(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Logo)
	fc.Result = res
	return ec.marshalOLogo2ᚖexampleᚋgraphᚋmodelᚐLogo(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_marketplace(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marketplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Marketplace)
	fc.Result = res
	return ec.marshalOMarketplace2ᚖexampleᚋgraphᚋmodelᚐMarketplace(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_name(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_published(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_quick_start_configuration(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuickStartConfiguration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.QuickStartConfiguration)
	fc.Result = res
	return ec.marshalOQuickStartConfiguration2ᚖexampleᚋgraphᚋmodelᚐQuickStartConfiguration(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_repositories(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repositories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_search_aliases(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SearchAliases, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SearchAliasesItems)
	fc.Result = res
	return ec.marshalOSearchAliasesItems2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItems(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_support(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Support, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Support)
	fc.Result = res
	return ec.marshalOSupport2ᚖexampleᚋgraphᚋmodelᚐSupport(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_type(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_vendor_label(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VendorLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_operator_bundles(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorBundles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OperatorBundlesItems)
	fc.Result = res
	return ec.marshalOOperatorBundlesItems2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItems(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_org_id(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing__id(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListing_edges(ctx context.Context, field graphql.CollectedField, obj *model.ProductListing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductListingEdges)
	fc.Result = res
	return ec.marshalOProductListingEdges2ᚖexampleᚋgraphᚋmodelᚐProductListingEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListingEdges_vendor(ctx context.Context, field graphql.CollectedField, obj *model.ProductListingEdges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListingEdges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vendor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerVendorResponse)
	fc.Result = res
	return ec.marshalOContainerVendorResponse2ᚖexampleᚋgraphᚋmodelᚐContainerVendorResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListingPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ProductListingPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListingPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductListing)
	fc.Result = res
	return ec.marshalOProductListing2ᚕᚖexampleᚋgraphᚋmodelᚐProductListing(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListingPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ProductListingPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListingPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListingPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.ProductListingPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListingPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListingPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.ProductListingPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListingPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListingPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.ProductListingPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListingPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListingResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ProductListingResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListingResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductListing)
	fc.Result = res
	return ec.marshalOProductListing2ᚖexampleᚋgraphᚋmodelᚐProductListing(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListingResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ProductListingResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProductListingResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _ProvidedAPIsItems_group(ctx context.Context, field graphql.CollectedField, obj *model.ProvidedAPIsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProvidedAPIsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProvidedAPIsItems_kind(ctx context.Context, field graphql.CollectedField, obj *model.ProvidedAPIsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProvidedAPIsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProvidedAPIsItems_plural(ctx context.Context, field graphql.CollectedField, obj *model.ProvidedAPIsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProvidedAPIsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plural, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProvidedAPIsItems_version(ctx context.Context, field graphql.CollectedField, obj *model.ProvidedAPIsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProvidedAPIsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_url(ctx context.Context, field graphql.CollectedField, obj *model.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_id(ctx context.Context, field graphql.CollectedField, obj *model.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_status(ctx context.Context, field graphql.CollectedField, obj *model.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_image(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_image_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetImage(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageResponse)
	fc.Result = res
	return ec.marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_find_images(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_find_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindImages(rctx, args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.ContainerImageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImagePaginatedResponse)
	fc.Result = res
	return ec.marshalOContainerImagePaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImagePaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_cert_project_test_result(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_cert_project_test_result_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCertProjectTestResult(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTestResultResponse)
	fc.Result = res
	return ec.marshalOCertProjectTestResultResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_cert_project_test_results(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_cert_project_test_results_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCertProjectTestResults(rctx, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.CertProjectTestResultFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTestResultPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectTestResultPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_test_results_by_image_id(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_test_results_by_image_id_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTestResultsByImageID(rctx, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.CertProjectTestResultFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectTestResultPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectTestResultPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_cert_project_artifact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_cert_project_artifact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCertProjectArtifact(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectArtifactResponse)
	fc.Result = res
	return ec.marshalOCertProjectArtifactResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_cert_project_artifacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_cert_project_artifacts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCertProjectArtifacts(rctx, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.CertProjectArtifactFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectArtifactPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectArtifactPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_certification_artifacts_by_image_id(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_certification_artifacts_by_image_id_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCertificationArtifactsByImageID(rctx, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.CertProjectArtifactFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertProjectArtifactPaginatedResponse)
	fc.Result = res
	return ec.marshalOCertProjectArtifactPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactPaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_rpm_manifest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_rpm_manifest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRpmManifest(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRPMManifestResponse)
	fc.Result = res
	return ec.marshalOContainerImageRPMManifestResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_image_rpm_manifest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_image_rpm_manifest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetImageRpmManifest(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImageRPMManifestResponse)
	fc.Result = res
	return ec.marshalOContainerImageRPMManifestResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_certification_project(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_certification_project_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCertificationProject(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get_certification_project_by_pid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get_certification_project_by_pid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCertificationProjectByPid(rctx, args["pid"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CertificationProjectResponse)
	fc.Result = res
	return ec.marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_find_certification_projects_images(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_find_certification_projects_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindCertificationProjectsImages(rctx, args["id"].(*string), args["sort_by"].([]*model.SortBy), args["page"].(*int), args["page_size"].(*int), args["filter"].(*model.ContainerImageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContainerImagePaginatedResponse)
	fc.Result = res
	return ec.marshalOContainerImagePaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImagePaginatedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _QuickStartConfiguration_instructions(ctx context.Context, field graphql.CollectedField, obj *model.QuickStartConfiguration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QuickStartConfiguration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instructions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory__id(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_content_type(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_description(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_object_type(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_severity(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_ship_date(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_solution(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Solution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_synopsis(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Synopsis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_topic(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_type(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_cves(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cves, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Cve)
	fc.Result = res
	return ec.marshalOCVE2ᚕᚖexampleᚋgraphᚋmodelᚐCve(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_issues(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Issue)
	fc.Result = res
	return ec.marshalOIssue2ᚕᚖexampleᚋgraphᚋmodelᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_creation_date(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisory_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisoryPaginatedResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RedHatContainerAdvisory)
	fc.Result = res
	return ec.marshalORedHatContainerAdvisory2ᚕᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisory(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisoryPaginatedResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisoryPaginatedResponse_page(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisoryPaginatedResponse_page_size(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisoryPaginatedResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisoryPaginatedResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisoryPaginatedResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisoryResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisoryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisoryResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RedHatContainerAdvisory)
	fc.Result = res
	return ec.marshalORedHatContainerAdvisory2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisory(ctx, field.Selections, res)
}

func (ec *executionContext) _RedHatContainerAdvisoryResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.RedHatContainerAdvisoryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RedHatContainerAdvisoryResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _RelatedImagesItems_digest(ctx context.Context, field graphql.CollectedField, obj *model.RelatedImagesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RelatedImagesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Digest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelatedImagesItems_image(ctx context.Context, field graphql.CollectedField, obj *model.RelatedImagesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RelatedImagesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RelatedImagesItems_name(ctx context.Context, field graphql.CollectedField, obj *model.RelatedImagesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RelatedImagesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryContentStreamGrades_tag(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryContentStreamGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryContentStreamGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryContentStreamGrades_grade(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryContentStreamGrades) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryContentStreamGrades",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryDisplayData_long_description(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryDisplayData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryDisplayData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LongDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryDisplayData_long_description_markdown(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryDisplayData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryDisplayData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LongDescriptionMarkdown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryDisplayData_name(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryDisplayData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryDisplayData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryDisplayData_openshift_tags(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryDisplayData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryDisplayData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenshiftTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryDisplayData_short_description(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryDisplayData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryDisplayData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryDocumentationLink_title(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryDocumentationLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryDocumentationLink",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryDocumentationLink_type(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryDocumentationLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryDocumentationLink",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryDocumentationLink_url(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryDocumentationLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryDocumentationLink",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryLabelOverride_description(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryLabelOverride) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryLabelOverride",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryLabelOverride_io_k8s_displayName(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryLabelOverride) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryLabelOverride",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IoK8sDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryLabelOverride_io_openshift_tags(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryLabelOverride) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryLabelOverride",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IoOpenshiftTags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryLabelOverride_summary(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryLabelOverride) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryLabelOverride",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryMetrics_last_update_date(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryMetrics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryMetrics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryMetrics_pulls_in_last_30_days(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryMetrics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryMetrics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PullsInLast30Days, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryRunsOn_openshift_online(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryRunsOn) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryRunsOn",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenshiftOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseError_status(ctx context.Context, field graphql.CollectedField, obj *model.ResponseError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseError",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseError_detail(ctx context.Context, field graphql.CollectedField, obj *model.ResponseError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseError",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Detail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Results_failed(ctx context.Context, field graphql.CollectedField, obj *model.Results) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Results",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Failed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TestResults)
	fc.Result = res
	return ec.marshalOTestResults2ᚕᚖexampleᚋgraphᚋmodelᚐTestResults(ctx, field.Selections, res)
}

func (ec *executionContext) _Results_errors(ctx context.Context, field graphql.CollectedField, obj *model.Results) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Results",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TestResults)
	fc.Result = res
	return ec.marshalOTestResults2ᚕᚖexampleᚋgraphᚋmodelᚐTestResults(ctx, field.Selections, res)
}

func (ec *executionContext) _Results_passed(ctx context.Context, field graphql.CollectedField, obj *model.Results) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Results",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TestResults)
	fc.Result = res
	return ec.marshalOTestResults2ᚕᚖexampleᚋgraphᚋmodelᚐTestResults(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_architecture(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Architecture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_gpg(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gpg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_name(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_nvra(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nvra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_release(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_srpm_name(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SrpmName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_srpm_nevra(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SrpmNevra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_summary(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RpmsItems_version(ctx context.Context, field graphql.CollectedField, obj *model.RpmsItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RpmsItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SearchAliasesItems_key(ctx context.Context, field graphql.CollectedField, obj *model.SearchAliasesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SearchAliasesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SearchAliasesItems_value(ctx context.Context, field graphql.CollectedField, obj *model.SearchAliasesItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SearchAliasesItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SignatureInfo_key_long_id(ctx context.Context, field graphql.CollectedField, obj *model.SignatureInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SignatureInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyLongID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SignatureInfo_tags(ctx context.Context, field graphql.CollectedField, obj *model.SignatureInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SignatureInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StringResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.StringResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StringResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StringResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.StringResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StringResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResponseError)
	fc.Result = res
	return ec.marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx, field.Selections, res)
}

func (ec *executionContext) _Support_description(ctx context.Context, field graphql.CollectedField, obj *model.Support) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Support",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Support_email_address(ctx context.Context, field graphql.CollectedField, obj *model.Support) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Support",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOEmail2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Support_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.Support) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Support",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Support_url(ctx context.Context, field graphql.CollectedField, obj *model.Support) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Support",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestLibrary_commit(ctx context.Context, field graphql.CollectedField, obj *model.TestLibrary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestLibrary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Commit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestLibrary_name(ctx context.Context, field graphql.CollectedField, obj *model.TestLibrary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestLibrary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestLibrary_version(ctx context.Context, field graphql.CollectedField, obj *model.TestLibrary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestLibrary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestResults_check_url(ctx context.Context, field graphql.CollectedField, obj *model.TestResults) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestResults",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestResults_description(ctx context.Context, field graphql.CollectedField, obj *model.TestResults) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestResults",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestResults_elapsed_time(ctx context.Context, field graphql.CollectedField, obj *model.TestResults) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestResults",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElapsedTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _TestResults_help(ctx context.Context, field graphql.CollectedField, obj *model.TestResults) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestResults",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Help, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestResults_knowledgebase_url(ctx context.Context, field graphql.CollectedField, obj *model.TestResults) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestResults",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KnowledgebaseURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOURI2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestResults_name(ctx context.Context, field graphql.CollectedField, obj *model.TestResults) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestResults",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestResults_suggestion(ctx context.Context, field graphql.CollectedField, obj *model.TestResults) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestResults",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suggestion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestedOn_name(ctx context.Context, field graphql.CollectedField, obj *model.TestedOn) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestedOn",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestedOn_version(ctx context.Context, field graphql.CollectedField, obj *model.TestedOn) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TestedOn",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UncompressedLayerSize_layer_id(ctx context.Context, field graphql.CollectedField, obj *model.UncompressedLayerSize) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UncompressedLayerSize",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LayerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UncompressedLayerSize_size_bytes(ctx context.Context, field graphql.CollectedField, obj *model.UncompressedLayerSize) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UncompressedLayerSize",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputALMExampleElemMatchFilter(ctx context.Context, obj interface{}) (model.ALMExampleElemMatchFilter, error) {
	var it model.ALMExampleElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOALMExampleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOALMExampleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOALMExampleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOALMExampleFilter2ᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputALMExampleFilter(ctx context.Context, obj interface{}) (model.ALMExampleFilter, error) {
	var it model.ALMExampleFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "api_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("api_version"))
			it.APIVersion, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "metadata":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
			it.Metadata, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "spec":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spec"))
			it.Spec, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOALMExampleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOALMExampleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOALMExampleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOALMExampleFilter2ᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApiKeyInput(ctx context.Context, obj interface{}) (model.APIKeyInput, error) {
	var it model.APIKeyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_id"))
			it.CompanyID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_used":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_used"))
			it.LastUsed, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAssessmentElemMatchFilter(ctx context.Context, obj interface{}) (model.AssessmentElemMatchFilter, error) {
	var it model.AssessmentElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAssessmentFilter2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAssessmentFilter2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOAssessmentFilter2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOAssessmentFilter2ᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAssessmentFilter(ctx context.Context, obj interface{}) (model.AssessmentFilter, error) {
	var it model.AssessmentFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "required_for_certification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("required_for_certification"))
			it.RequiredForCertification, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAssessmentFilter2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAssessmentFilter2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOAssessmentFilter2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOAssessmentFilter2ᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAssessmentInput(ctx context.Context, obj interface{}) (model.AssessmentInput, error) {
	var it model.AssessmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "required_for_certification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("required_for_certification"))
			it.RequiredForCertification, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBadgesItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.BadgesItemsElemMatchFilter, error) {
	var it model.BadgesItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOBadgesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOBadgesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOBadgesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOBadgesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBadgesItemsFilter(ctx context.Context, obj interface{}) (model.BadgesItemsFilter, error) {
	var it model.BadgesItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "badge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("badge"))
			it.Badge, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOBadgesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOBadgesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOBadgesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOBadgesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBadgesItemsInput(ctx context.Context, obj interface{}) (model.BadgesItemsInput, error) {
	var it model.BadgesItemsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "badge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("badge"))
			it.Badge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_id"))
			it.ProjectID, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanFilter(ctx context.Context, obj interface{}) (model.BooleanFilter, error) {
	var it model.BooleanFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBrewFilter(ctx context.Context, obj interface{}) (model.BrewFilter, error) {
	var it model.BrewFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "build":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build"))
			it.Build, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "completion_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completion_date"))
			it.CompletionDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nvra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nvra"))
			it.Nvra, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "package":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package"))
			it.Package, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOBrewFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBrewFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOBrewFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBrewFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOBrewFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBrewFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOBrewFilter2ᚖexampleᚋgraphᚋmodelᚐBrewFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBrewInput(ctx context.Context, obj interface{}) (model.BrewInput, error) {
	var it model.BrewInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "build":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build"))
			it.Build, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "completion_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completion_date"))
			it.CompletionDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nvra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nvra"))
			it.Nvra, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "package":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package"))
			it.Package, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCVEElemMatchFilter(ctx context.Context, obj interface{}) (model.CVEElemMatchFilter, error) {
	var it model.CVEElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCVEFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCVEFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCVEFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCVEFilter2ᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCVEFilter(ctx context.Context, obj interface{}) (model.CVEFilter, error) {
	var it model.CVEFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCVEFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCVEFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCVEFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCVEFilter2ᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectArtifactFilter(ctx context.Context, obj interface{}) (model.CertProjectArtifactFilter, error) {
	var it model.CertProjectArtifactFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_package_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_package_name"))
			it.OperatorPackageName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_hash"))
			it.CertificationHash, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_type"))
			it.ContentType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "filename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			it.Filename, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_size"))
			it.FileSize, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectArtifactFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectArtifactFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectArtifactFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectArtifactFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectBuildRequestFilter(ctx context.Context, obj interface{}) (model.CertProjectBuildRequestFilter, error) {
	var it model.CertProjectBuildRequestFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_message"))
			it.StatusMessage, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectBuildRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectBuildRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectBuildRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectBuildRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectBuildRequestInput(ctx context.Context, obj interface{}) (model.CertProjectBuildRequestInput, error) {
	var it model.CertProjectBuildRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_message"))
			it.StatusMessage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectContactsElemMatchFilter(ctx context.Context, obj interface{}) (model.CertProjectContactsElemMatchFilter, error) {
	var it model.CertProjectContactsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectContactsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectContactsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectContactsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectContactsFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectContactsFilter(ctx context.Context, obj interface{}) (model.CertProjectContactsFilter, error) {
	var it model.CertProjectContactsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "email_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_address"))
			it.EmailAddress, err = ec.unmarshalOEmailFilter2ᚖexampleᚋgraphᚋmodelᚐEmailFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectContactsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectContactsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectContactsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectContactsFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectContactsInput(ctx context.Context, obj interface{}) (model.CertProjectContactsInput, error) {
	var it model.CertProjectContactsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "email_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_address"))
			it.EmailAddress, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectContainerFilter(ctx context.Context, obj interface{}) (model.CertProjectContainerFilter, error) {
	var it model.CertProjectContainerFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "application_categories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories_size"))
			it.ApplicationCategoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_categories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories_index"))
			it.ApplicationCategoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories"))
			it.ApplicationCategories, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "auto_publish":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auto_publish"))
			it.AutoPublish, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "auto_rebuild":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auto_rebuild"))
			it.AutoRebuild, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "distribution_approval":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distribution_approval"))
			it.DistributionApproval, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "distribution_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distribution_method"))
			it.DistributionMethod, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isv_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isv_pid"))
			it.IsvPid, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "kube_objects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kube_objects"))
			it.KubeObjects, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_config_json":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_config_json"))
			it.DockerConfigJSON, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "os_content_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("os_content_type"))
			it.OsContentType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed_rhcert":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed_rhcert"))
			it.PassedRhcert, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "privileged":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privileged"))
			it.Privileged, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
			it.Registry, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry_override_instruct":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry_override_instruct"))
			it.RegistryOverrideInstruct, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "release_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("release_category"))
			it.ReleaseCategory, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository_description"))
			it.RepositoryDescription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository_name"))
			it.RepositoryName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_account_secret":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_account_secret"))
			it.ServiceAccountSecret, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "short_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("short_description"))
			it.ShortDescription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "support_platforms_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support_platforms_size"))
			it.SupportPlatformsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "support_platforms_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support_platforms_index"))
			it.SupportPlatformsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "support_platforms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support_platforms"))
			it.SupportPlatforms, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_dockerfile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_dockerfile"))
			it.SourceDockerfile, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_no_cache":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_no_cache"))
			it.BuildNoCache, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_context_dir":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_context_dir"))
			it.SourceContextDir, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_service":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_service"))
			it.BuildService, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_ref":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_ref"))
			it.SourceRef, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_uri":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_uri"))
			it.SourceURI, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_ssh_private_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_ssh_private_key"))
			it.SourceSSHPrivateKey, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_usernames_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_usernames_size"))
			it.GithubUsernamesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_usernames_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_usernames_index"))
			it.GithubUsernamesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_usernames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_usernames"))
			it.GithubUsernames, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectContainerFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContainerFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectContainerFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContainerFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectContainerFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContainerFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectContainerFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainerFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectContainerInput(ctx context.Context, obj interface{}) (model.CertProjectContainerInput, error) {
	var it model.CertProjectContainerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "application_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories"))
			it.ApplicationCategories, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "auto_publish":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auto_publish"))
			it.AutoPublish, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "auto_rebuild":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auto_rebuild"))
			it.AutoRebuild, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "distribution_approval":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distribution_approval"))
			it.DistributionApproval, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "distribution_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distribution_method"))
			it.DistributionMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isv_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isv_pid"))
			it.IsvPid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "kube_objects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kube_objects"))
			it.KubeObjects, err = ec.unmarshalOOpenPGPEncrypted2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_config_json":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_config_json"))
			it.DockerConfigJSON, err = ec.unmarshalOOpenPGPEncrypted2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "os_content_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("os_content_type"))
			it.OsContentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed_rhcert":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed_rhcert"))
			it.PassedRhcert, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "privileged":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privileged"))
			it.Privileged, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
			it.Registry, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry_override_instruct":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry_override_instruct"))
			it.RegistryOverrideInstruct, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "release_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("release_category"))
			it.ReleaseCategory, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository_description"))
			it.RepositoryDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository_name"))
			it.RepositoryName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_account_secret":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_account_secret"))
			it.ServiceAccountSecret, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "short_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("short_description"))
			it.ShortDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "support_platforms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support_platforms"))
			it.SupportPlatforms, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_dockerfile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_dockerfile"))
			it.SourceDockerfile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_no_cache":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_no_cache"))
			it.BuildNoCache, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_context_dir":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_context_dir"))
			it.SourceContextDir, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_service":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_service"))
			it.BuildService, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_ref":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_ref"))
			it.SourceRef, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_uri":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_uri"))
			it.SourceURI, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_ssh_private_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_ssh_private_key"))
			it.SourceSSHPrivateKey, err = ec.unmarshalOBase64OpenPGPEncrypted2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_usernames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_usernames"))
			it.GithubUsernames, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectDrupalFilter(ctx context.Context, obj interface{}) (model.CertProjectDrupalFilter, error) {
	var it model.CertProjectDrupalFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "company_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_id"))
			it.CompanyID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "relation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relation"))
			it.Relation, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "zone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zone"))
			it.Zone, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectDrupalFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectDrupalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectDrupalFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectDrupalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectDrupalFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectDrupalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectDrupalFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectDrupalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectDrupalInput(ctx context.Context, obj interface{}) (model.CertProjectDrupalInput, error) {
	var it model.CertProjectDrupalInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "company_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_id"))
			it.CompanyID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "relation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relation"))
			it.Relation, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "zone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zone"))
			it.Zone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectHelmChartFilter(ctx context.Context, obj interface{}) (model.CertProjectHelmChartFilter, error) {
	var it model.CertProjectHelmChartFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "distribution_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distribution_method"))
			it.DistributionMethod, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "chart_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chart_name"))
			it.ChartName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "distribution_instructions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distribution_instructions"))
			it.DistributionInstructions, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "public_pgp_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public_pgp_key"))
			it.PublicPGPKey, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_pull_request":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_pull_request"))
			it.GithubPullRequest, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "short_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("short_description"))
			it.ShortDescription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "long_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("long_description"))
			it.LongDescription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_categories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories_size"))
			it.ApplicationCategoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_categories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories_index"))
			it.ApplicationCategoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories"))
			it.ApplicationCategories, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_usernames_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_usernames_size"))
			it.GithubUsernamesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_usernames_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_usernames_index"))
			it.GithubUsernamesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_usernames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_usernames"))
			it.GithubUsernames, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectHelmChartFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectHelmChartFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectHelmChartFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectHelmChartFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectHelmChartInput(ctx context.Context, obj interface{}) (model.CertProjectHelmChartInput, error) {
	var it model.CertProjectHelmChartInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "distribution_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distribution_method"))
			it.DistributionMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "chart_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chart_name"))
			it.ChartName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "distribution_instructions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distribution_instructions"))
			it.DistributionInstructions, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "public_pgp_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public_pgp_key"))
			it.PublicPGPKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_pull_request":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_pull_request"))
			it.GithubPullRequest, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "short_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("short_description"))
			it.ShortDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "long_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("long_description"))
			it.LongDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories"))
			it.ApplicationCategories, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "github_usernames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github_usernames"))
			it.GithubUsernames, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectMarketplaceFilter(ctx context.Context, obj interface{}) (model.CertProjectMarketplaceFilter, error) {
	var it model.CertProjectMarketplaceFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "enablement_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablement_status"))
			it.EnablementStatus, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "enablement_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablement_url"))
			it.EnablementURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "listing_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("listing_url"))
			it.ListingURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectMarketplaceFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectMarketplaceFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectMarketplaceFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectMarketplaceFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectMarketplaceInput(ctx context.Context, obj interface{}) (model.CertProjectMarketplaceInput, error) {
	var it model.CertProjectMarketplaceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "enablement_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablement_status"))
			it.EnablementStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enablement_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablement_url"))
			it.EnablementURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "listing_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("listing_url"))
			it.ListingURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectRedhatFilter(ctx context.Context, obj interface{}) (model.CertProjectRedhatFilter, error) {
	var it model.CertProjectRedhatFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "product_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_id"))
			it.ProductID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_name"))
			it.ProductName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_version"))
			it.ProductVersion, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_version_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_version_id"))
			it.ProductVersionID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectRedhatFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectRedhatFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectRedhatFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectRedhatFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectRedhatInput(ctx context.Context, obj interface{}) (model.CertProjectRedhatInput, error) {
	var it model.CertProjectRedhatInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "product_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_id"))
			it.ProductID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_name"))
			it.ProductName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_version"))
			it.ProductVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_version_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_version_id"))
			it.ProductVersionID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectScanRequestFilter(ctx context.Context, obj interface{}) (model.CertProjectScanRequestFilter, error) {
	var it model.CertProjectScanRequestFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "external_tests_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("external_tests_link"))
			it.ExternalTestsLink, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "pull_spec":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pull_spec"))
			it.PullSpec, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "scan_uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scan_uuid"))
			it.ScanUUID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_message"))
			it.StatusMessage, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectScanRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectScanRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectScanRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectScanRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectScanRequestInput(ctx context.Context, obj interface{}) (model.CertProjectScanRequestInput, error) {
	var it model.CertProjectScanRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "external_tests_link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("external_tests_link"))
			it.ExternalTestsLink, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pull_spec":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pull_spec"))
			it.PullSpec, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scan_uuid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scan_uuid"))
			it.ScanUUID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_message"))
			it.StatusMessage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectSelfCertificationFilter(ctx context.Context, obj interface{}) (model.CertProjectSelfCertificationFilter, error) {
	var it model.CertProjectSelfCertificationFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "app_profiler":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_profiler"))
			it.AppProfiler, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_runs_on_app_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_runs_on_app_type"))
			it.AppRunsOnAppType, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "auth_login":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auth_login"))
			it.AuthLogin, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_url"))
			it.CertificationURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "comm_support_on_app_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comm_support_on_app_type"))
			it.CommSupportOnAppType, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "requested":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requested"))
			it.Requested, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tsanet_member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tsanet_member"))
			it.TsanetMember, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectSelfCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectSelfCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectSelfCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectSelfCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectSelfCertificationInput(ctx context.Context, obj interface{}) (model.CertProjectSelfCertificationInput, error) {
	var it model.CertProjectSelfCertificationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "app_profiler":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_profiler"))
			it.AppProfiler, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_runs_on_app_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_runs_on_app_type"))
			it.AppRunsOnAppType, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "auth_login":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auth_login"))
			it.AuthLogin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_url"))
			it.CertificationURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comm_support_on_app_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comm_support_on_app_type"))
			it.CommSupportOnAppType, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "requested":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requested"))
			it.Requested, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tsanet_member":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tsanet_member"))
			it.TsanetMember, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectTagRequestFilter(ctx context.Context, obj interface{}) (model.CertProjectTagRequestFilter, error) {
	var it model.CertProjectTagRequestFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation"))
			it.Operation, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_message"))
			it.StatusMessage, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectTagRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectTagRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectTagRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectTagRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectTagRequestInput(ctx context.Context, obj interface{}) (model.CertProjectTagRequestInput, error) {
	var it model.CertProjectTagRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation"))
			it.Operation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status_message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status_message"))
			it.StatusMessage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectTestResultFilter(ctx context.Context, obj interface{}) (model.CertProjectTestResultFilter, error) {
	var it model.CertProjectTestResultFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_hash"))
			it.CertificationHash, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_package_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_package_name"))
			it.OperatorPackageName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed"))
			it.Passed, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("results"))
			it.Results, err = ec.unmarshalOResultsFilter2ᚖexampleᚋgraphᚋmodelᚐResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "test_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("test_library"))
			it.TestLibrary, err = ec.unmarshalOTestLibraryFilter2ᚖexampleᚋgraphᚋmodelᚐTestLibraryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "pull_request":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pull_request"))
			it.PullRequest, err = ec.unmarshalOPullRequestFilter2ᚖexampleᚋgraphᚋmodelᚐPullRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tested_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tested_on"))
			it.TestedOn, err = ec.unmarshalOTestedOnFilter2ᚖexampleᚋgraphᚋmodelᚐTestedOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertProjectTestResultFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertProjectTestResultFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertProjectTestResultFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertProjectTestResultFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertProjectTestResultInput(ctx context.Context, obj interface{}) (model.CertProjectTestResultInput, error) {
	var it model.CertProjectTestResultInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "cert_project":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_project"))
			it.CertProject, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_hash"))
			it.CertificationHash, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_package_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_package_name"))
			it.OperatorPackageName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed"))
			it.Passed, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("results"))
			it.Results, err = ec.unmarshalOResultsInput2ᚖexampleᚋgraphᚋmodelᚐResultsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "test_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("test_library"))
			it.TestLibrary, err = ec.unmarshalOTestLibraryInput2ᚖexampleᚋgraphᚋmodelᚐTestLibraryInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pull_request":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pull_request"))
			it.PullRequest, err = ec.unmarshalOPullRequestInput2ᚖexampleᚋgraphᚋmodelᚐPullRequestInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tested_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tested_on"))
			it.TestedOn, err = ec.unmarshalOTestedOnInput2ᚖexampleᚋgraphᚋmodelᚐTestedOnInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertificationElemMatchFilter(ctx context.Context, obj interface{}) (model.CertificationElemMatchFilter, error) {
	var it model.CertificationElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertificationFilter(ctx context.Context, obj interface{}) (model.CertificationFilter, error) {
	var it model.CertificationFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "assessment_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assessment_size"))
			it.AssessmentSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "assessment_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assessment_index"))
			it.AssessmentIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "assessment_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assessment_elemMatch"))
			it.AssessmentElemMatch, err = ec.unmarshalOAssessmentElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐAssessmentElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "assessment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assessment"))
			it.Assessment, err = ec.unmarshalOAssessmentFilter2ᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertificationInput(ctx context.Context, obj interface{}) (model.CertificationInput, error) {
	var it model.CertificationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "assessment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assessment"))
			it.Assessment, err = ec.unmarshalOAssessmentInput2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertificationProjectFilter(ctx context.Context, obj interface{}) (model.CertificationProjectFilter, error) {
	var it model.CertificationProjectFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "certification_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_date"))
			it.CertificationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_status"))
			it.CertificationStatus, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_user"))
			it.CertificationUser, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts_size"))
			it.ContactsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts_index"))
			it.ContactsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts_elemMatch"))
			it.ContactsElemMatch, err = ec.unmarshalOCertProjectContactsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			it.Contacts, err = ec.unmarshalOCertProjectContactsFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "container":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("container"))
			it.Container, err = ec.unmarshalOCertProjectContainerFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainerFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "helm_chart":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("helm_chart"))
			it.HelmChart, err = ec.unmarshalOCertProjectHelmChartFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "drupal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drupal"))
			it.Drupal, err = ec.unmarshalOCertProjectDrupalFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectDrupalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "marketplace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketplace"))
			it.Marketplace, err = ec.unmarshalOCertProjectMarketplaceFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_distribution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_distribution"))
			it.OperatorDistribution, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_listings_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_listings_size"))
			it.ProductListingsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_listings_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_listings_index"))
			it.ProductListingsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_listings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_listings"))
			it.ProductListings, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_status"))
			it.ProjectStatus, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_by"))
			it.PublishedBy, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "redhat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redhat"))
			it.Redhat, err = ec.unmarshalOCertProjectRedhatFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_certification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_certification"))
			it.SelfCertification, err = ec.unmarshalOCertProjectSelfCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOCertificationProjectFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationProjectFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOCertificationProjectFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationProjectFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOCertificationProjectFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationProjectFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOCertificationProjectFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCertificationProjectInput(ctx context.Context, obj interface{}) (model.CertificationProjectInput, error) {
	var it model.CertificationProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "certification_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_date"))
			it.CertificationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_status"))
			it.CertificationStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certification_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certification_user"))
			it.CertificationUser, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			it.Contacts, err = ec.unmarshalOCertProjectContactsInput2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "container":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("container"))
			it.Container, err = ec.unmarshalOCertProjectContainerInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainerInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "helm_chart":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("helm_chart"))
			it.HelmChart, err = ec.unmarshalOCertProjectHelmChartInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "marketplace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketplace"))
			it.Marketplace, err = ec.unmarshalOCertProjectMarketplaceInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_distribution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_distribution"))
			it.OperatorDistribution, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_listings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_listings"))
			it.ProductListings, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_status"))
			it.ProjectStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_by"))
			it.PublishedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "redhat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redhat"))
			it.Redhat, err = ec.unmarshalOCertProjectRedhatInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_certification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_certification"))
			it.SelfCertification, err = ec.unmarshalOCertProjectSelfCertificationInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactsItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.ContactsItemsElemMatchFilter, error) {
	var it model.ContactsItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContactsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContactsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContactsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContactsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactsItemsFilter(ctx context.Context, obj interface{}) (model.ContactsItemsFilter, error) {
	var it model.ContactsItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "email_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_address"))
			it.EmailAddress, err = ec.unmarshalOEmailFilter2ᚖexampleᚋgraphᚋmodelᚐEmailFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContactsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContactsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContactsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContactsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactsItemsInput(ctx context.Context, obj interface{}) (model.ContactsItemsInput, error) {
	var it model.ContactsItemsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "email_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_address"))
			it.EmailAddress, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerFileFilter(ctx context.Context, obj interface{}) (model.ContainerFileFilter, error) {
	var it model.ContainerFileFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "filename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			it.Filename, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerFileFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerFileFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerFileFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerFileFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerFileFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerFileFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerFileFilter2ᚖexampleᚋgraphᚋmodelᚐContainerFileFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageFilter(ctx context.Context, obj interface{}) (model.ContainerImageFilter, error) {
	var it model.ContainerImageFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "architecture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architecture"))
			it.Architecture, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "brew":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brew"))
			it.Brew, err = ec.unmarshalOBrewFilter2ᚖexampleᚋgraphᚋmodelᚐBrewFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certifications_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certifications_size"))
			it.CertificationsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certifications_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certifications_index"))
			it.CertificationsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certifications_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certifications_elemMatch"))
			it.CertificationsElemMatch, err = ec.unmarshalOCertificationElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certifications"))
			it.Certifications, err = ec.unmarshalOCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_sets_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_sets_size"))
			it.ContentSetsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_sets_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_sets_index"))
			it.ContentSetsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_sets":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_sets"))
			it.ContentSets, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpe_ids_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpe_ids_size"))
			it.CpeIdsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpe_ids_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpe_ids_index"))
			it.CpeIdsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpe_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpe_ids"))
			it.CpeIds, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpe_ids_rh_base_images_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpe_ids_rh_base_images_size"))
			it.CpeIdsRhBaseImagesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpe_ids_rh_base_images_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpe_ids_rh_base_images_index"))
			it.CpeIdsRhBaseImagesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpe_ids_rh_base_images":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpe_ids_rh_base_images"))
			it.CpeIdsRhBaseImages, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_image_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_image_digest"))
			it.DockerImageDigest, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_image_id"))
			it.DockerImageID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "freshness_grades_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freshness_grades_size"))
			it.FreshnessGradesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "freshness_grades_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freshness_grades_index"))
			it.FreshnessGradesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "freshness_grades_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freshness_grades_elemMatch"))
			it.FreshnessGradesElemMatch, err = ec.unmarshalOFreshnessGradeElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "freshness_grades":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freshness_grades"))
			it.FreshnessGrades, err = ec.unmarshalOFreshnessGradeFilter2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "object_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object_type"))
			it.ObjectType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "parsed_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parsed_data"))
			it.ParsedData, err = ec.unmarshalOParsedDataFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories_size"))
			it.RepositoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories_index"))
			it.RepositoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories_elemMatch"))
			it.RepositoriesElemMatch, err = ec.unmarshalOContainerImageRepoElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories"))
			it.Repositories, err = ec.unmarshalOContainerImageRepoFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "scan_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scan_status"))
			it.ScanStatus, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "certified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certified"))
			it.Certified, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted"))
			it.Deleted, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isv_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isv_pid"))
			it.IsvPid, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum_layer_size_bytes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum_layer_size_bytes"))
			it.SumLayerSizeBytes, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "top_layer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("top_layer_id"))
			it.TopLayerID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_top_layer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_top_layer_id"))
			it.UncompressedTopLayerID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "raw_config":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("raw_config"))
			it.RawConfig, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageInput(ctx context.Context, obj interface{}) (model.ContainerImageInput, error) {
	var it model.ContainerImageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "architecture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architecture"))
			it.Architecture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brew":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brew"))
			it.Brew, err = ec.unmarshalOBrewInput2ᚖexampleᚋgraphᚋmodelᚐBrewInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_sets":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_sets"))
			it.ContentSets, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpe_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpe_ids"))
			it.CpeIds, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpe_ids_rh_base_images":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpe_ids_rh_base_images"))
			it.CpeIdsRhBaseImages, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_image_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_image_digest"))
			it.DockerImageDigest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_image_id"))
			it.DockerImageID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "freshness_grades":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freshness_grades"))
			it.FreshnessGrades, err = ec.unmarshalOFreshnessGradeInput2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "object_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object_type"))
			it.ObjectType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parsed_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parsed_data"))
			it.ParsedData, err = ec.unmarshalOParsedDataInput2ᚖexampleᚋgraphᚋmodelᚐParsedDataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories"))
			it.Repositories, err = ec.unmarshalOContainerImageRepoInput2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "certified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certified"))
			it.Certified, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted"))
			it.Deleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isv_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isv_pid"))
			it.IsvPid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum_layer_size_bytes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum_layer_size_bytes"))
			it.SumLayerSizeBytes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "top_layer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("top_layer_id"))
			it.TopLayerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_top_layer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_top_layer_id"))
			it.UncompressedTopLayerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "raw_config":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("raw_config"))
			it.RawConfig, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRPMManifestInput(ctx context.Context, obj interface{}) (model.ContainerImageRPMManifestInput, error) {
	var it model.ContainerImageRPMManifestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "object_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object_type"))
			it.ObjectType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rpms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rpms"))
			it.Rpms, err = ec.unmarshalORpmsItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐRpmsItemsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoComparisonFilter(ctx context.Context, obj interface{}) (model.ContainerImageRepoComparisonFilter, error) {
	var it model.ContainerImageRepoComparisonFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "advisory_rpm_mapping_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_rpm_mapping_size"))
			it.AdvisoryRpmMappingSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "advisory_rpm_mapping_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_rpm_mapping_index"))
			it.AdvisoryRpmMappingIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "advisory_rpm_mapping_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_rpm_mapping_elemMatch"))
			it.AdvisoryRpmMappingElemMatch, err = ec.unmarshalOContainerImageRepoComparisonMappingElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "advisory_rpm_mapping":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_rpm_mapping"))
			it.AdvisoryRpmMapping, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason_text"))
			it.ReasonText, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "rpms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rpms"))
			it.Rpms, err = ec.unmarshalOContainerImageRepoComparisonRPMsFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "with_nvr":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("with_nvr"))
			it.WithNvr, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageRepoComparisonFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageRepoComparisonFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageRepoComparisonFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageRepoComparisonFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoComparisonInput(ctx context.Context, obj interface{}) (model.ContainerImageRepoComparisonInput, error) {
	var it model.ContainerImageRepoComparisonInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "advisory_rpm_mapping":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_rpm_mapping"))
			it.AdvisoryRpmMapping, err = ec.unmarshalOContainerImageRepoComparisonMappingInput2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason_text"))
			it.ReasonText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rpms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rpms"))
			it.Rpms, err = ec.unmarshalOContainerImageRepoComparisonRPMsInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "with_nvr":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("with_nvr"))
			it.WithNvr, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoComparisonMappingElemMatchFilter(ctx context.Context, obj interface{}) (model.ContainerImageRepoComparisonMappingElemMatchFilter, error) {
	var it model.ContainerImageRepoComparisonMappingElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoComparisonMappingFilter(ctx context.Context, obj interface{}) (model.ContainerImageRepoComparisonMappingFilter, error) {
	var it model.ContainerImageRepoComparisonMappingFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "advisory_ids_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_ids_size"))
			it.AdvisoryIdsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "advisory_ids_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_ids_index"))
			it.AdvisoryIdsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "advisory_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_ids"))
			it.AdvisoryIds, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nvra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nvra"))
			it.Nvra, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoComparisonMappingInput(ctx context.Context, obj interface{}) (model.ContainerImageRepoComparisonMappingInput, error) {
	var it model.ContainerImageRepoComparisonMappingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "advisory_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_ids"))
			it.AdvisoryIds, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nvra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nvra"))
			it.Nvra, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoComparisonRPMsFilter(ctx context.Context, obj interface{}) (model.ContainerImageRepoComparisonRPMsFilter, error) {
	var it model.ContainerImageRepoComparisonRPMsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "downgrade_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downgrade_size"))
			it.DowngradeSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "downgrade_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downgrade_index"))
			it.DowngradeIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "downgrade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downgrade"))
			it.Downgrade, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_size"))
			it.NewSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_index"))
			it.NewIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new"))
			it.New, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove_size"))
			it.RemoveSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove_index"))
			it.RemoveIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "upgrade_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upgrade_size"))
			it.UpgradeSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "upgrade_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upgrade_index"))
			it.UpgradeIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "upgrade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upgrade"))
			it.Upgrade, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageRepoComparisonRPMsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageRepoComparisonRPMsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageRepoComparisonRPMsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageRepoComparisonRPMsFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoComparisonRPMsInput(ctx context.Context, obj interface{}) (model.ContainerImageRepoComparisonRPMsInput, error) {
	var it model.ContainerImageRepoComparisonRPMsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "downgrade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("downgrade"))
			it.Downgrade, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new"))
			it.New, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remove"))
			it.Remove, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "upgrade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upgrade"))
			it.Upgrade, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoElemMatchFilter(ctx context.Context, obj interface{}) (model.ContainerImageRepoElemMatchFilter, error) {
	var it model.ContainerImageRepoElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageRepoFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoFilter(ctx context.Context, obj interface{}) (model.ContainerImageRepoFilter, error) {
	var it model.ContainerImageRepoFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "comparison":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comparison"))
			it.Comparison, err = ec.unmarshalOContainerImageRepoComparisonFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_advisory_ids_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_advisory_ids_size"))
			it.ContentAdvisoryIdsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_advisory_ids_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_advisory_ids_index"))
			it.ContentAdvisoryIdsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_advisory_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_advisory_ids"))
			it.ContentAdvisoryIds, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_advisory_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_advisory_id"))
			it.ImageAdvisoryID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "manifest_list_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manifest_list_digest"))
			it.ManifestListDigest, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "manifest_schema2_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manifest_schema2_digest"))
			it.ManifestSchema2Digest, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_date"))
			it.PublishedDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "push_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("push_date"))
			it.PushDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
			it.Registry, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "signatures_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signatures_size"))
			it.SignaturesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "signatures_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signatures_index"))
			it.SignaturesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "signatures_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signatures_elemMatch"))
			it.SignaturesElemMatch, err = ec.unmarshalOSignatureInfoElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "signatures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signatures"))
			it.Signatures, err = ec.unmarshalOSignatureInfoFilter2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags_size"))
			it.TagsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags_index"))
			it.TagsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags_elemMatch"))
			it.TagsElemMatch, err = ec.unmarshalOContainerImageRepoTagElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOContainerImageRepoTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageRepoFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoInput(ctx context.Context, obj interface{}) (model.ContainerImageRepoInput, error) {
	var it model.ContainerImageRepoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "comparison":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comparison"))
			it.Comparison, err = ec.unmarshalOContainerImageRepoComparisonInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_advisory_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_advisory_ids"))
			it.ContentAdvisoryIds, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_advisory_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_advisory_id"))
			it.ImageAdvisoryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "manifest_list_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manifest_list_digest"))
			it.ManifestListDigest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "manifest_schema2_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manifest_schema2_digest"))
			it.ManifestSchema2Digest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "published_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published_date"))
			it.PublishedDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "push_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("push_date"))
			it.PushDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
			it.Registry, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "signatures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signatures"))
			it.Signatures, err = ec.unmarshalOSignatureInfoInput2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOContainerImageRepoTagInput2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoTagElemMatchFilter(ctx context.Context, obj interface{}) (model.ContainerImageRepoTagElemMatchFilter, error) {
	var it model.ContainerImageRepoTagElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageRepoTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageRepoTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageRepoTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageRepoTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoTagFilter(ctx context.Context, obj interface{}) (model.ContainerImageRepoTagFilter, error) {
	var it model.ContainerImageRepoTagFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "added_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("added_date"))
			it.AddedDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "manifest_schema1_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manifest_schema1_digest"))
			it.ManifestSchema1Digest, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "removed_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removed_date"))
			it.RemovedDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageRepoTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageRepoTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageRepoTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageRepoTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageRepoTagInput(ctx context.Context, obj interface{}) (model.ContainerImageRepoTagInput, error) {
	var it model.ContainerImageRepoTagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "added_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("added_date"))
			it.AddedDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "manifest_schema1_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manifest_schema1_digest"))
			it.ManifestSchema1Digest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "removed_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removed_date"))
			it.RemovedDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageVulnerabilityFilter(ctx context.Context, obj interface{}) (model.ContainerImageVulnerabilityFilter, error) {
	var it model.ContainerImageVulnerabilityFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "advisory_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_id"))
			it.AdvisoryID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "advisory_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advisory_type"))
			it.AdvisoryType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve_id"))
			it.CveID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "object_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object_type"))
			it.ObjectType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "packages_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packages_size"))
			it.PackagesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "packages_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packages_index"))
			it.PackagesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "packages_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packages_elemMatch"))
			it.PackagesElemMatch, err = ec.unmarshalOContainerImageVulnerabilityPackageElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "packages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packages"))
			it.Packages, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "public_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public_date"))
			it.PublicDate, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			it.Severity, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageVulnerabilityFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageVulnerabilityFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageVulnerabilityFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageVulnerabilityFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageVulnerabilityFixedByImageFilter(ctx context.Context, obj interface{}) (model.ContainerImageVulnerabilityFixedByImageFilter, error) {
	var it model.ContainerImageVulnerabilityFixedByImageFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories_size"))
			it.RepositoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories_index"))
			it.RepositoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories_elemMatch"))
			it.RepositoriesElemMatch, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories"))
			it.Repositories, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageVulnerabilityFixedByImageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageVulnerabilityFixedByImageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageVulnerabilityFixedByImageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageVulnerabilityFixedByImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageVulnerabilityFixedByRepositoryElemMatchFilter(ctx context.Context, obj interface{}) (model.ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter, error) {
	var it model.ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageVulnerabilityFixedByRepositoryFilter(ctx context.Context, obj interface{}) (model.ContainerImageVulnerabilityFixedByRepositoryFilter, error) {
	var it model.ContainerImageVulnerabilityFixedByRepositoryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "registry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
			it.Registry, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags_size"))
			it.TagsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags_index"))
			it.TagsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags_elemMatch"))
			it.TagsElemMatch, err = ec.unmarshalOContainerImageVulnerabilityTagElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageVulnerabilityPackageElemMatchFilter(ctx context.Context, obj interface{}) (model.ContainerImageVulnerabilityPackageElemMatchFilter, error) {
	var it model.ContainerImageVulnerabilityPackageElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageVulnerabilityPackageFilter(ctx context.Context, obj interface{}) (model.ContainerImageVulnerabilityPackageFilter, error) {
	var it model.ContainerImageVulnerabilityPackageFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "fixed_by_image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fixed_by_image"))
			it.FixedByImage, err = ec.unmarshalOContainerImageVulnerabilityFixedByImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "srpm_nevra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("srpm_nevra"))
			it.SrpmNevra, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "rpm_nvra_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rpm_nvra_size"))
			it.RpmNvraSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "rpm_nvra_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rpm_nvra_index"))
			it.RpmNvraIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "rpm_nvra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rpm_nvra"))
			it.RpmNvra, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageVulnerabilityTagElemMatchFilter(ctx context.Context, obj interface{}) (model.ContainerImageVulnerabilityTagElemMatchFilter, error) {
	var it model.ContainerImageVulnerabilityTagElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerImageVulnerabilityTagFilter(ctx context.Context, obj interface{}) (model.ContainerImageVulnerabilityTagFilter, error) {
	var it model.ContainerImageVulnerabilityTagFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerRepositoryFilter(ctx context.Context, obj interface{}) (model.ContainerRepositoryFilter, error) {
	var it model.ContainerRepositoryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "application_categories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories_size"))
			it.ApplicationCategoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_categories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories_index"))
			it.ApplicationCategoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "application_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("application_categories"))
			it.ApplicationCategories, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "architectures_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectures_size"))
			it.ArchitecturesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "architectures_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectures_index"))
			it.ArchitecturesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "architectures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectures"))
			it.Architectures, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "auto_rebuild_tags_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auto_rebuild_tags_size"))
			it.AutoRebuildTagsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "auto_rebuild_tags_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auto_rebuild_tags_index"))
			it.AutoRebuildTagsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "auto_rebuild_tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auto_rebuild_tags"))
			it.AutoRebuildTags, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "beta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("beta"))
			it.Beta, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_categories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_categories_size"))
			it.BuildCategoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_categories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_categories_index"))
			it.BuildCategoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_categories"))
			it.BuildCategories, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "can_auto_release_cve_rebuild":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("can_auto_release_cve_rebuild"))
			it.CanAutoReleaseCveRebuild, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cdn_base_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cdn_base_url"))
			it.CdnBaseURL, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_sets_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_sets_size"))
			it.ContentSetsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_sets_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_sets_index"))
			it.ContentSetsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_sets":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_sets"))
			it.ContentSets, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_stream_grades_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_stream_grades_size"))
			it.ContentStreamGradesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_stream_grades_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_stream_grades_index"))
			it.ContentStreamGradesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_stream_grades_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_stream_grades_elemMatch"))
			it.ContentStreamGradesElemMatch, err = ec.unmarshalORepositoryContentStreamGradesElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_stream_grades":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_stream_grades"))
			it.ContentStreamGrades, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_stream_tags_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_stream_tags_size"))
			it.ContentStreamTagsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_stream_tags_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_stream_tags_index"))
			it.ContentStreamTagsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_stream_tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_stream_tags"))
			it.ContentStreamTags, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deprecated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deprecated"))
			it.Deprecated, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_data"))
			it.DisplayData, err = ec.unmarshalORepositoryDisplayDataFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentation_links_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentation_links_size"))
			it.DocumentationLinksSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentation_links_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentation_links_index"))
			it.DocumentationLinksIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentation_links_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentation_links_elemMatch"))
			it.DocumentationLinksElemMatch, err = ec.unmarshalORepositoryDocumentationLinkElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentation_links":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentation_links"))
			it.DocumentationLinks, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "eol_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eol_date"))
			it.EolDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "freshness_grades_unknown_until_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freshness_grades_unknown_until_date"))
			it.FreshnessGradesUnknownUntilDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "includes_multiple_content_streams":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includes_multiple_content_streams"))
			it.IncludesMultipleContentStreams, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_community_supported":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_community_supported"))
			it.IsCommunitySupported, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isv_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isv_pid"))
			it.IsvPid, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "label_override":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label_override"))
			it.LabelOverride, err = ec.unmarshalORepositoryLabelOverrideFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverrideFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "metrics":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metrics"))
			it.Metrics, err = ec.unmarshalORepositoryMetricsFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryMetricsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "namespace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
			it.Namespace, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "non_production_only":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("non_production_only"))
			it.NonProductionOnly, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "object_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object_type"))
			it.ObjectType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "privileged_images_allowed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privileged_images_allowed"))
			it.PrivilegedImagesAllowed, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "prm_project_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prm_project_id"))
			it.PrmProjectID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_id"))
			it.ProductID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_listings_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_listings_size"))
			it.ProductListingsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_listings_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_listings_index"))
			it.ProductListingsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_listings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_listings"))
			it.ProductListings, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_versions_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_versions_size"))
			it.ProductVersionsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_versions_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_versions_index"))
			it.ProductVersionsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "product_versions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("product_versions"))
			it.ProductVersions, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "protected_for_pull":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protected_for_pull"))
			it.ProtectedForPull, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "protected_for_search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protected_for_search"))
			it.ProtectedForSearch, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
			it.Registry, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry_target":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry_target"))
			it.RegistryTarget, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "release_categories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("release_categories_size"))
			it.ReleaseCategoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "release_categories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("release_categories_index"))
			it.ReleaseCategoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "release_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("release_categories"))
			it.ReleaseCategories, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "replaced_by_repository_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replaced_by_repository_name"))
			it.ReplacedByRepositoryName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "requires_terms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requires_terms"))
			it.RequiresTerms, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "runs_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runs_on"))
			it.RunsOn, err = ec.unmarshalORepositoryRunsOnFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_container_image_enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_container_image_enabled"))
			it.SourceContainerImageEnabled, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "support_levels_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support_levels_size"))
			it.SupportLevelsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "support_levels_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support_levels_index"))
			it.SupportLevelsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "support_levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support_levels"))
			it.SupportLevels, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tech_preview":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tech_preview"))
			it.TechPreview, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_size_bytes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_size_bytes"))
			it.TotalSizeBytes, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_uncompressed_size_bytes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_uncompressed_size_bytes"))
			it.TotalUncompressedSizeBytes, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "ui_get_this_image_override":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ui_get_this_image_override"))
			it.UIGetThisImageOverride, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_label"))
			it.VendorLabel, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerTagHistoryFilter(ctx context.Context, obj interface{}) (model.ContainerTagHistoryFilter, error) {
	var it model.ContainerTagHistoryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "object_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object_type"))
			it.ObjectType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry"))
			it.Registry, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repository":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repository"))
			it.Repository, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_type"))
			it.TagType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "history_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("history_size"))
			it.HistorySize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "history_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("history_index"))
			it.HistoryIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "history_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("history_elemMatch"))
			it.HistoryElemMatch, err = ec.unmarshalOHistoryElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐHistoryElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("history"))
			it.History, err = ec.unmarshalOHistoryFilter2ᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOContainerTagHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOContainerTagHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOContainerTagHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOContainerTagHistoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerVendorContactInput(ctx context.Context, obj interface{}) (model.ContainerVendorContactInput, error) {
	var it model.ContainerVendorContactInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerVendorInput(ctx context.Context, obj interface{}) (model.ContainerVendorInput, error) {
	var it model.ContainerVendorInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "company_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_url"))
			it.CompanyURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			it.Contact, err = ec.unmarshalOContainerVendorContactInput2ᚖexampleᚋgraphᚋmodelᚐContainerVendorContactInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drupal_company_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drupal_company_id"))
			it.DrupalCompanyID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "industries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industries"))
			it.Industries, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			it.Label, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "label_locked":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label_locked"))
			it.LabelLocked, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo_url"))
			it.LogoURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "object_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object_type"))
			it.ObjectType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "registry_urls":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registry_urls"))
			it.RegistryUrls, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rss_feed_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rss_feed_url"))
			it.RssFeedURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_account_token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_account_token"))
			it.ServiceAccountToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "social_media_links":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("social_media_links"))
			it.SocialMediaLinks, err = ec.unmarshalOContainerVendorSocialMediaLinksInput2ᚕᚖexampleᚋgraphᚋmodelᚐContainerVendorSocialMediaLinksInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContainerVendorSocialMediaLinksInput(ctx context.Context, obj interface{}) (model.ContainerVendorSocialMediaLinksInput, error) {
	var it model.ContainerVendorSocialMediaLinksInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateTimeFilter(ctx context.Context, obj interface{}) (model.DateTimeFilter, error) {
	var it model.DateTimeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalODateTime2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDescriptionsFilter(ctx context.Context, obj interface{}) (model.DescriptionsFilter, error) {
	var it model.DescriptionsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "long":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("long"))
			it.Long, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "short":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("short"))
			it.Short, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalODescriptionsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐDescriptionsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalODescriptionsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐDescriptionsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalODescriptionsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐDescriptionsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalODescriptionsFilter2ᚖexampleᚋgraphᚋmodelᚐDescriptionsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDescriptionsInput(ctx context.Context, obj interface{}) (model.DescriptionsInput, error) {
	var it model.DescriptionsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "long":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("long"))
			it.Long, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "short":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("short"))
			it.Short, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailFilter(ctx context.Context, obj interface{}) (model.EmailFilter, error) {
	var it model.EmailFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOEmail2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFAQSItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.FAQSItemsElemMatchFilter, error) {
	var it model.FAQSItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOFAQSItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOFAQSItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOFAQSItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOFAQSItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFAQSItemsFilter(ctx context.Context, obj interface{}) (model.FAQSItemsFilter, error) {
	var it model.FAQSItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "question":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("question"))
			it.Question, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOFAQSItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOFAQSItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOFAQSItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOFAQSItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFAQSItemsInput(ctx context.Context, obj interface{}) (model.FAQSItemsInput, error) {
	var it model.FAQSItemsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "question":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("question"))
			it.Question, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFeaturesItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.FeaturesItemsElemMatchFilter, error) {
	var it model.FeaturesItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOFeaturesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOFeaturesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOFeaturesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOFeaturesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFeaturesItemsFilter(ctx context.Context, obj interface{}) (model.FeaturesItemsFilter, error) {
	var it model.FeaturesItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOFeaturesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOFeaturesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOFeaturesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOFeaturesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFeaturesItemsInput(ctx context.Context, obj interface{}) (model.FeaturesItemsInput, error) {
	var it model.FeaturesItemsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatFilter(ctx context.Context, obj interface{}) (model.FloatFilter, error) {
	var it model.FloatFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOFloat2ᚕᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFreshnessGradeElemMatchFilter(ctx context.Context, obj interface{}) (model.FreshnessGradeElemMatchFilter, error) {
	var it model.FreshnessGradeElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOFreshnessGradeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOFreshnessGradeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOFreshnessGradeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOFreshnessGradeFilter2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFreshnessGradeFilter(ctx context.Context, obj interface{}) (model.FreshnessGradeFilter, error) {
	var it model.FreshnessGradeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOFreshnessGradeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOFreshnessGradeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOFreshnessGradeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOFreshnessGradeFilter2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFreshnessGradeInput(ctx context.Context, obj interface{}) (model.FreshnessGradeInput, error) {
	var it model.FreshnessGradeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHistoryElemMatchFilter(ctx context.Context, obj interface{}) (model.HistoryElemMatchFilter, error) {
	var it model.HistoryElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOHistoryFilter2ᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHistoryFilter(ctx context.Context, obj interface{}) (model.HistoryFilter, error) {
	var it model.HistoryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "brew_build":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brew_build"))
			it.BrewBuild, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOHistoryFilter2ᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj interface{}) (model.IntFilter, error) {
	var it model.IntFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueElemMatchFilter(ctx context.Context, obj interface{}) (model.IssueElemMatchFilter, error) {
	var it model.IssueElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOIssueFilter2ᚕᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOIssueFilter2ᚕᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOIssueFilter2ᚕᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOIssueFilter2ᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIssueFilter(ctx context.Context, obj interface{}) (model.IssueFilter, error) {
	var it model.IssueFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "issue_tracker":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issue_tracker"))
			it.IssueTracker, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOIssueFilter2ᚕᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOIssueFilter2ᚕᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOIssueFilter2ᚕᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOIssueFilter2ᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelElemMatchFilter(ctx context.Context, obj interface{}) (model.LabelElemMatchFilter, error) {
	var it model.LabelElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLabelFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLabelFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOLabelFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLabelFilter2ᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelFilter(ctx context.Context, obj interface{}) (model.LabelFilter, error) {
	var it model.LabelFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLabelFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLabelFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOLabelFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLabelFilter2ᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelInput(ctx context.Context, obj interface{}) (model.LabelInput, error) {
	var it model.LabelInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLegalFilter(ctx context.Context, obj interface{}) (model.LegalFilter, error) {
	var it model.LegalFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_agreement_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_agreement_url"))
			it.LicenseAgreementURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "privacy_policy_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privacy_policy_url"))
			it.PrivacyPolicyURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLegalFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLegalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLegalFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLegalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOLegalFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLegalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLegalFilter2ᚖexampleᚋgraphᚋmodelᚐLegalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLegalInput(ctx context.Context, obj interface{}) (model.LegalInput, error) {
	var it model.LegalInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_agreement_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_agreement_url"))
			it.LicenseAgreementURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "privacy_policy_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privacy_policy_url"))
			it.PrivacyPolicyURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLinkedResourcesItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.LinkedResourcesItemsElemMatchFilter, error) {
	var it model.LinkedResourcesItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLinkedResourcesItemsFilter(ctx context.Context, obj interface{}) (model.LinkedResourcesItemsFilter, error) {
	var it model.LinkedResourcesItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "thumbnail_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnail_url"))
			it.ThumbnailURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLinkedResourcesItemsInput(ctx context.Context, obj interface{}) (model.LinkedResourcesItemsInput, error) {
	var it model.LinkedResourcesItemsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "thumbnail_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnail_url"))
			it.ThumbnailURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListSizeFilter(ctx context.Context, obj interface{}) (model.ListSizeFilter, error) {
	var it model.ListSizeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogoFilter(ctx context.Context, obj interface{}) (model.LogoFilter, error) {
	var it model.LogoFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLogoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLogoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLogoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLogoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOLogoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLogoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOLogoFilter2ᚖexampleᚋgraphᚋmodelᚐLogoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogoInput(ctx context.Context, obj interface{}) (model.LogoInput, error) {
	var it model.LogoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMarketplaceFilter(ctx context.Context, obj interface{}) (model.MarketplaceFilter, error) {
	var it model.MarketplaceFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "enablement_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablement_status"))
			it.EnablementStatus, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "enablement_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablement_url"))
			it.EnablementURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "listing_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("listing_url"))
			it.ListingURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOMarketplaceFilter2ᚕᚖexampleᚋgraphᚋmodelᚐMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOMarketplaceFilter2ᚕᚖexampleᚋgraphᚋmodelᚐMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOMarketplaceFilter2ᚕᚖexampleᚋgraphᚋmodelᚐMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOMarketplaceFilter2ᚖexampleᚋgraphᚋmodelᚐMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMarketplaceInput(ctx context.Context, obj interface{}) (model.MarketplaceInput, error) {
	var it model.MarketplaceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "enablement_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablement_status"))
			it.EnablementStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enablement_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablement_url"))
			it.EnablementURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "listing_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("listing_url"))
			it.ListingURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorBundleAnnotationFilter(ctx context.Context, obj interface{}) (model.OperatorBundleAnnotationFilter, error) {
	var it model.OperatorBundleAnnotationFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "infrastructure_features_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("infrastructure_features_size"))
			it.InfrastructureFeaturesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "infrastructure_features_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("infrastructure_features_index"))
			it.InfrastructureFeaturesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "infrastructure_features":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("infrastructure_features"))
			it.InfrastructureFeatures, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "valid_subscription_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valid_subscription_size"))
			it.ValidSubscriptionSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "valid_subscription_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valid_subscription_index"))
			it.ValidSubscriptionIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "valid_subscription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valid_subscription"))
			it.ValidSubscription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOperatorBundleAnnotationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOperatorBundleAnnotationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOOperatorBundleAnnotationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOperatorBundleAnnotationFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorBundleFilter(ctx context.Context, obj interface{}) (model.OperatorBundleFilter, error) {
	var it model.OperatorBundleFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "alm_examples_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alm_examples_size"))
			it.AlmExamplesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "alm_examples_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alm_examples_index"))
			it.AlmExamplesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "alm_examples_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alm_examples_elemMatch"))
			it.AlmExamplesElemMatch, err = ec.unmarshalOALMExampleElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐALMExampleElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "alm_examples":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alm_examples"))
			it.AlmExamples, err = ec.unmarshalOALMExampleFilter2ᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "annotations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annotations"))
			it.Annotations, err = ec.unmarshalOOperatorBundleAnnotationFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "architectures_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectures_size"))
			it.ArchitecturesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "architectures_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectures_index"))
			it.ArchitecturesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "architectures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectures"))
			it.Architectures, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "bundle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bundle"))
			it.Bundle, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "bundle_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bundle_path"))
			it.BundlePath, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "bundle_path_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bundle_path_digest"))
			it.BundlePathDigest, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "capabilities_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capabilities_size"))
			it.CapabilitiesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "capabilities_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capabilities_index"))
			it.CapabilitiesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "capabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capabilities"))
			it.Capabilities, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_name"))
			it.ChannelName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "csv_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("csv_name"))
			it.CSVName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "csv_display_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("csv_display_name"))
			it.CSVDisplayName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "csv_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("csv_description"))
			it.CSVDescription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "csv_metadata_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("csv_metadata_description"))
			it.CSVMetadataDescription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "in_index_img":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in_index_img"))
			it.InIndexImg, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "install_modes_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("install_modes_size"))
			it.InstallModesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "install_modes_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("install_modes_index"))
			it.InstallModesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "install_modes_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("install_modes_elemMatch"))
			it.InstallModesElemMatch, err = ec.unmarshalOOperatorBundleInstallModeElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "install_modes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("install_modes"))
			it.InstallModes, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_default_channel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_default_channel"))
			it.IsDefaultChannel, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_in_channel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_in_channel"))
			it.LatestInChannel, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "ocp_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ocp_version"))
			it.OcpVersion, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "package":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package"))
			it.Package, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "provided_apis_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provided_apis_size"))
			it.ProvidedApisSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "provided_apis_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provided_apis_index"))
			it.ProvidedApisIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "provided_apis_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provided_apis_elemMatch"))
			it.ProvidedApisElemMatch, err = ec.unmarshalOProvidedAPIsItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "provided_apis":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provided_apis"))
			it.ProvidedApis, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_images_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_images_size"))
			it.RelatedImagesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_images_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_images_index"))
			it.RelatedImagesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_images_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_images_elemMatch"))
			it.RelatedImagesElemMatch, err = ec.unmarshalORelatedImagesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "related_images":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("related_images"))
			it.RelatedImages, err = ec.unmarshalORelatedImagesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "source_index_container_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source_index_container_path"))
			it.SourceIndexContainerPath, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "version_original":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version_original"))
			it.VersionOriginal, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "replaces":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replaces"))
			it.Replaces, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "skips_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skips_size"))
			it.SkipsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "skips_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skips_index"))
			it.SkipsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "skips":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skips"))
			it.Skips, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "skip_range":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip_range"))
			it.SkipRange, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOperatorBundleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOperatorBundleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOOperatorBundleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOperatorBundleFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorBundleInstallModeElemMatchFilter(ctx context.Context, obj interface{}) (model.OperatorBundleInstallModeElemMatchFilter, error) {
	var it model.OperatorBundleInstallModeElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorBundleInstallModeFilter(ctx context.Context, obj interface{}) (model.OperatorBundleInstallModeFilter, error) {
	var it model.OperatorBundleInstallModeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "supported":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supported"))
			it.Supported, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorBundlesItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.OperatorBundlesItemsElemMatchFilter, error) {
	var it model.OperatorBundlesItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorBundlesItemsFilter(ctx context.Context, obj interface{}) (model.OperatorBundlesItemsFilter, error) {
	var it model.OperatorBundlesItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "package":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package"))
			it.Package, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "capabilities_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capabilities_size"))
			it.CapabilitiesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "capabilities_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capabilities_index"))
			it.CapabilitiesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "capabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capabilities"))
			it.Capabilities, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorBundlesItemsInput(ctx context.Context, obj interface{}) (model.OperatorBundlesItemsInput, error) {
	var it model.OperatorBundlesItemsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOObjectID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "package":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package"))
			it.Package, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "capabilities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capabilities"))
			it.Capabilities, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorIndexFilter(ctx context.Context, obj interface{}) (model.OperatorIndexFilter, error) {
	var it model.OperatorIndexFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ocp_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ocp_version"))
			it.OcpVersion, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			it.Path, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_of_life":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_of_life"))
			it.EndOfLife, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOperatorIndexFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOperatorIndexFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOOperatorIndexFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOperatorIndexFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperatorPackageFilter(ctx context.Context, obj interface{}) (model.OperatorPackageFilter, error) {
	var it model.OperatorPackageFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "association":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association"))
			it.Association, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_name"))
			it.PackageName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOOperatorPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOOperatorPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOOperatorPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOOperatorPackageFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorPackageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParsedDataFilter(ctx context.Context, obj interface{}) (model.ParsedDataFilter, error) {
	var it model.ParsedDataFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "architecture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architecture"))
			it.Architecture, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "author":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("author"))
			it.Author, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "command":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("command"))
			it.Command, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "container":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("container"))
			it.Container, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_image_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_image_digest"))
			it.DockerImageDigest, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_image_id"))
			it.DockerImageID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_version"))
			it.DockerVersion, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "env_variables_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("env_variables_size"))
			it.EnvVariablesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "env_variables_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("env_variables_index"))
			it.EnvVariablesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "env_variables":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("env_variables"))
			it.EnvVariables, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels_size"))
			it.LabelsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels_index"))
			it.LabelsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels_elemMatch"))
			it.LabelsElemMatch, err = ec.unmarshalOLabelElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐLabelElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			it.Labels, err = ec.unmarshalOLabelFilter2ᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "layers_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layers_size"))
			it.LayersSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "layers_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layers_index"))
			it.LayersIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "layers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layers"))
			it.Layers, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "os":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("os"))
			it.Os, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "ports":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ports"))
			it.Ports, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repos_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repos_size"))
			it.ReposSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repos_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repos_index"))
			it.ReposIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repos_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repos_elemMatch"))
			it.ReposElemMatch, err = ec.unmarshalOParsedDataRepoElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repos"))
			it.Repos, err = ec.unmarshalOParsedDataRepoFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_layer_sizes_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_layer_sizes_size"))
			it.UncompressedLayerSizesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_layer_sizes_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_layer_sizes_index"))
			it.UncompressedLayerSizesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_layer_sizes_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_layer_sizes_elemMatch"))
			it.UncompressedLayerSizesElemMatch, err = ec.unmarshalOUncompressedLayerSizeElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_layer_sizes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_layer_sizes"))
			it.UncompressedLayerSizes, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_size_bytes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_size_bytes"))
			it.UncompressedSizeBytes, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			it.User, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "virtual_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("virtual_size"))
			it.VirtualSize, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOParsedDataFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOParsedDataFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOParsedDataFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOParsedDataFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParsedDataInput(ctx context.Context, obj interface{}) (model.ParsedDataInput, error) {
	var it model.ParsedDataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "architecture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architecture"))
			it.Architecture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "author":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("author"))
			it.Author, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "command":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("command"))
			it.Command, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "container":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("container"))
			it.Container, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_image_digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_image_digest"))
			it.DockerImageDigest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_image_id"))
			it.DockerImageID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "docker_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("docker_version"))
			it.DockerVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "env_variables":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("env_variables"))
			it.EnvVariables, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_id"))
			it.ImageID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			it.Labels, err = ec.unmarshalOLabelInput2ᚕᚖexampleᚋgraphᚋmodelᚐLabelInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "layers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layers"))
			it.Layers, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "os":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("os"))
			it.Os, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ports":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ports"))
			it.Ports, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repos"))
			it.Repos, err = ec.unmarshalOParsedDataRepoInput2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_layer_sizes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_layer_sizes"))
			it.UncompressedLayerSizes, err = ec.unmarshalOUncompressedLayerSizeInput2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "uncompressed_size_bytes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uncompressed_size_bytes"))
			it.UncompressedSizeBytes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			it.User, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "virtual_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("virtual_size"))
			it.VirtualSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParsedDataRepoElemMatchFilter(ctx context.Context, obj interface{}) (model.ParsedDataRepoElemMatchFilter, error) {
	var it model.ParsedDataRepoElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOParsedDataRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOParsedDataRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOParsedDataRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOParsedDataRepoFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParsedDataRepoFilter(ctx context.Context, obj interface{}) (model.ParsedDataRepoFilter, error) {
	var it model.ParsedDataRepoFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "baseurl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseurl"))
			it.Baseurl, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expire":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expire"))
			it.Expire, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "filename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			it.Filename, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "pkgs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgs"))
			it.Pkgs, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOParsedDataRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOParsedDataRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOParsedDataRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOParsedDataRepoFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParsedDataRepoInput(ctx context.Context, obj interface{}) (model.ParsedDataRepoInput, error) {
	var it model.ParsedDataRepoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "baseurl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseurl"))
			it.Baseurl, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expire":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expire"))
			it.Expire, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			it.Filename, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pkgs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pkgs"))
			it.Pkgs, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated"))
			it.Updated, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductListingFilter(ctx context.Context, obj interface{}) (model.ProductListingFilter, error) {
	var it model.ProductListingFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "badges_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("badges_size"))
			it.BadgesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "badges_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("badges_index"))
			it.BadgesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "badges_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("badges_elemMatch"))
			it.BadgesElemMatch, err = ec.unmarshalOBadgesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐBadgesItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "badges":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("badges"))
			it.Badges, err = ec.unmarshalOBadgesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cert_projects_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_projects_size"))
			it.CertProjectsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cert_projects_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_projects_index"))
			it.CertProjectsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cert_projects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_projects"))
			it.CertProjects, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts_size"))
			it.ContactsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts_index"))
			it.ContactsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts_elemMatch"))
			it.ContactsElemMatch, err = ec.unmarshalOContactsItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContactsItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			it.Contacts, err = ec.unmarshalOContactsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptions"))
			it.Descriptions, err = ec.unmarshalODescriptionsFilter2ᚖexampleᚋgraphᚋmodelᚐDescriptionsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "drupal_company_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drupal_company_id"))
			it.DrupalCompanyID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "faqs_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("faqs_size"))
			it.FaqsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "faqs_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("faqs_index"))
			it.FaqsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "faqs_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("faqs_elemMatch"))
			it.FaqsElemMatch, err = ec.unmarshalOFAQSItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "faqs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("faqs"))
			it.Faqs, err = ec.unmarshalOFAQSItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "features_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("features_size"))
			it.FeaturesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "features_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("features_index"))
			it.FeaturesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "features_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("features_elemMatch"))
			it.FeaturesElemMatch, err = ec.unmarshalOFeaturesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "features":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("features"))
			it.Features, err = ec.unmarshalOFeaturesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "functional_categories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("functional_categories_size"))
			it.FunctionalCategoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "functional_categories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("functional_categories_index"))
			it.FunctionalCategoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "functional_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("functional_categories"))
			it.FunctionalCategories, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal"))
			it.Legal, err = ec.unmarshalOLegalFilter2ᚖexampleᚋgraphᚋmodelᚐLegalFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "linked_resources_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linked_resources_size"))
			it.LinkedResourcesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "linked_resources_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linked_resources_index"))
			it.LinkedResourcesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "linked_resources_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linked_resources_elemMatch"))
			it.LinkedResourcesElemMatch, err = ec.unmarshalOLinkedResourcesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "linked_resources":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linked_resources"))
			it.LinkedResources, err = ec.unmarshalOLinkedResourcesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			it.Logo, err = ec.unmarshalOLogoFilter2ᚖexampleᚋgraphᚋmodelᚐLogoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "marketplace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketplace"))
			it.Marketplace, err = ec.unmarshalOMarketplaceFilter2ᚖexampleᚋgraphᚋmodelᚐMarketplaceFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted"))
			it.Deleted, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "quick_start_configuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quick_start_configuration"))
			it.QuickStartConfiguration, err = ec.unmarshalOQuickStartConfigurationFilter2ᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories_size"))
			it.RepositoriesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories_index"))
			it.RepositoriesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories"))
			it.Repositories, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "search_aliases_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search_aliases_size"))
			it.SearchAliasesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "search_aliases_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search_aliases_index"))
			it.SearchAliasesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "search_aliases_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search_aliases_elemMatch"))
			it.SearchAliasesElemMatch, err = ec.unmarshalOSearchAliasesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "search_aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search_aliases"))
			it.SearchAliases, err = ec.unmarshalOSearchAliasesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "support":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support"))
			it.Support, err = ec.unmarshalOSupportFilter2ᚖexampleᚋgraphᚋmodelᚐSupportFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_label"))
			it.VendorLabel, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_bundles_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_bundles_size"))
			it.OperatorBundlesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_bundles_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_bundles_index"))
			it.OperatorBundlesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_bundles_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_bundles_elemMatch"))
			it.OperatorBundlesElemMatch, err = ec.unmarshalOOperatorBundlesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_bundles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_bundles"))
			it.OperatorBundles, err = ec.unmarshalOOperatorBundlesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOProductListingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOProductListingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOProductListingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOProductListingFilter2ᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductListingInput(ctx context.Context, obj interface{}) (model.ProductListingInput, error) {
	var it model.ProductListingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cert_projects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cert_projects"))
			it.CertProjects, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			it.Contacts, err = ec.unmarshalOContactsItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptions"))
			it.Descriptions, err = ec.unmarshalODescriptionsInput2ᚖexampleᚋgraphᚋmodelᚐDescriptionsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "drupal_company_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drupal_company_id"))
			it.DrupalCompanyID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "faqs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("faqs"))
			it.Faqs, err = ec.unmarshalOFAQSItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "features":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("features"))
			it.Features, err = ec.unmarshalOFeaturesItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "functional_categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("functional_categories"))
			it.FunctionalCategories, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal"))
			it.Legal, err = ec.unmarshalOLegalInput2ᚖexampleᚋgraphᚋmodelᚐLegalInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "linked_resources":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linked_resources"))
			it.LinkedResources, err = ec.unmarshalOLinkedResourcesItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			it.Logo, err = ec.unmarshalOLogoInput2ᚖexampleᚋgraphᚋmodelᚐLogoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted"))
			it.Deleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "quick_start_configuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quick_start_configuration"))
			it.QuickStartConfiguration, err = ec.unmarshalOQuickStartConfigurationInput2ᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositories"))
			it.Repositories, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "search_aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search_aliases"))
			it.SearchAliases, err = ec.unmarshalOSearchAliasesItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "support":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("support"))
			it.Support, err = ec.unmarshalOSupportInput2ᚖexampleᚋgraphᚋmodelᚐSupportInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_label"))
			it.VendorLabel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_bundles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_bundles"))
			it.OperatorBundles, err = ec.unmarshalOOperatorBundlesItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProvidedAPIsItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.ProvidedAPIsItemsElemMatchFilter, error) {
	var it model.ProvidedAPIsItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProvidedAPIsItemsFilter(ctx context.Context, obj interface{}) (model.ProvidedAPIsItemsFilter, error) {
	var it model.ProvidedAPIsItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "group":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			it.Group, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "plural":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plural"))
			it.Plural, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOProvidedAPIsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPullRequestFilter(ctx context.Context, obj interface{}) (model.PullRequestFilter, error) {
	var it model.PullRequestFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOPullRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐPullRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOPullRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐPullRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOPullRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐPullRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOPullRequestFilter2ᚖexampleᚋgraphᚋmodelᚐPullRequestFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPullRequestInput(ctx context.Context, obj interface{}) (model.PullRequestInput, error) {
	var it model.PullRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuickStartConfigurationFilter(ctx context.Context, obj interface{}) (model.QuickStartConfigurationFilter, error) {
	var it model.QuickStartConfigurationFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "instructions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instructions"))
			it.Instructions, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOQuickStartConfigurationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOQuickStartConfigurationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOQuickStartConfigurationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOQuickStartConfigurationFilter2ᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuickStartConfigurationInput(ctx context.Context, obj interface{}) (model.QuickStartConfigurationInput, error) {
	var it model.QuickStartConfigurationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "instructions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instructions"))
			it.Instructions, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRedHatContainerAdvisoryFilter(ctx context.Context, obj interface{}) (model.RedHatContainerAdvisoryFilter, error) {
	var it model.RedHatContainerAdvisoryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_id"))
			it.ID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_type"))
			it.ContentType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "object_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object_type"))
			it.ObjectType, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			it.Severity, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "ship_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ship_date"))
			it.ShipDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "solution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("solution"))
			it.Solution, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "synopsis":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synopsis"))
			it.Synopsis, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "topic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic"))
			it.Topic, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cves_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cves_size"))
			it.CvesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cves_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cves_index"))
			it.CvesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cves_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cves_elemMatch"))
			it.CvesElemMatch, err = ec.unmarshalOCVEElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐCVEElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cves":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cves"))
			it.Cves, err = ec.unmarshalOCVEFilter2ᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "issues_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issues_size"))
			it.IssuesSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "issues_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issues_index"))
			it.IssuesIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "issues_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issues_elemMatch"))
			it.IssuesElemMatch, err = ec.unmarshalOIssueElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐIssueElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "issues":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issues"))
			it.Issues, err = ec.unmarshalOIssueFilter2ᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creation_date"))
			it.CreationDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORedHatContainerAdvisoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORedHatContainerAdvisoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORedHatContainerAdvisoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORedHatContainerAdvisoryFilter2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRelatedImagesItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.RelatedImagesItemsElemMatchFilter, error) {
	var it model.RelatedImagesItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORelatedImagesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORelatedImagesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORelatedImagesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORelatedImagesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRelatedImagesItemsFilter(ctx context.Context, obj interface{}) (model.RelatedImagesItemsFilter, error) {
	var it model.RelatedImagesItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "digest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digest"))
			it.Digest, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORelatedImagesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORelatedImagesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORelatedImagesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORelatedImagesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepositoryContentStreamGradesElemMatchFilter(ctx context.Context, obj interface{}) (model.RepositoryContentStreamGradesElemMatchFilter, error) {
	var it model.RepositoryContentStreamGradesElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepositoryContentStreamGradesFilter(ctx context.Context, obj interface{}) (model.RepositoryContentStreamGradesFilter, error) {
	var it model.RepositoryContentStreamGradesFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepositoryDisplayDataFilter(ctx context.Context, obj interface{}) (model.RepositoryDisplayDataFilter, error) {
	var it model.RepositoryDisplayDataFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "long_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("long_description"))
			it.LongDescription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "long_description_markdown":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("long_description_markdown"))
			it.LongDescriptionMarkdown, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "openshift_tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openshift_tags"))
			it.OpenshiftTags, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "short_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("short_description"))
			it.ShortDescription, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepositoryDisplayDataFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepositoryDisplayDataFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORepositoryDisplayDataFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepositoryDisplayDataFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepositoryDocumentationLinkElemMatchFilter(ctx context.Context, obj interface{}) (model.RepositoryDocumentationLinkElemMatchFilter, error) {
	var it model.RepositoryDocumentationLinkElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepositoryDocumentationLinkFilter(ctx context.Context, obj interface{}) (model.RepositoryDocumentationLinkFilter, error) {
	var it model.RepositoryDocumentationLinkFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepositoryLabelOverrideFilter(ctx context.Context, obj interface{}) (model.RepositoryLabelOverrideFilter, error) {
	var it model.RepositoryLabelOverrideFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "io_k8s_displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("io_k8s_displayName"))
			it.IoK8sDisplayName, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "io_openshift_tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("io_openshift_tags"))
			it.IoOpenshiftTags, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "summary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summary"))
			it.Summary, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepositoryLabelOverrideFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverrideFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepositoryLabelOverrideFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverrideFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORepositoryLabelOverrideFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverrideFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepositoryLabelOverrideFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverrideFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepositoryMetricsFilter(ctx context.Context, obj interface{}) (model.RepositoryMetricsFilter, error) {
	var it model.RepositoryMetricsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "last_update_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_update_date"))
			it.LastUpdateDate, err = ec.unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "pulls_in_last_30_days":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pulls_in_last_30_days"))
			it.PullsInLast30Days, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepositoryMetricsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryMetricsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepositoryMetricsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryMetricsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORepositoryMetricsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryMetricsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepositoryMetricsFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryMetricsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRepositoryRunsOnFilter(ctx context.Context, obj interface{}) (model.RepositoryRunsOnFilter, error) {
	var it model.RepositoryRunsOnFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "openshift_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openshift_online"))
			it.OpenshiftOnline, err = ec.unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORepositoryRunsOnFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORepositoryRunsOnFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalORepositoryRunsOnFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalORepositoryRunsOnFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResultsFilter(ctx context.Context, obj interface{}) (model.ResultsFilter, error) {
	var it model.ResultsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "failed_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failed_size"))
			it.FailedSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "failed_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failed_index"))
			it.FailedIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "failed_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failed_elemMatch"))
			it.FailedElemMatch, err = ec.unmarshalOTestResultsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "failed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failed"))
			it.Failed, err = ec.unmarshalOTestResultsFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "errors_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("errors_size"))
			it.ErrorsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "errors_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("errors_index"))
			it.ErrorsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "errors_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("errors_elemMatch"))
			it.ErrorsElemMatch, err = ec.unmarshalOTestResultsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "errors":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("errors"))
			it.Errors, err = ec.unmarshalOTestResultsFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed_size"))
			it.PassedSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed_index"))
			it.PassedIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed_elemMatch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed_elemMatch"))
			it.PassedElemMatch, err = ec.unmarshalOTestResultsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsElemMatchFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed"))
			it.Passed, err = ec.unmarshalOTestResultsFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOResultsFilter2ᚖexampleᚋgraphᚋmodelᚐResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResultsInput(ctx context.Context, obj interface{}) (model.ResultsInput, error) {
	var it model.ResultsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "failed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failed"))
			it.Failed, err = ec.unmarshalOTestResultsInput2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "errors":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("errors"))
			it.Errors, err = ec.unmarshalOTestResultsInput2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "passed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passed"))
			it.Passed, err = ec.unmarshalOTestResultsInput2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRpmsItemsInput(ctx context.Context, obj interface{}) (model.RpmsItemsInput, error) {
	var it model.RpmsItemsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "architecture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architecture"))
			it.Architecture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gpg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gpg"))
			it.Gpg, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nvra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nvra"))
			it.Nvra, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "release":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("release"))
			it.Release, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "srpm_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("srpm_name"))
			it.SrpmName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "srpm_nevra":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("srpm_nevra"))
			it.SrpmNevra, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "summary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("summary"))
			it.Summary, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchAliasesItemsElemMatchFilter(ctx context.Context, obj interface{}) (model.SearchAliasesItemsElemMatchFilter, error) {
	var it model.SearchAliasesItemsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOSearchAliasesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOSearchAliasesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOSearchAliasesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOSearchAliasesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchAliasesItemsFilter(ctx context.Context, obj interface{}) (model.SearchAliasesItemsFilter, error) {
	var it model.SearchAliasesItemsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOSearchAliasesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOSearchAliasesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOSearchAliasesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOSearchAliasesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchAliasesItemsInput(ctx context.Context, obj interface{}) (model.SearchAliasesItemsInput, error) {
	var it model.SearchAliasesItemsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignatureInfoElemMatchFilter(ctx context.Context, obj interface{}) (model.SignatureInfoElemMatchFilter, error) {
	var it model.SignatureInfoElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOSignatureInfoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOSignatureInfoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOSignatureInfoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOSignatureInfoFilter2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignatureInfoFilter(ctx context.Context, obj interface{}) (model.SignatureInfoFilter, error) {
	var it model.SignatureInfoFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "key_long_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_long_id"))
			it.KeyLongID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags_size"))
			it.TagsSize, err = ec.unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags_index"))
			it.TagsIndex, err = ec.unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOSignatureInfoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOSignatureInfoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOSignatureInfoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOSignatureInfoFilter2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignatureInfoInput(ctx context.Context, obj interface{}) (model.SignatureInfoInput, error) {
	var it model.SignatureInfoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "key_long_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_long_id"))
			it.KeyLongID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortBy(ctx context.Context, obj interface{}) (model.SortBy, error) {
	var it model.SortBy
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalOSortDirectionEnum2ᚖexampleᚋgraphᚋmodelᚐSortDirectionEnum(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortByMembersInput(ctx context.Context, obj interface{}) (model.SortByMembersInput, error) {
	var it model.SortByMembersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFilter(ctx context.Context, obj interface{}) (model.StringFilter, error) {
	var it model.StringFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "out":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("out"))
			it.Out, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "all":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all"))
			it.All, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "iregex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iregex"))
			it.Iregex, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "regex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regex"))
			it.Regex, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringIndexFilter(ctx context.Context, obj interface{}) (model.StringIndexFilter, error) {
	var it model.StringIndexFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("condition"))
			it.Condition, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("index"))
			it.Index, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupportFilter(ctx context.Context, obj interface{}) (model.SupportFilter, error) {
	var it model.SupportFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_address"))
			it.EmailAddress, err = ec.unmarshalOEmailFilter2ᚖexampleᚋgraphᚋmodelᚐEmailFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOSupportFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSupportFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOSupportFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSupportFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOSupportFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSupportFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOSupportFilter2ᚖexampleᚋgraphᚋmodelᚐSupportFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupportInput(ctx context.Context, obj interface{}) (model.SupportInput, error) {
	var it model.SupportInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_address"))
			it.EmailAddress, err = ec.unmarshalOEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestLibraryFilter(ctx context.Context, obj interface{}) (model.TestLibraryFilter, error) {
	var it model.TestLibraryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "commit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commit"))
			it.Commit, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTestLibraryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestLibraryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTestLibraryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestLibraryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOTestLibraryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestLibraryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTestLibraryFilter2ᚖexampleᚋgraphᚋmodelᚐTestLibraryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestLibraryInput(ctx context.Context, obj interface{}) (model.TestLibraryInput, error) {
	var it model.TestLibraryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "commit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commit"))
			it.Commit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestResultsElemMatchFilter(ctx context.Context, obj interface{}) (model.TestResultsElemMatchFilter, error) {
	var it model.TestResultsElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTestResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTestResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOTestResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTestResultsFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestResultsFilter(ctx context.Context, obj interface{}) (model.TestResultsFilter, error) {
	var it model.TestResultsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "check_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_url"))
			it.CheckURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_time"))
			it.ElapsedTime, err = ec.unmarshalOFloatFilter2ᚖexampleᚋgraphᚋmodelᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "help":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("help"))
			it.Help, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "knowledgebase_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("knowledgebase_url"))
			it.KnowledgebaseURL, err = ec.unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "suggestion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suggestion"))
			it.Suggestion, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTestResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTestResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOTestResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTestResultsFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestResultsInput(ctx context.Context, obj interface{}) (model.TestResultsInput, error) {
	var it model.TestResultsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "check_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_url"))
			it.CheckURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "elapsed_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elapsed_time"))
			it.ElapsedTime, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "help":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("help"))
			it.Help, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "knowledgebase_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("knowledgebase_url"))
			it.KnowledgebaseURL, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "suggestion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suggestion"))
			it.Suggestion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestedOnFilter(ctx context.Context, obj interface{}) (model.TestedOnFilter, error) {
	var it model.TestedOnFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOTestedOnFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestedOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOTestedOnFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestedOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOTestedOnFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestedOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTestedOnFilter2ᚖexampleᚋgraphᚋmodelᚐTestedOnFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestedOnInput(ctx context.Context, obj interface{}) (model.TestedOnInput, error) {
	var it model.TestedOnInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputURIFilter(ctx context.Context, obj interface{}) (model.URIFilter, error) {
	var it model.URIFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOURI2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOURI2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUncompressedLayerSizeElemMatchFilter(ctx context.Context, obj interface{}) (model.UncompressedLayerSizeElemMatchFilter, error) {
	var it model.UncompressedLayerSizeElemMatchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUncompressedLayerSizeFilter(ctx context.Context, obj interface{}) (model.UncompressedLayerSizeFilter, error) {
	var it model.UncompressedLayerSizeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "layer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer_id"))
			it.LayerID, err = ec.unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "size_bytes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size_bytes"))
			it.SizeBytes, err = ec.unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "nor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nor"))
			it.Nor, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUncompressedLayerSizeFilter2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUncompressedLayerSizeInput(ctx context.Context, obj interface{}) (model.UncompressedLayerSizeInput, error) {
	var it model.UncompressedLayerSizeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "layer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("layer_id"))
			it.LayerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "size_bytes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size_bytes"))
			it.SizeBytes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var aLMExampleImplementors = []string{"ALMExample"}

func (ec *executionContext) _ALMExample(ctx context.Context, sel ast.SelectionSet, obj *model.ALMExample) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aLMExampleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ALMExample")
		case "api_version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ALMExample_api_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "kind":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ALMExample_kind(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var analyticsPageViewsImplementors = []string{"AnalyticsPageViews"}

func (ec *executionContext) _AnalyticsPageViews(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyticsPageViews) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsPageViewsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsPageViews")
		case "by_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPageViews_by_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total_pageviews":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPageViews_total_pageviews(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var analyticsPageViewsByDateImplementors = []string{"AnalyticsPageViewsByDate"}

func (ec *executionContext) _AnalyticsPageViewsByDate(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyticsPageViewsByDate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsPageViewsByDateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsPageViewsByDate")
		case "activity_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPageViewsByDate_activity_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pageviews":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPageViewsByDate_pageviews(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var analyticsPageViewsResponseImplementors = []string{"AnalyticsPageViewsResponse"}

func (ec *executionContext) _AnalyticsPageViewsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyticsPageViewsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsPageViewsResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsPageViewsResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPageViewsResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPageViewsResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var analyticsPullCountImplementors = []string{"AnalyticsPullCount"}

func (ec *executionContext) _AnalyticsPullCount(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyticsPullCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsPullCountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsPullCount")
		case "by_customers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCount_by_customers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "by_tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCount_by_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total_customers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCount_total_customers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total_countries":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCount_total_countries(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total_pulls":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCount_total_pulls(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var analyticsPullCountByCostumerImplementors = []string{"AnalyticsPullCountByCostumer"}

func (ec *executionContext) _AnalyticsPullCountByCostumer(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyticsPullCountByCostumer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsPullCountByCostumerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsPullCountByCostumer")
		case "country":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountByCostumer_country(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "customer_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountByCostumer_customer_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "download_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountByCostumer_download_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pull_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountByCostumer_pull_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var analyticsPullCountByTagImplementors = []string{"AnalyticsPullCountByTag"}

func (ec *executionContext) _AnalyticsPullCountByTag(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyticsPullCountByTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsPullCountByTagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsPullCountByTag")
		case "download_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountByTag_download_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image_tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountByTag_image_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pull_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountByTag_pull_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var analyticsPullCountResponseImplementors = []string{"AnalyticsPullCountResponse"}

func (ec *executionContext) _AnalyticsPullCountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyticsPullCountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsPullCountResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsPullCountResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AnalyticsPullCountResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var apiKeyImplementors = []string{"ApiKey"}

func (ec *executionContext) _ApiKey(ctx context.Context, sel ast.SelectionSet, obj *model.APIKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiKeyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiKey")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKey_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKey_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "company_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKey_company_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "created":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKey_created(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_used":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKey_last_used(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "created_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKey_created_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKey_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var apiKeyListResponseImplementors = []string{"ApiKeyListResponse"}

func (ec *executionContext) _ApiKeyListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.APIKeyListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiKeyListResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiKeyListResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKeyListResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKeyListResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var apiKeyResponseImplementors = []string{"ApiKeyResponse"}

func (ec *executionContext) _ApiKeyResponse(ctx context.Context, sel ast.SelectionSet, obj *model.APIKeyResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiKeyResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiKeyResponse")
		case "api_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKeyResponse_api_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "key_data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiKeyResponse_key_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var assessmentImplementors = []string{"Assessment"}

func (ec *executionContext) _Assessment(ctx context.Context, sel ast.SelectionSet, obj *model.Assessment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assessmentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Assessment")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Assessment_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "required_for_certification":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Assessment_required_for_certification(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "value":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Assessment_value(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var badgesItemsImplementors = []string{"BadgesItems"}

func (ec *executionContext) _BadgesItems(ctx context.Context, sel ast.SelectionSet, obj *model.BadgesItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, badgesItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BadgesItems")
		case "badge":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BadgesItems_badge(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BadgesItems_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var binarySignatureImplementors = []string{"BinarySignature"}

func (ec *executionContext) _BinarySignature(ctx context.Context, sel ast.SelectionSet, obj *model.BinarySignature) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, binarySignatureImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BinarySignature")
		case "binary_signature":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BinarySignature_binary_signature(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var binarySignatureResponseImplementors = []string{"BinarySignatureResponse"}

func (ec *executionContext) _BinarySignatureResponse(ctx context.Context, sel ast.SelectionSet, obj *model.BinarySignatureResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, binarySignatureResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BinarySignatureResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BinarySignatureResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BinarySignatureResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var brewImplementors = []string{"Brew"}

func (ec *executionContext) _Brew(ctx context.Context, sel ast.SelectionSet, obj *model.Brew) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, brewImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Brew")
		case "build":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Brew_build(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "completion_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Brew_completion_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "nvra":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Brew_nvra(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "package":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Brew_package(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cVEImplementors = []string{"CVE"}

func (ec *executionContext) _CVE(ctx context.Context, sel ast.SelectionSet, obj *model.Cve) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cVEImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CVE")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CVE_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CVE_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectArtifactImplementors = []string{"CertProjectArtifact"}

func (ec *executionContext) _CertProjectArtifact(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectArtifact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectArtifactImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectArtifact")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "operator_package_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_operator_package_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "certification_hash":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_certification_hash(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_content(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_content_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "filename":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_filename(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "file_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_file_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifact_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectArtifactEdgesImplementors = []string{"CertProjectArtifactEdges"}

func (ec *executionContext) _CertProjectArtifactEdges(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectArtifactEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectArtifactEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectArtifactEdges")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactEdges_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "container_image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactEdges_container_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectArtifactPaginatedResponseImplementors = []string{"CertProjectArtifactPaginatedResponse"}

func (ec *executionContext) _CertProjectArtifactPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectArtifactPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectArtifactPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectArtifactPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectArtifactResponseImplementors = []string{"CertProjectArtifactResponse"}

func (ec *executionContext) _CertProjectArtifactResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectArtifactResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectArtifactResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectArtifactResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectArtifactResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectBuildLogImplementors = []string{"CertProjectBuildLog"}

func (ec *executionContext) _CertProjectBuildLog(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectBuildLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectBuildLogImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectBuildLog")
		case "log":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildLog_log(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectBuildLogResponseImplementors = []string{"CertProjectBuildLogResponse"}

func (ec *executionContext) _CertProjectBuildLogResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectBuildLogResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectBuildLogResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectBuildLogResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildLogResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildLogResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectBuildRequestImplementors = []string{"CertProjectBuildRequest"}

func (ec *executionContext) _CertProjectBuildRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectBuildRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectBuildRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectBuildRequest")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status_message":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest_status_message(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequest_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectBuildRequestEdgesImplementors = []string{"CertProjectBuildRequestEdges"}

func (ec *executionContext) _CertProjectBuildRequestEdges(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectBuildRequestEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectBuildRequestEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectBuildRequestEdges")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestEdges_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "logs":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestEdges_logs(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectBuildRequestPaginatedResponseImplementors = []string{"CertProjectBuildRequestPaginatedResponse"}

func (ec *executionContext) _CertProjectBuildRequestPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectBuildRequestPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectBuildRequestPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectBuildRequestPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectBuildRequestResponseImplementors = []string{"CertProjectBuildRequestResponse"}

func (ec *executionContext) _CertProjectBuildRequestResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectBuildRequestResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectBuildRequestResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectBuildRequestResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectBuildRequestResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectContactsImplementors = []string{"CertProjectContacts"}

func (ec *executionContext) _CertProjectContacts(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectContacts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectContactsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectContacts")
		case "email_address":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContacts_email_address(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContacts_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectContainerImplementors = []string{"CertProjectContainer"}

func (ec *executionContext) _CertProjectContainer(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectContainer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectContainerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectContainer")
		case "application_categories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_application_categories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "auto_publish":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_auto_publish(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "auto_rebuild":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_auto_rebuild(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "distribution_approval":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_distribution_approval(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "distribution_method":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_distribution_method(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isv_pid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_isv_pid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "kube_objects":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_kube_objects(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "docker_config_json":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_docker_config_json(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "os_content_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_os_content_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "passed_rhcert":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_passed_rhcert(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "privileged":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_privileged(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "registry":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_registry(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "registry_override_instruct":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_registry_override_instruct(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "release_category":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_release_category(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository_description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_repository_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_repository_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "service_account_secret":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_service_account_secret(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "short_description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_short_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "support_platforms":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_support_platforms(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source_dockerfile":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_source_dockerfile(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "build_no_cache":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_build_no_cache(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source_context_dir":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_source_context_dir(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "build_service":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_build_service(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source_ref":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_source_ref(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source_uri":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_source_uri(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source_ssh_private_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_source_ssh_private_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "github_usernames":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_github_usernames(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainer_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectContainerEdgesImplementors = []string{"CertProjectContainerEdges"}

func (ec *executionContext) _CertProjectContainerEdges(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectContainerEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectContainerEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectContainerEdges")
		case "repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectContainerEdges_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectDrupalImplementors = []string{"CertProjectDrupal"}

func (ec *executionContext) _CertProjectDrupal(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectDrupal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectDrupalImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectDrupal")
		case "company_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectDrupal_company_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "relation":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectDrupal_relation(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "zone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectDrupal_zone(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectHelmChartImplementors = []string{"CertProjectHelmChart"}

func (ec *executionContext) _CertProjectHelmChart(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectHelmChart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectHelmChartImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectHelmChart")
		case "distribution_method":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_distribution_method(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "chart_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_chart_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "distribution_instructions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_distribution_instructions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "public_pgp_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_public_pgp_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "github_pull_request":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_github_pull_request(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "short_description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_short_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "long_description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_long_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "application_categories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_application_categories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "github_usernames":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectHelmChart_github_usernames(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectMarketplaceImplementors = []string{"CertProjectMarketplace"}

func (ec *executionContext) _CertProjectMarketplace(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectMarketplace) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectMarketplaceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectMarketplace")
		case "enablement_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectMarketplace_enablement_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "enablement_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectMarketplace_enablement_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "listing_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectMarketplace_listing_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectMarketplace_published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectRedhatImplementors = []string{"CertProjectRedhat"}

func (ec *executionContext) _CertProjectRedhat(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectRedhat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectRedhatImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectRedhat")
		case "product_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectRedhat_product_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectRedhat_product_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectRedhat_product_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_version_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectRedhat_product_version_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectScanRequestImplementors = []string{"CertProjectScanRequest"}

func (ec *executionContext) _CertProjectScanRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectScanRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectScanRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectScanRequest")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "external_tests_link":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_external_tests_link(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pull_spec":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_pull_spec(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scan_uuid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_scan_uuid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status_message":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_status_message(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequest_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectScanRequestEdgesImplementors = []string{"CertProjectScanRequestEdges"}

func (ec *executionContext) _CertProjectScanRequestEdges(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectScanRequestEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectScanRequestEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectScanRequestEdges")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequestEdges_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectScanRequestPaginatedResponseImplementors = []string{"CertProjectScanRequestPaginatedResponse"}

func (ec *executionContext) _CertProjectScanRequestPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectScanRequestPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectScanRequestPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectScanRequestPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequestPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequestPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequestPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequestPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequestPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectScanRequestResponseImplementors = []string{"CertProjectScanRequestResponse"}

func (ec *executionContext) _CertProjectScanRequestResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectScanRequestResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectScanRequestResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectScanRequestResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequestResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectScanRequestResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectSelfCertificationImplementors = []string{"CertProjectSelfCertification"}

func (ec *executionContext) _CertProjectSelfCertification(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectSelfCertification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectSelfCertificationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectSelfCertification")
		case "app_profiler":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectSelfCertification_app_profiler(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "app_runs_on_app_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectSelfCertification_app_runs_on_app_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "auth_login":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectSelfCertification_auth_login(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "certification_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectSelfCertification_certification_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "comm_support_on_app_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectSelfCertification_comm_support_on_app_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "requested":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectSelfCertification_requested(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tsanet_member":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectSelfCertification_tsanet_member(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectTagRequestImplementors = []string{"CertProjectTagRequest"}

func (ec *executionContext) _CertProjectTagRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectTagRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectTagRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectTagRequest")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "operation":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_operation(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status_message":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_status_message(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequest_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectTagRequestEdgesImplementors = []string{"CertProjectTagRequestEdges"}

func (ec *executionContext) _CertProjectTagRequestEdges(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectTagRequestEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectTagRequestEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectTagRequestEdges")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestEdges_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestEdges_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectTagRequestPaginatedResponseImplementors = []string{"CertProjectTagRequestPaginatedResponse"}

func (ec *executionContext) _CertProjectTagRequestPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectTagRequestPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectTagRequestPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectTagRequestPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectTagRequestResponseImplementors = []string{"CertProjectTagRequestResponse"}

func (ec *executionContext) _CertProjectTagRequestResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectTagRequestResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectTagRequestResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectTagRequestResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTagRequestResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectTestResultImplementors = []string{"CertProjectTestResult"}

func (ec *executionContext) _CertProjectTestResult(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectTestResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectTestResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectTestResult")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "certification_hash":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_certification_hash(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "operator_package_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_operator_package_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "passed":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_passed(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "results":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_results(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "test_library":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_test_library(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pull_request":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_pull_request(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tested_on":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_tested_on(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResult_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectTestResultEdgesImplementors = []string{"CertProjectTestResultEdges"}

func (ec *executionContext) _CertProjectTestResultEdges(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectTestResultEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectTestResultEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectTestResultEdges")
		case "cert_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultEdges_cert_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "container_image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultEdges_container_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectTestResultPaginatedResponseImplementors = []string{"CertProjectTestResultPaginatedResponse"}

func (ec *executionContext) _CertProjectTestResultPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectTestResultPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectTestResultPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectTestResultPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certProjectTestResultResponseImplementors = []string{"CertProjectTestResultResponse"}

func (ec *executionContext) _CertProjectTestResultResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertProjectTestResultResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certProjectTestResultResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertProjectTestResultResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertProjectTestResultResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certificationImplementors = []string{"Certification"}

func (ec *executionContext) _Certification(ctx context.Context, sel ast.SelectionSet, obj *model.Certification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certificationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Certification")
		case "assessment":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Certification_assessment(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certificationProjectImplementors = []string{"CertificationProject"}

func (ec *executionContext) _CertificationProject(ctx context.Context, sel ast.SelectionSet, obj *model.CertificationProject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certificationProjectImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertificationProject")
		case "certification_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_certification_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "certification_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_certification_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "certification_user":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_certification_user(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "contacts":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_contacts(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "container":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_container(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "helm_chart":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_helm_chart(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "drupal":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_drupal(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "marketplace":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_marketplace(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "operator_distribution":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_operator_distribution(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_listings":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_product_listings(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "project_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_project_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published_by":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_published_by(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "redhat":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_redhat(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "self_certification":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_self_certification(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProject_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certificationProjectEdgesImplementors = []string{"CertificationProjectEdges"}

func (ec *executionContext) _CertificationProjectEdges(ctx context.Context, sel ast.SelectionSet, obj *model.CertificationProjectEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certificationProjectEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertificationProjectEdges")
		case "vendor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectEdges_vendor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "build_requests":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectEdges_build_requests(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scan_requests":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectEdges_scan_requests(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tag_requests":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectEdges_tag_requests(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certificationProjectPaginatedResponseImplementors = []string{"CertificationProjectPaginatedResponse"}

func (ec *executionContext) _CertificationProjectPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertificationProjectPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certificationProjectPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertificationProjectPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certificationProjectResponseImplementors = []string{"CertificationProjectResponse"}

func (ec *executionContext) _CertificationProjectResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CertificationProjectResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certificationProjectResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CertificationProjectResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CertificationProjectResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contactsItemsImplementors = []string{"ContactsItems"}

func (ec *executionContext) _ContactsItems(ctx context.Context, sel ast.SelectionSet, obj *model.ContactsItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactsItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactsItems")
		case "email_address":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContactsItems_email_address(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContactsItems_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerFileImplementors = []string{"ContainerFile"}

func (ec *executionContext) _ContainerFile(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerFile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerFileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerFile")
		case "filename":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerFile_filename(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerFile_content(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerFile_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerFilePaginatedResponseImplementors = []string{"ContainerFilePaginatedResponse"}

func (ec *executionContext) _ContainerFilePaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerFilePaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerFilePaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerFilePaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerFilePaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerFilePaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerFilePaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerFilePaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerFilePaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerGradesImplementors = []string{"ContainerGrades"}

func (ec *executionContext) _ContainerGrades(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerGrades) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerGradesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerGrades")
		case "architecture":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGrades_architecture(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "current_grade":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGrades_current_grade(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "freshness_grades":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGrades_freshness_grades(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGrades_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "next_drop_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGrades_next_drop_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGrades_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGrades_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerGradesEdgesImplementors = []string{"ContainerGradesEdges"}

func (ec *executionContext) _ContainerGradesEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerGradesEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerGradesEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerGradesEdges")
		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGradesEdges_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerGradesListResponseImplementors = []string{"ContainerGradesListResponse"}

func (ec *executionContext) _ContainerGradesListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerGradesListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerGradesListResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerGradesListResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGradesListResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerGradesListResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageImplementors = []string{"ContainerImage"}

func (ec *executionContext) _ContainerImage(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImage")
		case "architecture":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_architecture(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "brew":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_brew(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "certifications":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_certifications(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content_sets":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_content_sets(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cpe_ids":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_cpe_ids(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cpe_ids_rh_base_images":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_cpe_ids_rh_base_images(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "docker_image_digest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_docker_image_digest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "docker_image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_docker_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "freshness_grades":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_freshness_grades(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "object_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_object_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "parsed_data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_parsed_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repositories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_repositories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scan_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_scan_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "certified":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_certified(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isv_pid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_isv_pid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "sum_layer_size_bytes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_sum_layer_size_bytes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "top_layer_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_top_layer_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "uncompressed_top_layer_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_uncompressed_top_layer_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "raw_config":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_raw_config(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImage_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageEdgesImplementors = []string{"ContainerImageEdges"}

func (ec *executionContext) _ContainerImageEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageEdges")
		case "rpm_manifest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageEdges_rpm_manifest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "vulnerabilities":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageEdges_vulnerabilities(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "test_results":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageEdges_test_results(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "artifacts":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageEdges_artifacts(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImagePaginatedResponseImplementors = []string{"ContainerImagePaginatedResponse"}

func (ec *executionContext) _ContainerImagePaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImagePaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImagePaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImagePaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImagePaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImagePaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImagePaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImagePaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImagePaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRPMManifestImplementors = []string{"ContainerImageRPMManifest"}

func (ec *executionContext) _ContainerImageRPMManifest(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRPMManifest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRPMManifestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRPMManifest")
		case "image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifest_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "object_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifest_object_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "rpms":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifest_rpms(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifest__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifest_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifest_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifest_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRPMManifestEdgesImplementors = []string{"ContainerImageRPMManifestEdges"}

func (ec *executionContext) _ContainerImageRPMManifestEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRPMManifestEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRPMManifestEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRPMManifestEdges")
		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifestEdges_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRPMManifestResponseImplementors = []string{"ContainerImageRPMManifestResponse"}

func (ec *executionContext) _ContainerImageRPMManifestResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRPMManifestResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRPMManifestResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRPMManifestResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifestResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRPMManifestResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRepoImplementors = []string{"ContainerImageRepo"}

func (ec *executionContext) _ContainerImageRepo(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRepo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRepoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRepo")
		case "comparison":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_comparison(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content_advisory_ids":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_content_advisory_ids(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image_advisory_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_image_advisory_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "manifest_list_digest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_manifest_list_digest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "manifest_schema2_digest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_manifest_schema2_digest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_published_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "push_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_push_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "registry":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_registry(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "signatures":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_signatures(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepo_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRepoComparisonImplementors = []string{"ContainerImageRepoComparison"}

func (ec *executionContext) _ContainerImageRepoComparison(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRepoComparison) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRepoComparisonImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRepoComparison")
		case "advisory_rpm_mapping":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparison_advisory_rpm_mapping(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "reason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparison_reason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "reason_text":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparison_reason_text(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "rpms":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparison_rpms(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "with_nvr":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparison_with_nvr(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRepoComparisonMappingImplementors = []string{"ContainerImageRepoComparisonMapping"}

func (ec *executionContext) _ContainerImageRepoComparisonMapping(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRepoComparisonMapping) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRepoComparisonMappingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRepoComparisonMapping")
		case "advisory_ids":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparisonMapping_advisory_ids(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "nvra":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparisonMapping_nvra(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRepoComparisonRPMsImplementors = []string{"ContainerImageRepoComparisonRPMs"}

func (ec *executionContext) _ContainerImageRepoComparisonRPMs(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRepoComparisonRPMs) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRepoComparisonRPMsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRepoComparisonRPMs")
		case "downgrade":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparisonRPMs_downgrade(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "new":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparisonRPMs_new(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "remove":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparisonRPMs_remove(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "upgrade":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoComparisonRPMs_upgrade(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRepoEdgesImplementors = []string{"ContainerImageRepoEdges"}

func (ec *executionContext) _ContainerImageRepoEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRepoEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRepoEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRepoEdges")
		case "image_advisory":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoEdges_image_advisory(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoEdges_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRepoTagImplementors = []string{"ContainerImageRepoTag"}

func (ec *executionContext) _ContainerImageRepoTag(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRepoTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRepoTagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRepoTag")
		case "added_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoTag_added_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "manifest_schema1_digest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoTag_manifest_schema1_digest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoTag_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "removed_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoTag_removed_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoTag_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageRepoTagEdgesImplementors = []string{"ContainerImageRepoTagEdges"}

func (ec *executionContext) _ContainerImageRepoTagEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageRepoTagEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageRepoTagEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageRepoTagEdges")
		case "tag_history":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageRepoTagEdges_tag_history(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageResponseImplementors = []string{"ContainerImageResponse"}

func (ec *executionContext) _ContainerImageResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityImplementors = []string{"ContainerImageVulnerability"}

func (ec *executionContext) _ContainerImageVulnerability(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerability) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerability")
		case "advisory_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_advisory_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "advisory_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_advisory_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cve_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_cve_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "object_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_object_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "packages":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_packages(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "public_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_public_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "severity":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_severity(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerability_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityEdgesImplementors = []string{"ContainerImageVulnerabilityEdges"}

func (ec *executionContext) _ContainerImageVulnerabilityEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerabilityEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerabilityEdges")
		case "advisory":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityEdges_advisory(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityFixedByImageImplementors = []string{"ContainerImageVulnerabilityFixedByImage"}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByImage(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerabilityFixedByImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityFixedByImageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerabilityFixedByImage")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityFixedByImage_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repositories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityFixedByImage_repositories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityFixedByImage_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityFixedByImageEdgesImplementors = []string{"ContainerImageVulnerabilityFixedByImageEdges"}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByImageEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerabilityFixedByImageEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityFixedByImageEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerabilityFixedByImageEdges")
		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityFixedByImageEdges_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityFixedByRepositoryImplementors = []string{"ContainerImageVulnerabilityFixedByRepository"}

func (ec *executionContext) _ContainerImageVulnerabilityFixedByRepository(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerabilityFixedByRepository) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityFixedByRepositoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerabilityFixedByRepository")
		case "registry":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityFixedByRepository_registry(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityFixedByRepository_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityFixedByRepository_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityPackageImplementors = []string{"ContainerImageVulnerabilityPackage"}

func (ec *executionContext) _ContainerImageVulnerabilityPackage(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerabilityPackage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityPackageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerabilityPackage")
		case "fixed_by_image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityPackage_fixed_by_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "srpm_nevra":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityPackage_srpm_nevra(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "rpm_nvra":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityPackage_rpm_nvra(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityPaginatedResponseImplementors = []string{"ContainerImageVulnerabilityPaginatedResponse"}

func (ec *executionContext) _ContainerImageVulnerabilityPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerabilityPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerabilityPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityResponseImplementors = []string{"ContainerImageVulnerabilityResponse"}

func (ec *executionContext) _ContainerImageVulnerabilityResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerabilityResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerabilityResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImageVulnerabilityTagImplementors = []string{"ContainerImageVulnerabilityTag"}

func (ec *executionContext) _ContainerImageVulnerabilityTag(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerImageVulnerabilityTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImageVulnerabilityTagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerImageVulnerabilityTag")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerImageVulnerabilityTag_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerRepositoryImplementors = []string{"ContainerRepository"}

func (ec *executionContext) _ContainerRepository(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerRepository) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerRepositoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerRepository")
		case "application_categories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_application_categories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "architectures":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_architectures(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "auto_rebuild_tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_auto_rebuild_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "beta":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_beta(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "build_categories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_build_categories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "can_auto_release_cve_rebuild":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_can_auto_release_cve_rebuild(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cdn_base_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_cdn_base_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content_sets":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_content_sets(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content_stream_grades":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_content_stream_grades(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content_stream_tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_content_stream_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_deprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "display_data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_display_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "documentation_links":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_documentation_links(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "eol_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_eol_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "freshness_grades_unknown_until_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_freshness_grades_unknown_until_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "includes_multiple_content_streams":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_includes_multiple_content_streams(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_community_supported":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_is_community_supported(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isv_pid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_isv_pid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "label_override":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_label_override(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "metrics":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_metrics(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "namespace":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_namespace(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "non_production_only":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_non_production_only(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "object_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_object_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "privileged_images_allowed":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_privileged_images_allowed(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "prm_project_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_prm_project_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_product_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_listings":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_product_listings(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_versions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_product_versions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "protected_for_pull":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_protected_for_pull(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "protected_for_search":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_protected_for_search(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "registry":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_registry(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "registry_target":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_registry_target(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "release_categories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_release_categories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "replaced_by_repository_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_replaced_by_repository_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "requires_terms":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_requires_terms(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "runs_on":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_runs_on(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source_container_image_enabled":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_source_container_image_enabled(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "support_levels":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_support_levels(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tech_preview":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_tech_preview(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total_size_bytes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_total_size_bytes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total_uncompressed_size_bytes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_total_uncompressed_size_bytes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ui_get_this_image_override":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_ui_get_this_image_override(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "vendor_label":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_vendor_label(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepository_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerRepositoryEdgesImplementors = []string{"ContainerRepositoryEdges"}

func (ec *executionContext) _ContainerRepositoryEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerRepositoryEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerRepositoryEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerRepositoryEdges")
		case "certification_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryEdges_certification_project(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "images":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryEdges_images(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_listings":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryEdges_product_listings(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "operator_bundles":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryEdges_operator_bundles(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "replaced_by_repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryEdges_replaced_by_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "vendor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryEdges_vendor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerRepositoryPaginatedResponseImplementors = []string{"ContainerRepositoryPaginatedResponse"}

func (ec *executionContext) _ContainerRepositoryPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerRepositoryPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerRepositoryPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerRepositoryPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerRepositoryResponseImplementors = []string{"ContainerRepositoryResponse"}

func (ec *executionContext) _ContainerRepositoryResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerRepositoryResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerRepositoryResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerRepositoryResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerRepositoryResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerTagHistoryImplementors = []string{"ContainerTagHistory"}

func (ec *executionContext) _ContainerTagHistory(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerTagHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerTagHistoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerTagHistory")
		case "object_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_object_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "registry":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_registry(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_repository(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tag_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_tag_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "history":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_history(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistory_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerTagHistoryEdgesImplementors = []string{"ContainerTagHistoryEdges"}

func (ec *executionContext) _ContainerTagHistoryEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerTagHistoryEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerTagHistoryEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerTagHistoryEdges")
		case "images":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistoryEdges_images(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerTagHistoryPaginatedResponseImplementors = []string{"ContainerTagHistoryPaginatedResponse"}

func (ec *executionContext) _ContainerTagHistoryPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerTagHistoryPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerTagHistoryPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerTagHistoryPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistoryPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistoryPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistoryPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistoryPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistoryPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerTagHistoryResponseImplementors = []string{"ContainerTagHistoryResponse"}

func (ec *executionContext) _ContainerTagHistoryResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerTagHistoryResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerTagHistoryResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerTagHistoryResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistoryResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerTagHistoryResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerVendorImplementors = []string{"ContainerVendor"}

func (ec *executionContext) _ContainerVendor(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerVendor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerVendorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerVendor")
		case "company_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_company_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "contact":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_contact(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "drupal_company_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_drupal_company_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "industries":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_industries(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "label":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_label(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "label_locked":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_label_locked(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "logo_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_logo_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "object_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_object_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "registry_urls":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_registry_urls(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "rss_feed_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_rss_feed_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "service_account_token":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_service_account_token(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "social_media_links":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_social_media_links(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendor_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerVendorContactImplementors = []string{"ContainerVendorContact"}

func (ec *executionContext) _ContainerVendorContact(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerVendorContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerVendorContactImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerVendorContact")
		case "email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorContact_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "phone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorContact_phone(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerVendorEdgesImplementors = []string{"ContainerVendorEdges"}

func (ec *executionContext) _ContainerVendorEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerVendorEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerVendorEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerVendorEdges")
		case "product_listings_org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorEdges_product_listings_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "product_listings_label":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorEdges_product_listings_label(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repositories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorEdges_repositories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerVendorResponseImplementors = []string{"ContainerVendorResponse"}

func (ec *executionContext) _ContainerVendorResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerVendorResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerVendorResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerVendorResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerVendorSocialMediaLinksImplementors = []string{"ContainerVendorSocialMediaLinks"}

func (ec *executionContext) _ContainerVendorSocialMediaLinks(ctx context.Context, sel ast.SelectionSet, obj *model.ContainerVendorSocialMediaLinks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerVendorSocialMediaLinksImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContainerVendorSocialMediaLinks")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorSocialMediaLinks_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContainerVendorSocialMediaLinks_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var descriptionsImplementors = []string{"Descriptions"}

func (ec *executionContext) _Descriptions(ctx context.Context, sel ast.SelectionSet, obj *model.Descriptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, descriptionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Descriptions")
		case "long":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Descriptions_long(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "short":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Descriptions_short(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fAQSItemsImplementors = []string{"FAQSItems"}

func (ec *executionContext) _FAQSItems(ctx context.Context, sel ast.SelectionSet, obj *model.FAQSItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fAQSItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FAQSItems")
		case "answer":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FAQSItems_answer(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "question":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FAQSItems_question(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var featuresItemsImplementors = []string{"FeaturesItems"}

func (ec *executionContext) _FeaturesItems(ctx context.Context, sel ast.SelectionSet, obj *model.FeaturesItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, featuresItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeaturesItems")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FeaturesItems_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FeaturesItems_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forwarderStatusImplementors = []string{"ForwarderStatus"}

func (ec *executionContext) _ForwarderStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ForwarderStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forwarderStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ForwarderStatus")
		case "forwarders":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ForwarderStatus_forwarders(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forwarderStatusInfoImplementors = []string{"ForwarderStatusInfo"}

func (ec *executionContext) _ForwarderStatusInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ForwarderStatusInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forwarderStatusInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ForwarderStatusInfo")
		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ForwarderStatusInfo_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forwarderStatusResponseImplementors = []string{"ForwarderStatusResponse"}

func (ec *executionContext) _ForwarderStatusResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ForwarderStatusResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forwarderStatusResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ForwarderStatusResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ForwarderStatusResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ForwarderStatusResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forwardersImplementors = []string{"Forwarders"}

func (ec *executionContext) _Forwarders(ctx context.Context, sel ast.SelectionSet, obj *model.Forwarders) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forwardersImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Forwarders")
		case "fluentd":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Forwarders_fluentd(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var freshnessGradeImplementors = []string{"FreshnessGrade"}

func (ec *executionContext) _FreshnessGrade(ctx context.Context, sel ast.SelectionSet, obj *model.FreshnessGrade) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, freshnessGradeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FreshnessGrade")
		case "end_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FreshnessGrade_end_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "grade":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FreshnessGrade_grade(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FreshnessGrade_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "start_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FreshnessGrade_start_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var historyImplementors = []string{"History"}

func (ec *executionContext) _History(ctx context.Context, sel ast.SelectionSet, obj *model.History) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("History")
		case "brew_build":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._History_brew_build(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "end_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._History_end_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "start_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._History_start_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueImplementors = []string{"Issue"}

func (ec *executionContext) _Issue(ctx context.Context, sel ast.SelectionSet, obj *model.Issue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Issue")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Issue_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "issue_tracker":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Issue_issue_tracker(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Issue_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var labelImplementors = []string{"Label"}

func (ec *executionContext) _Label(ctx context.Context, sel ast.SelectionSet, obj *model.Label) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, labelImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Label")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Label_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "value":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Label_value(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var legalImplementors = []string{"Legal"}

func (ec *executionContext) _Legal(ctx context.Context, sel ast.SelectionSet, obj *model.Legal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, legalImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Legal")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Legal_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "license_agreement_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Legal_license_agreement_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "privacy_policy_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Legal_privacy_policy_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var linkedResourcesItemsImplementors = []string{"LinkedResourcesItems"}

func (ec *executionContext) _LinkedResourcesItems(ctx context.Context, sel ast.SelectionSet, obj *model.LinkedResourcesItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkedResourcesItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkedResourcesItems")
		case "category":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LinkedResourcesItems_category(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LinkedResourcesItems_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "thumbnail_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LinkedResourcesItems_thumbnail_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LinkedResourcesItems_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LinkedResourcesItems_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LinkedResourcesItems_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logoImplementors = []string{"Logo"}

func (ec *executionContext) _Logo(ctx context.Context, sel ast.SelectionSet, obj *model.Logo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Logo")
		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Logo_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var marketplaceImplementors = []string{"Marketplace"}

func (ec *executionContext) _Marketplace(ctx context.Context, sel ast.SelectionSet, obj *model.Marketplace) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, marketplaceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Marketplace")
		case "enablement_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Marketplace_enablement_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "enablement_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Marketplace_enablement_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "listing_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Marketplace_listing_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Marketplace_published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "create_image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_image(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "update_image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_update_image(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "replace_image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replace_image(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "put_image_by_manifest_digest_registry_and_repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_put_image_by_manifest_digest_registry_and_repository(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "patch_image_by_manifest_digest_registry_and_repository":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patch_image_by_manifest_digest_registry_and_repository(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "update_image_rpm_manifest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_update_image_rpm_manifest(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "replace_image_rpm_manifest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replace_image_rpm_manifest(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_image_rpm_manifest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_image_rpm_manifest(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_certification_project_build_request":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_certification_project_build_request(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_certification_project_scan_request":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_certification_project_scan_request(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_certification_project_tag_request":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_certification_project_tag_request(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "update_vendor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_update_vendor(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_certification_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_certification_project(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "update_certification_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_update_certification_project(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "replace_certification_project":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replace_certification_project(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "replace_product_listing":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replace_product_listing(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "update_product_listing":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_update_product_listing(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_product_listing":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_product_listing(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_api_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_api_key(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "delete_api_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_delete_api_key(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_certification_project_test_result":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_certification_project_test_result(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "update_certification_project_test_result":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_update_certification_project_test_result(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "create_certification_project_artifact":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_create_certification_project_artifact(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorBundleImplementors = []string{"OperatorBundle"}

func (ec *executionContext) _OperatorBundle(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorBundle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorBundleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorBundle")
		case "alm_examples":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_alm_examples(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "annotations":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_annotations(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "architectures":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_architectures(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "bundle":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_bundle(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "bundle_path":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_bundle_path(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "bundle_path_digest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_bundle_path_digest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "capabilities":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_capabilities(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "channel_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_channel_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "csv_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_csv_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "csv_display_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_csv_display_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "csv_description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_csv_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "csv_metadata_description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_csv_metadata_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "in_index_img":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_in_index_img(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "install_modes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_install_modes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_default_channel":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_is_default_channel(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "latest_in_channel":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_latest_in_channel(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ocp_version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_ocp_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "organization":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_organization(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "package":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_package(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "provided_apis":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_provided_apis(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "related_images":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_related_images(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source_index_container_path":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_source_index_container_path(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version_original":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_version_original(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "replaces":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_replaces(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "skips":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_skips(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "skip_range":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_skip_range(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundle_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorBundleAnnotationImplementors = []string{"OperatorBundleAnnotation"}

func (ec *executionContext) _OperatorBundleAnnotation(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorBundleAnnotation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorBundleAnnotationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorBundleAnnotation")
		case "infrastructure_features":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundleAnnotation_infrastructure_features(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "valid_subscription":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundleAnnotation_valid_subscription(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorBundleInstallModeImplementors = []string{"OperatorBundleInstallMode"}

func (ec *executionContext) _OperatorBundleInstallMode(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorBundleInstallMode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorBundleInstallModeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorBundleInstallMode")
		case "supported":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundleInstallMode_supported(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundleInstallMode_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorBundlePaginatedResponseImplementors = []string{"OperatorBundlePaginatedResponse"}

func (ec *executionContext) _OperatorBundlePaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorBundlePaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorBundlePaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorBundlePaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundlePaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundlePaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundlePaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundlePaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundlePaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorBundlesItemsImplementors = []string{"OperatorBundlesItems"}

func (ec *executionContext) _OperatorBundlesItems(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorBundlesItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorBundlesItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorBundlesItems")
		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundlesItems__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "package":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundlesItems_package(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "capabilities":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorBundlesItems_capabilities(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorIndexImplementors = []string{"OperatorIndex"}

func (ec *executionContext) _OperatorIndex(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorIndex) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorIndexImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorIndex")
		case "ocp_version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndex_ocp_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "organization":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndex_organization(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "path":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndex_path(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "end_of_life":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndex_end_of_life(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndex__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndex_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndex_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorIndexPaginatedResponseImplementors = []string{"OperatorIndexPaginatedResponse"}

func (ec *executionContext) _OperatorIndexPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorIndexPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorIndexPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorIndexPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndexPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndexPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndexPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndexPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndexPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorIndexResponseImplementors = []string{"OperatorIndexResponse"}

func (ec *executionContext) _OperatorIndexResponse(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorIndexResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorIndexResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorIndexResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndexResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorIndexResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorPackageImplementors = []string{"OperatorPackage"}

func (ec *executionContext) _OperatorPackage(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorPackage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorPackageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorPackage")
		case "association":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackage_association(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "package_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackage_package_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackage_source(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackage__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackage_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackage_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorPackagePaginatedResponseImplementors = []string{"OperatorPackagePaginatedResponse"}

func (ec *executionContext) _OperatorPackagePaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorPackagePaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorPackagePaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorPackagePaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackagePaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackagePaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackagePaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackagePaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackagePaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorPackageResponseImplementors = []string{"OperatorPackageResponse"}

func (ec *executionContext) _OperatorPackageResponse(ctx context.Context, sel ast.SelectionSet, obj *model.OperatorPackageResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorPackageResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorPackageResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackageResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._OperatorPackageResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var parsedDataImplementors = []string{"ParsedData"}

func (ec *executionContext) _ParsedData(ctx context.Context, sel ast.SelectionSet, obj *model.ParsedData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, parsedDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ParsedData")
		case "architecture":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_architecture(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "author":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_author(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "command":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_command(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "comment":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_comment(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "container":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_container(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "created":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_created(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "docker_image_digest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_docker_image_digest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "docker_image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_docker_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "docker_version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_docker_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "env_variables":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_env_variables(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "labels":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_labels(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "layers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_layers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "os":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_os(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ports":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_ports(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repos":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_repos(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "uncompressed_layer_sizes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_uncompressed_layer_sizes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "uncompressed_size_bytes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_uncompressed_size_bytes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "user":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_user(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "virtual_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedData_virtual_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var parsedDataRepoImplementors = []string{"ParsedDataRepo"}

func (ec *executionContext) _ParsedDataRepo(ctx context.Context, sel ast.SelectionSet, obj *model.ParsedDataRepo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, parsedDataRepoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ParsedDataRepo")
		case "baseurl":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedDataRepo_baseurl(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "expire":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedDataRepo_expire(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "filename":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedDataRepo_filename(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedDataRepo_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedDataRepo_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pkgs":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedDataRepo_pkgs(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedDataRepo_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "updated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ParsedDataRepo_updated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productListingImplementors = []string{"ProductListing"}

func (ec *executionContext) _ProductListing(ctx context.Context, sel ast.SelectionSet, obj *model.ProductListing) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productListingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductListing")
		case "badges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_badges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "category":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_category(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cert_projects":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_cert_projects(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "contacts":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_contacts(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "descriptions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_descriptions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "drupal_company_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_drupal_company_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "faqs":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_faqs(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "features":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_features(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "functional_categories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_functional_categories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "legal":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_legal(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "linked_resources":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_linked_resources(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "logo":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_logo(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "marketplace":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_marketplace(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "quick_start_configuration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_quick_start_configuration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "repositories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_repositories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "search_aliases":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_search_aliases(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "support":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_support(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "vendor_label":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_vendor_label(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "operator_bundles":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_operator_bundles(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "org_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_org_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListing_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productListingEdgesImplementors = []string{"ProductListingEdges"}

func (ec *executionContext) _ProductListingEdges(ctx context.Context, sel ast.SelectionSet, obj *model.ProductListingEdges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productListingEdgesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductListingEdges")
		case "vendor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListingEdges_vendor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productListingPaginatedResponseImplementors = []string{"ProductListingPaginatedResponse"}

func (ec *executionContext) _ProductListingPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ProductListingPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productListingPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductListingPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListingPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListingPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListingPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListingPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListingPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productListingResponseImplementors = []string{"ProductListingResponse"}

func (ec *executionContext) _ProductListingResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ProductListingResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productListingResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductListingResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListingResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProductListingResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providedAPIsItemsImplementors = []string{"ProvidedAPIsItems"}

func (ec *executionContext) _ProvidedAPIsItems(ctx context.Context, sel ast.SelectionSet, obj *model.ProvidedAPIsItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providedAPIsItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProvidedAPIsItems")
		case "group":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProvidedAPIsItems_group(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "kind":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProvidedAPIsItems_kind(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plural":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProvidedAPIsItems_plural(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ProvidedAPIsItems_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pullRequestImplementors = []string{"PullRequest"}

func (ec *executionContext) _PullRequest(ctx context.Context, sel ast.SelectionSet, obj *model.PullRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pullRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PullRequest")
		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PullRequest_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PullRequest_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PullRequest_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "get_image":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_image(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "find_images":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_find_images(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_cert_project_test_result":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_cert_project_test_result(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_cert_project_test_results":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_cert_project_test_results(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_test_results_by_image_id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_test_results_by_image_id(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_cert_project_artifact":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_cert_project_artifact(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_cert_project_artifacts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_cert_project_artifacts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_certification_artifacts_by_image_id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_certification_artifacts_by_image_id(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_rpm_manifest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_rpm_manifest(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_image_rpm_manifest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_image_rpm_manifest(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_certification_project":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_certification_project(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "get_certification_project_by_pid":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get_certification_project_by_pid(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "find_certification_projects_images":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_find_certification_projects_images(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "__schema":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quickStartConfigurationImplementors = []string{"QuickStartConfiguration"}

func (ec *executionContext) _QuickStartConfiguration(ctx context.Context, sel ast.SelectionSet, obj *model.QuickStartConfiguration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quickStartConfigurationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuickStartConfiguration")
		case "instructions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._QuickStartConfiguration_instructions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var redHatContainerAdvisoryImplementors = []string{"RedHatContainerAdvisory"}

func (ec *executionContext) _RedHatContainerAdvisory(ctx context.Context, sel ast.SelectionSet, obj *model.RedHatContainerAdvisory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, redHatContainerAdvisoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RedHatContainerAdvisory")
		case "_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory__id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_content_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "object_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_object_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "severity":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_severity(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ship_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_ship_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "solution":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_solution(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "synopsis":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_synopsis(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "topic":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_topic(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cves":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_cves(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "issues":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_issues(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "creation_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_creation_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisory_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var redHatContainerAdvisoryPaginatedResponseImplementors = []string{"RedHatContainerAdvisoryPaginatedResponse"}

func (ec *executionContext) _RedHatContainerAdvisoryPaginatedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RedHatContainerAdvisoryPaginatedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, redHatContainerAdvisoryPaginatedResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RedHatContainerAdvisoryPaginatedResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisoryPaginatedResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisoryPaginatedResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisoryPaginatedResponse_page(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "page_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisoryPaginatedResponse_page_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "total":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisoryPaginatedResponse_total(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var redHatContainerAdvisoryResponseImplementors = []string{"RedHatContainerAdvisoryResponse"}

func (ec *executionContext) _RedHatContainerAdvisoryResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RedHatContainerAdvisoryResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, redHatContainerAdvisoryResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RedHatContainerAdvisoryResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisoryResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RedHatContainerAdvisoryResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var relatedImagesItemsImplementors = []string{"RelatedImagesItems"}

func (ec *executionContext) _RelatedImagesItems(ctx context.Context, sel ast.SelectionSet, obj *model.RelatedImagesItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, relatedImagesItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelatedImagesItems")
		case "digest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RelatedImagesItems_digest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RelatedImagesItems_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RelatedImagesItems_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryContentStreamGradesImplementors = []string{"RepositoryContentStreamGrades"}

func (ec *executionContext) _RepositoryContentStreamGrades(ctx context.Context, sel ast.SelectionSet, obj *model.RepositoryContentStreamGrades) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryContentStreamGradesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryContentStreamGrades")
		case "tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryContentStreamGrades_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "grade":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryContentStreamGrades_grade(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryDisplayDataImplementors = []string{"RepositoryDisplayData"}

func (ec *executionContext) _RepositoryDisplayData(ctx context.Context, sel ast.SelectionSet, obj *model.RepositoryDisplayData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryDisplayDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryDisplayData")
		case "long_description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryDisplayData_long_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "long_description_markdown":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryDisplayData_long_description_markdown(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryDisplayData_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "openshift_tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryDisplayData_openshift_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "short_description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryDisplayData_short_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryDocumentationLinkImplementors = []string{"RepositoryDocumentationLink"}

func (ec *executionContext) _RepositoryDocumentationLink(ctx context.Context, sel ast.SelectionSet, obj *model.RepositoryDocumentationLink) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryDocumentationLinkImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryDocumentationLink")
		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryDocumentationLink_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryDocumentationLink_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryDocumentationLink_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryLabelOverrideImplementors = []string{"RepositoryLabelOverride"}

func (ec *executionContext) _RepositoryLabelOverride(ctx context.Context, sel ast.SelectionSet, obj *model.RepositoryLabelOverride) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryLabelOverrideImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryLabelOverride")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryLabelOverride_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "io_k8s_displayName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryLabelOverride_io_k8s_displayName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "io_openshift_tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryLabelOverride_io_openshift_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "summary":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryLabelOverride_summary(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryMetricsImplementors = []string{"RepositoryMetrics"}

func (ec *executionContext) _RepositoryMetrics(ctx context.Context, sel ast.SelectionSet, obj *model.RepositoryMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryMetricsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryMetrics")
		case "last_update_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryMetrics_last_update_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pulls_in_last_30_days":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryMetrics_pulls_in_last_30_days(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryRunsOnImplementors = []string{"RepositoryRunsOn"}

func (ec *executionContext) _RepositoryRunsOn(ctx context.Context, sel ast.SelectionSet, obj *model.RepositoryRunsOn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryRunsOnImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryRunsOn")
		case "openshift_online":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RepositoryRunsOn_openshift_online(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseErrorImplementors = []string{"ResponseError"}

func (ec *executionContext) _ResponseError(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseErrorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseError")
		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseError_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "detail":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseError_detail(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resultsImplementors = []string{"Results"}

func (ec *executionContext) _Results(ctx context.Context, sel ast.SelectionSet, obj *model.Results) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resultsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Results")
		case "failed":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Results_failed(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "errors":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Results_errors(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "passed":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Results_passed(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rpmsItemsImplementors = []string{"RpmsItems"}

func (ec *executionContext) _RpmsItems(ctx context.Context, sel ast.SelectionSet, obj *model.RpmsItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rpmsItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RpmsItems")
		case "architecture":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_architecture(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "gpg":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_gpg(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "nvra":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_nvra(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "release":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_release(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "srpm_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_srpm_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "srpm_nevra":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_srpm_nevra(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "summary":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_summary(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._RpmsItems_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var searchAliasesItemsImplementors = []string{"SearchAliasesItems"}

func (ec *executionContext) _SearchAliasesItems(ctx context.Context, sel ast.SelectionSet, obj *model.SearchAliasesItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchAliasesItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchAliasesItems")
		case "key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SearchAliasesItems_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "value":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SearchAliasesItems_value(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var signatureInfoImplementors = []string{"SignatureInfo"}

func (ec *executionContext) _SignatureInfo(ctx context.Context, sel ast.SelectionSet, obj *model.SignatureInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signatureInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignatureInfo")
		case "key_long_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SignatureInfo_key_long_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SignatureInfo_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stringResponseImplementors = []string{"StringResponse"}

func (ec *executionContext) _StringResponse(ctx context.Context, sel ast.SelectionSet, obj *model.StringResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stringResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StringResponse")
		case "data":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StringResponse_data(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StringResponse_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supportImplementors = []string{"Support"}

func (ec *executionContext) _Support(ctx context.Context, sel ast.SelectionSet, obj *model.Support) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supportImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Support")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Support_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "email_address":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Support_email_address(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "phone_number":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Support_phone_number(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Support_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testLibraryImplementors = []string{"TestLibrary"}

func (ec *executionContext) _TestLibrary(ctx context.Context, sel ast.SelectionSet, obj *model.TestLibrary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testLibraryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestLibrary")
		case "commit":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestLibrary_commit(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestLibrary_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestLibrary_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testResultsImplementors = []string{"TestResults"}

func (ec *executionContext) _TestResults(ctx context.Context, sel ast.SelectionSet, obj *model.TestResults) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testResultsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestResults")
		case "check_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestResults_check_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestResults_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "elapsed_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestResults_elapsed_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "help":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestResults_help(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "knowledgebase_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestResults_knowledgebase_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestResults_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "suggestion":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestResults_suggestion(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testedOnImplementors = []string{"TestedOn"}

func (ec *executionContext) _TestedOn(ctx context.Context, sel ast.SelectionSet, obj *model.TestedOn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testedOnImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestedOn")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestedOn_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TestedOn_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var uncompressedLayerSizeImplementors = []string{"UncompressedLayerSize"}

func (ec *executionContext) _UncompressedLayerSize(ctx context.Context, sel ast.SelectionSet, obj *model.UncompressedLayerSize) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, uncompressedLayerSizeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UncompressedLayerSize")
		case "layer_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UncompressedLayerSize_layer_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "size_bytes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UncompressedLayerSize_size_bytes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "locations":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_locations(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_isRepeatable(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_defaultValue(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "types":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_types(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_queryType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_mutationType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subscriptionType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_subscriptionType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "directives":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_directives(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_kind(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_fields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interfaces":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_interfaces(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "possibleTypes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_possibleTypes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "enumValues":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_enumValues(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "inputFields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_inputFields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ofType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_ofType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "specifiedByURL":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_specifiedByURL(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOALMExample2ᚕᚖexampleᚋgraphᚋmodelᚐALMExample(ctx context.Context, sel ast.SelectionSet, v []*model.ALMExample) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOALMExample2ᚖexampleᚋgraphᚋmodelᚐALMExample(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOALMExample2ᚖexampleᚋgraphᚋmodelᚐALMExample(ctx context.Context, sel ast.SelectionSet, v *model.ALMExample) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ALMExample(ctx, sel, v)
}

func (ec *executionContext) unmarshalOALMExampleElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐALMExampleElemMatchFilter(ctx context.Context, v interface{}) (*model.ALMExampleElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputALMExampleElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOALMExampleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx context.Context, v interface{}) ([]*model.ALMExampleFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ALMExampleFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOALMExampleFilter2ᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOALMExampleFilter2ᚖexampleᚋgraphᚋmodelᚐALMExampleFilter(ctx context.Context, v interface{}) (*model.ALMExampleFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputALMExampleFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAnalyticsPageViews2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPageViews(ctx context.Context, sel ast.SelectionSet, v *model.AnalyticsPageViews) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalyticsPageViews(ctx, sel, v)
}

func (ec *executionContext) marshalOAnalyticsPageViewsByDate2ᚕᚖexampleᚋgraphᚋmodelᚐAnalyticsPageViewsByDate(ctx context.Context, sel ast.SelectionSet, v []*model.AnalyticsPageViewsByDate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnalyticsPageViewsByDate2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPageViewsByDate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnalyticsPageViewsByDate2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPageViewsByDate(ctx context.Context, sel ast.SelectionSet, v *model.AnalyticsPageViewsByDate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalyticsPageViewsByDate(ctx, sel, v)
}

func (ec *executionContext) marshalOAnalyticsPullCount2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCount(ctx context.Context, sel ast.SelectionSet, v *model.AnalyticsPullCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalyticsPullCount(ctx, sel, v)
}

func (ec *executionContext) marshalOAnalyticsPullCountByCostumer2ᚕᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCountByCostumer(ctx context.Context, sel ast.SelectionSet, v []*model.AnalyticsPullCountByCostumer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnalyticsPullCountByCostumer2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCountByCostumer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnalyticsPullCountByCostumer2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCountByCostumer(ctx context.Context, sel ast.SelectionSet, v *model.AnalyticsPullCountByCostumer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalyticsPullCountByCostumer(ctx, sel, v)
}

func (ec *executionContext) marshalOAnalyticsPullCountByTag2ᚕᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCountByTag(ctx context.Context, sel ast.SelectionSet, v []*model.AnalyticsPullCountByTag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnalyticsPullCountByTag2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCountByTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnalyticsPullCountByTag2ᚖexampleᚋgraphᚋmodelᚐAnalyticsPullCountByTag(ctx context.Context, sel ast.SelectionSet, v *model.AnalyticsPullCountByTag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalyticsPullCountByTag(ctx, sel, v)
}

func (ec *executionContext) marshalOApiKey2ᚕᚖexampleᚋgraphᚋmodelᚐAPIKey(ctx context.Context, sel ast.SelectionSet, v []*model.APIKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApiKey2ᚖexampleᚋgraphᚋmodelᚐAPIKey(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOApiKey2ᚖexampleᚋgraphᚋmodelᚐAPIKey(ctx context.Context, sel ast.SelectionSet, v *model.APIKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiKey(ctx, sel, v)
}

func (ec *executionContext) unmarshalOApiKeyInput2ᚖexampleᚋgraphᚋmodelᚐAPIKeyInput(ctx context.Context, v interface{}) (*model.APIKeyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApiKeyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOApiKeyResponse2ᚖexampleᚋgraphᚋmodelᚐAPIKeyResponse(ctx context.Context, sel ast.SelectionSet, v *model.APIKeyResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiKeyResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOAssessment2ᚕᚖexampleᚋgraphᚋmodelᚐAssessment(ctx context.Context, sel ast.SelectionSet, v []*model.Assessment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAssessment2ᚖexampleᚋgraphᚋmodelᚐAssessment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAssessment2ᚖexampleᚋgraphᚋmodelᚐAssessment(ctx context.Context, sel ast.SelectionSet, v *model.Assessment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Assessment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAssessmentElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐAssessmentElemMatchFilter(ctx context.Context, v interface{}) (*model.AssessmentElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAssessmentElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAssessmentFilter2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx context.Context, v interface{}) ([]*model.AssessmentFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AssessmentFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAssessmentFilter2ᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAssessmentFilter2ᚖexampleᚋgraphᚋmodelᚐAssessmentFilter(ctx context.Context, v interface{}) (*model.AssessmentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAssessmentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAssessmentInput2ᚕᚖexampleᚋgraphᚋmodelᚐAssessmentInput(ctx context.Context, v interface{}) ([]*model.AssessmentInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AssessmentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAssessmentInput2ᚖexampleᚋgraphᚋmodelᚐAssessmentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAssessmentInput2ᚖexampleᚋgraphᚋmodelᚐAssessmentInput(ctx context.Context, v interface{}) (*model.AssessmentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAssessmentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBadgesItems2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItems(ctx context.Context, sel ast.SelectionSet, v []*model.BadgesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBadgesItems2ᚖexampleᚋgraphᚋmodelᚐBadgesItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBadgesItems2ᚖexampleᚋgraphᚋmodelᚐBadgesItems(ctx context.Context, sel ast.SelectionSet, v *model.BadgesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BadgesItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBadgesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐBadgesItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.BadgesItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBadgesItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBadgesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx context.Context, v interface{}) ([]*model.BadgesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.BadgesItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBadgesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBadgesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐBadgesItemsFilter(ctx context.Context, v interface{}) (*model.BadgesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBadgesItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBase64OpenPGPEncrypted2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBase64OpenPGPEncrypted2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOBinarySignature2ᚖexampleᚋgraphᚋmodelᚐBinarySignature(ctx context.Context, sel ast.SelectionSet, v *model.BinarySignature) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BinarySignature(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOBooleanFilter2ᚖexampleᚋgraphᚋmodelᚐBooleanFilter(ctx context.Context, v interface{}) (*model.BooleanFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBrew2ᚖexampleᚋgraphᚋmodelᚐBrew(ctx context.Context, sel ast.SelectionSet, v *model.Brew) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Brew(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBrewFilter2ᚕᚖexampleᚋgraphᚋmodelᚐBrewFilter(ctx context.Context, v interface{}) ([]*model.BrewFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.BrewFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBrewFilter2ᚖexampleᚋgraphᚋmodelᚐBrewFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBrewFilter2ᚖexampleᚋgraphᚋmodelᚐBrewFilter(ctx context.Context, v interface{}) (*model.BrewFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBrewFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBrewInput2ᚖexampleᚋgraphᚋmodelᚐBrewInput(ctx context.Context, v interface{}) (*model.BrewInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBrewInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCVE2ᚕᚖexampleᚋgraphᚋmodelᚐCve(ctx context.Context, sel ast.SelectionSet, v []*model.Cve) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCVE2ᚖexampleᚋgraphᚋmodelᚐCve(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCVE2ᚖexampleᚋgraphᚋmodelᚐCve(ctx context.Context, sel ast.SelectionSet, v *model.Cve) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CVE(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCVEElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐCVEElemMatchFilter(ctx context.Context, v interface{}) (*model.CVEElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCVEElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCVEFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx context.Context, v interface{}) ([]*model.CVEFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CVEFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCVEFilter2ᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCVEFilter2ᚖexampleᚋgraphᚋmodelᚐCVEFilter(ctx context.Context, v interface{}) (*model.CVEFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCVEFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectArtifact2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectArtifact(ctx context.Context, sel ast.SelectionSet, v []*model.CertProjectArtifact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCertProjectArtifact2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCertProjectArtifact2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifact(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectArtifact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectArtifact(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectArtifactEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactEdges(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectArtifactEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectArtifactEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectArtifactFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx context.Context, v interface{}) ([]*model.CertProjectArtifactFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectArtifactFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectArtifactFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectArtifactFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactFilter(ctx context.Context, v interface{}) (*model.CertProjectArtifactFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectArtifactFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectArtifactPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectArtifactPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectArtifactPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectArtifactResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectArtifactResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectArtifactResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectArtifactResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectBuildLog2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildLog(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectBuildLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectBuildLog(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectBuildLogResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildLogResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectBuildLogResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectBuildLogResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectBuildRequest2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequest(ctx context.Context, sel ast.SelectionSet, v []*model.CertProjectBuildRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCertProjectBuildRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCertProjectBuildRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequest(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectBuildRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectBuildRequest(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectBuildRequestEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestEdges(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectBuildRequestEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectBuildRequestEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectBuildRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestFilter(ctx context.Context, v interface{}) ([]*model.CertProjectBuildRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectBuildRequestFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectBuildRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectBuildRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestFilter(ctx context.Context, v interface{}) (*model.CertProjectBuildRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectBuildRequestFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectBuildRequestInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestInput(ctx context.Context, v interface{}) (*model.CertProjectBuildRequestInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectBuildRequestInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectBuildRequestPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectBuildRequestPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectBuildRequestPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectBuildRequestResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectBuildRequestResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectBuildRequestResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectBuildRequestResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectContacts2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContacts(ctx context.Context, sel ast.SelectionSet, v []*model.CertProjectContacts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCertProjectContacts2ᚖexampleᚋgraphᚋmodelᚐCertProjectContacts(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCertProjectContacts2ᚖexampleᚋgraphᚋmodelᚐCertProjectContacts(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectContacts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectContacts(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectContactsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsElemMatchFilter(ctx context.Context, v interface{}) (*model.CertProjectContactsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectContactsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectContactsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx context.Context, v interface{}) ([]*model.CertProjectContactsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectContactsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectContactsFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectContactsFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsFilter(ctx context.Context, v interface{}) (*model.CertProjectContactsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectContactsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectContactsInput2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContactsInput(ctx context.Context, v interface{}) ([]*model.CertProjectContactsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectContactsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectContactsInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectContactsInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectContactsInput(ctx context.Context, v interface{}) (*model.CertProjectContactsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectContactsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectContainer2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainer(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectContainer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectContainer(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectContainerEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainerEdges(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectContainerEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectContainerEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectContainerFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectContainerFilter(ctx context.Context, v interface{}) ([]*model.CertProjectContainerFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectContainerFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectContainerFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainerFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectContainerFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainerFilter(ctx context.Context, v interface{}) (*model.CertProjectContainerFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectContainerFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectContainerInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectContainerInput(ctx context.Context, v interface{}) (*model.CertProjectContainerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectContainerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectDrupal2ᚖexampleᚋgraphᚋmodelᚐCertProjectDrupal(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectDrupal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectDrupal(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectDrupalFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectDrupalFilter(ctx context.Context, v interface{}) ([]*model.CertProjectDrupalFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectDrupalFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectDrupalFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectDrupalFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectDrupalFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectDrupalFilter(ctx context.Context, v interface{}) (*model.CertProjectDrupalFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectDrupalFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectHelmChart2ᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChart(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectHelmChart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectHelmChart(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectHelmChartFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartFilter(ctx context.Context, v interface{}) ([]*model.CertProjectHelmChartFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectHelmChartFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectHelmChartFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectHelmChartFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartFilter(ctx context.Context, v interface{}) (*model.CertProjectHelmChartFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectHelmChartFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectHelmChartInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectHelmChartInput(ctx context.Context, v interface{}) (*model.CertProjectHelmChartInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectHelmChartInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectMarketplace2ᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplace(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectMarketplace) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectMarketplace(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectMarketplaceFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceFilter(ctx context.Context, v interface{}) ([]*model.CertProjectMarketplaceFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectMarketplaceFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectMarketplaceFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectMarketplaceFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceFilter(ctx context.Context, v interface{}) (*model.CertProjectMarketplaceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectMarketplaceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectMarketplaceInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectMarketplaceInput(ctx context.Context, v interface{}) (*model.CertProjectMarketplaceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectMarketplaceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectRedhat2ᚖexampleᚋgraphᚋmodelᚐCertProjectRedhat(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectRedhat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectRedhat(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectRedhatFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatFilter(ctx context.Context, v interface{}) ([]*model.CertProjectRedhatFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectRedhatFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectRedhatFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectRedhatFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatFilter(ctx context.Context, v interface{}) (*model.CertProjectRedhatFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectRedhatFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectRedhatInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectRedhatInput(ctx context.Context, v interface{}) (*model.CertProjectRedhatInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectRedhatInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectScanRequest2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequest(ctx context.Context, sel ast.SelectionSet, v []*model.CertProjectScanRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCertProjectScanRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCertProjectScanRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequest(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectScanRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectScanRequest(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectScanRequestEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestEdges(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectScanRequestEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectScanRequestEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectScanRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestFilter(ctx context.Context, v interface{}) ([]*model.CertProjectScanRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectScanRequestFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectScanRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectScanRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestFilter(ctx context.Context, v interface{}) (*model.CertProjectScanRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectScanRequestFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectScanRequestInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestInput(ctx context.Context, v interface{}) (*model.CertProjectScanRequestInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectScanRequestInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectScanRequestPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectScanRequestPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectScanRequestPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectScanRequestResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectScanRequestResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectScanRequestResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectScanRequestResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectSelfCertification2ᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertification(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectSelfCertification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectSelfCertification(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectSelfCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationFilter(ctx context.Context, v interface{}) ([]*model.CertProjectSelfCertificationFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectSelfCertificationFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectSelfCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectSelfCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationFilter(ctx context.Context, v interface{}) (*model.CertProjectSelfCertificationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectSelfCertificationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectSelfCertificationInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectSelfCertificationInput(ctx context.Context, v interface{}) (*model.CertProjectSelfCertificationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectSelfCertificationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectTagRequest2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequest(ctx context.Context, sel ast.SelectionSet, v []*model.CertProjectTagRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCertProjectTagRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCertProjectTagRequest2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequest(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectTagRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectTagRequest(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectTagRequestEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestEdges(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectTagRequestEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectTagRequestEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectTagRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestFilter(ctx context.Context, v interface{}) ([]*model.CertProjectTagRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectTagRequestFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectTagRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectTagRequestFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestFilter(ctx context.Context, v interface{}) (*model.CertProjectTagRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectTagRequestFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectTagRequestInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestInput(ctx context.Context, v interface{}) (*model.CertProjectTagRequestInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectTagRequestInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectTagRequestPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectTagRequestPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectTagRequestPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectTagRequestResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTagRequestResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectTagRequestResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectTagRequestResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectTestResult2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTestResult(ctx context.Context, sel ast.SelectionSet, v []*model.CertProjectTestResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCertProjectTestResult2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCertProjectTestResult2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResult(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectTestResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectTestResult(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectTestResultEdges2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultEdges(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectTestResultEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectTestResultEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertProjectTestResultFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx context.Context, v interface{}) ([]*model.CertProjectTestResultFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertProjectTestResultFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertProjectTestResultFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertProjectTestResultFilter2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultFilter(ctx context.Context, v interface{}) (*model.CertProjectTestResultFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectTestResultFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertProjectTestResultInput2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultInput(ctx context.Context, v interface{}) (*model.CertProjectTestResultInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertProjectTestResultInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertProjectTestResultPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectTestResultPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectTestResultPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertProjectTestResultResponse2ᚖexampleᚋgraphᚋmodelᚐCertProjectTestResultResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertProjectTestResultResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertProjectTestResultResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertification2ᚕᚖexampleᚋgraphᚋmodelᚐCertification(ctx context.Context, sel ast.SelectionSet, v []*model.Certification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCertification2ᚖexampleᚋgraphᚋmodelᚐCertification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCertification2ᚖexampleᚋgraphᚋmodelᚐCertification(ctx context.Context, sel ast.SelectionSet, v *model.Certification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Certification(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertificationElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationElemMatchFilter(ctx context.Context, v interface{}) (*model.CertificationElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertificationElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertificationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx context.Context, v interface{}) ([]*model.CertificationFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertificationFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertificationFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationFilter(ctx context.Context, v interface{}) (*model.CertificationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertificationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertificationProject2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationProject(ctx context.Context, sel ast.SelectionSet, v []*model.CertificationProject) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCertificationProject2ᚖexampleᚋgraphᚋmodelᚐCertificationProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCertificationProject2ᚖexampleᚋgraphᚋmodelᚐCertificationProject(ctx context.Context, sel ast.SelectionSet, v *model.CertificationProject) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertificationProject(ctx, sel, v)
}

func (ec *executionContext) marshalOCertificationProjectEdges2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectEdges(ctx context.Context, sel ast.SelectionSet, v *model.CertificationProjectEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertificationProjectEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCertificationProjectFilter2ᚕᚖexampleᚋgraphᚋmodelᚐCertificationProjectFilter(ctx context.Context, v interface{}) ([]*model.CertificationProjectFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CertificationProjectFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCertificationProjectFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCertificationProjectFilter2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectFilter(ctx context.Context, v interface{}) (*model.CertificationProjectFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertificationProjectFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCertificationProjectInput2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectInput(ctx context.Context, v interface{}) (*model.CertificationProjectInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCertificationProjectInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertificationProjectPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertificationProjectPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertificationProjectPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCertificationProjectResponse2ᚖexampleᚋgraphᚋmodelᚐCertificationProjectResponse(ctx context.Context, sel ast.SelectionSet, v *model.CertificationProjectResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CertificationProjectResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContactsItems2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItems(ctx context.Context, sel ast.SelectionSet, v []*model.ContactsItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContactsItems2ᚖexampleᚋgraphᚋmodelᚐContactsItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContactsItems2ᚖexampleᚋgraphᚋmodelᚐContactsItems(ctx context.Context, sel ast.SelectionSet, v *model.ContactsItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContactsItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContactsItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContactsItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.ContactsItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactsItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContactsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx context.Context, v interface{}) ([]*model.ContactsItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContactsItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContactsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContactsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐContactsItemsFilter(ctx context.Context, v interface{}) (*model.ContactsItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactsItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContactsItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐContactsItemsInput(ctx context.Context, v interface{}) ([]*model.ContactsItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContactsItemsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContactsItemsInput2ᚖexampleᚋgraphᚋmodelᚐContactsItemsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContactsItemsInput2ᚖexampleᚋgraphᚋmodelᚐContactsItemsInput(ctx context.Context, v interface{}) (*model.ContactsItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactsItemsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerFile2ᚕᚖexampleᚋgraphᚋmodelᚐContainerFile(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerFile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerFile2ᚖexampleᚋgraphᚋmodelᚐContainerFile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerFile2ᚖexampleᚋgraphᚋmodelᚐContainerFile(ctx context.Context, sel ast.SelectionSet, v *model.ContainerFile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerFile(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerFileFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerFileFilter(ctx context.Context, v interface{}) ([]*model.ContainerFileFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerFileFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerFileFilter2ᚖexampleᚋgraphᚋmodelᚐContainerFileFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerFileFilter2ᚖexampleᚋgraphᚋmodelᚐContainerFileFilter(ctx context.Context, v interface{}) (*model.ContainerFileFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerFileFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerGrades2ᚕᚖexampleᚋgraphᚋmodelᚐContainerGrades(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerGrades) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerGrades2ᚖexampleᚋgraphᚋmodelᚐContainerGrades(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerGrades2ᚖexampleᚋgraphᚋmodelᚐContainerGrades(ctx context.Context, sel ast.SelectionSet, v *model.ContainerGrades) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerGrades(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerGradesEdges2ᚖexampleᚋgraphᚋmodelᚐContainerGradesEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerGradesEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerGradesEdges(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImage2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImage(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerImage2ᚖexampleᚋgraphᚋmodelᚐContainerImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerImage2ᚖexampleᚋgraphᚋmodelᚐContainerImage(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImage(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageFilter(ctx context.Context, v interface{}) (*model.ContainerImageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageInput(ctx context.Context, v interface{}) (*model.ContainerImageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImagePaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImagePaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImagePaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImagePaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageRPMManifest2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifest(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRPMManifest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRPMManifest(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageRPMManifestEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRPMManifestEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRPMManifestEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageRPMManifestInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestInput(ctx context.Context, v interface{}) (*model.ContainerImageRPMManifestInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRPMManifestInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageRPMManifestResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageRPMManifestResponse(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRPMManifestResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRPMManifestResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageRepo2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepo(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerImageRepo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerImageRepo2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerImageRepo2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepo(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRepo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRepo(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageRepoComparison2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparison(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRepoComparison) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRepoComparison(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageRepoComparisonFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageRepoComparisonFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageRepoComparisonFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonFilter(ctx context.Context, v interface{}) (*model.ContainerImageRepoComparisonFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoComparisonFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonInput(ctx context.Context, v interface{}) (*model.ContainerImageRepoComparisonInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoComparisonInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageRepoComparisonMapping2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMapping(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerImageRepoComparisonMapping) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerImageRepoComparisonMapping2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMapping(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerImageRepoComparisonMapping2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMapping(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRepoComparisonMapping) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRepoComparisonMapping(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonMappingElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingElemMatchFilter(ctx context.Context, v interface{}) (*model.ContainerImageRepoComparisonMappingElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoComparisonMappingElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonMappingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageRepoComparisonMappingFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageRepoComparisonMappingFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageRepoComparisonMappingFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonMappingFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingFilter(ctx context.Context, v interface{}) (*model.ContainerImageRepoComparisonMappingFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoComparisonMappingFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonMappingInput2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingInput(ctx context.Context, v interface{}) ([]*model.ContainerImageRepoComparisonMappingInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageRepoComparisonMappingInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageRepoComparisonMappingInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonMappingInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonMappingInput(ctx context.Context, v interface{}) (*model.ContainerImageRepoComparisonMappingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoComparisonMappingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageRepoComparisonRPMs2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMs(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRepoComparisonRPMs) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRepoComparisonRPMs(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonRPMsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageRepoComparisonRPMsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageRepoComparisonRPMsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageRepoComparisonRPMsFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonRPMsFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsFilter(ctx context.Context, v interface{}) (*model.ContainerImageRepoComparisonRPMsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoComparisonRPMsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageRepoComparisonRPMsInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoComparisonRPMsInput(ctx context.Context, v interface{}) (*model.ContainerImageRepoComparisonRPMsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoComparisonRPMsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageRepoEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRepoEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRepoEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageRepoElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoElemMatchFilter(ctx context.Context, v interface{}) (*model.ContainerImageRepoElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageRepoFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageRepoFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageRepoFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageRepoFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoFilter(ctx context.Context, v interface{}) (*model.ContainerImageRepoFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageRepoInput2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoInput(ctx context.Context, v interface{}) ([]*model.ContainerImageRepoInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageRepoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageRepoInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageRepoInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoInput(ctx context.Context, v interface{}) (*model.ContainerImageRepoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageRepoTag2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTag(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerImageRepoTag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerImageRepoTag2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerImageRepoTag2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTag(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRepoTag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRepoTag(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageRepoTagEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageRepoTagEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageRepoTagEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageRepoTagElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagElemMatchFilter(ctx context.Context, v interface{}) (*model.ContainerImageRepoTagElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoTagElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageRepoTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageRepoTagFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageRepoTagFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageRepoTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageRepoTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagFilter(ctx context.Context, v interface{}) (*model.ContainerImageRepoTagFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoTagFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageRepoTagInput2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagInput(ctx context.Context, v interface{}) ([]*model.ContainerImageRepoTagInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageRepoTagInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageRepoTagInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageRepoTagInput2ᚖexampleᚋgraphᚋmodelᚐContainerImageRepoTagInput(ctx context.Context, v interface{}) (*model.ContainerImageRepoTagInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageRepoTagInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageResponse(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageVulnerability2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerability(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerImageVulnerability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerImageVulnerability2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerability(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerImageVulnerability2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerability(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageVulnerability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageVulnerability(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageVulnerabilityEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageVulnerabilityEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageVulnerabilityEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageVulnerabilityFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageVulnerabilityFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageVulnerabilityFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFilter(ctx context.Context, v interface{}) (*model.ContainerImageVulnerabilityFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageVulnerabilityFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageVulnerabilityFixedByImage2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImage(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageVulnerabilityFixedByImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageVulnerabilityFixedByImage(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageVulnerabilityFixedByImageEdges2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageVulnerabilityFixedByImageEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageVulnerabilityFixedByImageEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityFixedByImageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageVulnerabilityFixedByImageFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageVulnerabilityFixedByImageFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageVulnerabilityFixedByImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityFixedByImageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByImageFilter(ctx context.Context, v interface{}) (*model.ContainerImageVulnerabilityFixedByImageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageVulnerabilityFixedByImageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageVulnerabilityFixedByRepository2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepository(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerImageVulnerabilityFixedByRepository) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerImageVulnerabilityFixedByRepository2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepository(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerImageVulnerabilityFixedByRepository2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepository(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageVulnerabilityFixedByRepository) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageVulnerabilityFixedByRepository(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityFixedByRepositoryElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryElemMatchFilter(ctx context.Context, v interface{}) (*model.ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageVulnerabilityFixedByRepositoryElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageVulnerabilityFixedByRepositoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageVulnerabilityFixedByRepositoryFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityFixedByRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityFixedByRepositoryFilter(ctx context.Context, v interface{}) (*model.ContainerImageVulnerabilityFixedByRepositoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageVulnerabilityFixedByRepositoryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageVulnerabilityPackage2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackage(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerImageVulnerabilityPackage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerImageVulnerabilityPackage2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerImageVulnerabilityPackage2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackage(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageVulnerabilityPackage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageVulnerabilityPackage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityPackageElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageElemMatchFilter(ctx context.Context, v interface{}) (*model.ContainerImageVulnerabilityPackageElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageVulnerabilityPackageElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageVulnerabilityPackageFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageVulnerabilityPackageFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageVulnerabilityPackageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityPackageFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPackageFilter(ctx context.Context, v interface{}) (*model.ContainerImageVulnerabilityPackageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageVulnerabilityPackageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerImageVulnerabilityPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageVulnerabilityPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageVulnerabilityPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerImageVulnerabilityTag2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTag(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerImageVulnerabilityTag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerImageVulnerabilityTag2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerImageVulnerabilityTag2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTag(ctx context.Context, sel ast.SelectionSet, v *model.ContainerImageVulnerabilityTag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerImageVulnerabilityTag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityTagElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagElemMatchFilter(ctx context.Context, v interface{}) (*model.ContainerImageVulnerabilityTagElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageVulnerabilityTagElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityTagFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx context.Context, v interface{}) ([]*model.ContainerImageVulnerabilityTagFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerImageVulnerabilityTagFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerImageVulnerabilityTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerImageVulnerabilityTagFilter2ᚖexampleᚋgraphᚋmodelᚐContainerImageVulnerabilityTagFilter(ctx context.Context, v interface{}) (*model.ContainerImageVulnerabilityTagFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerImageVulnerabilityTagFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerRepository2ᚕᚖexampleᚋgraphᚋmodelᚐContainerRepository(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerRepository) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerRepository2ᚖexampleᚋgraphᚋmodelᚐContainerRepository(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerRepository2ᚖexampleᚋgraphᚋmodelᚐContainerRepository(ctx context.Context, sel ast.SelectionSet, v *model.ContainerRepository) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerRepository(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerRepositoryEdges2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerRepositoryEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerRepositoryEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerRepositoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerRepositoryFilter(ctx context.Context, v interface{}) ([]*model.ContainerRepositoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerRepositoryFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerRepositoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryFilter(ctx context.Context, v interface{}) (*model.ContainerRepositoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerRepositoryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerRepositoryPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.ContainerRepositoryPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerRepositoryPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerRepositoryResponse2ᚖexampleᚋgraphᚋmodelᚐContainerRepositoryResponse(ctx context.Context, sel ast.SelectionSet, v *model.ContainerRepositoryResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerRepositoryResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerTagHistory2ᚕᚖexampleᚋgraphᚋmodelᚐContainerTagHistory(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerTagHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerTagHistory2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerTagHistory2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistory(ctx context.Context, sel ast.SelectionSet, v *model.ContainerTagHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerTagHistory(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerTagHistoryEdges2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerTagHistoryEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerTagHistoryEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerTagHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryFilter(ctx context.Context, v interface{}) ([]*model.ContainerTagHistoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerTagHistoryFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerTagHistoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerTagHistoryFilter2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryFilter(ctx context.Context, v interface{}) (*model.ContainerTagHistoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerTagHistoryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerTagHistoryResponse2ᚖexampleᚋgraphᚋmodelᚐContainerTagHistoryResponse(ctx context.Context, sel ast.SelectionSet, v *model.ContainerTagHistoryResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerTagHistoryResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerVendor2ᚖexampleᚋgraphᚋmodelᚐContainerVendor(ctx context.Context, sel ast.SelectionSet, v *model.ContainerVendor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerVendor(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerVendorContact2ᚖexampleᚋgraphᚋmodelᚐContainerVendorContact(ctx context.Context, sel ast.SelectionSet, v *model.ContainerVendorContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerVendorContact(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerVendorContactInput2ᚖexampleᚋgraphᚋmodelᚐContainerVendorContactInput(ctx context.Context, v interface{}) (*model.ContainerVendorContactInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerVendorContactInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerVendorEdges2ᚖexampleᚋgraphᚋmodelᚐContainerVendorEdges(ctx context.Context, sel ast.SelectionSet, v *model.ContainerVendorEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerVendorEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerVendorInput2ᚖexampleᚋgraphᚋmodelᚐContainerVendorInput(ctx context.Context, v interface{}) (*model.ContainerVendorInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerVendorInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainerVendorResponse2ᚖexampleᚋgraphᚋmodelᚐContainerVendorResponse(ctx context.Context, sel ast.SelectionSet, v *model.ContainerVendorResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerVendorResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOContainerVendorSocialMediaLinks2ᚕᚖexampleᚋgraphᚋmodelᚐContainerVendorSocialMediaLinks(ctx context.Context, sel ast.SelectionSet, v []*model.ContainerVendorSocialMediaLinks) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainerVendorSocialMediaLinks2ᚖexampleᚋgraphᚋmodelᚐContainerVendorSocialMediaLinks(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainerVendorSocialMediaLinks2ᚖexampleᚋgraphᚋmodelᚐContainerVendorSocialMediaLinks(ctx context.Context, sel ast.SelectionSet, v *model.ContainerVendorSocialMediaLinks) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContainerVendorSocialMediaLinks(ctx, sel, v)
}

func (ec *executionContext) unmarshalOContainerVendorSocialMediaLinksInput2ᚕᚖexampleᚋgraphᚋmodelᚐContainerVendorSocialMediaLinksInput(ctx context.Context, v interface{}) ([]*model.ContainerVendorSocialMediaLinksInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ContainerVendorSocialMediaLinksInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOContainerVendorSocialMediaLinksInput2ᚖexampleᚋgraphᚋmodelᚐContainerVendorSocialMediaLinksInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOContainerVendorSocialMediaLinksInput2ᚖexampleᚋgraphᚋmodelᚐContainerVendorSocialMediaLinksInput(ctx context.Context, v interface{}) (*model.ContainerVendorSocialMediaLinksInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContainerVendorSocialMediaLinksInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateTime2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODateTime2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODateTime2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalODateTime2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalODateTime2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalODateTimeFilter2ᚖexampleᚋgraphᚋmodelᚐDateTimeFilter(ctx context.Context, v interface{}) (*model.DateTimeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDateTimeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODescriptions2ᚖexampleᚋgraphᚋmodelᚐDescriptions(ctx context.Context, sel ast.SelectionSet, v *model.Descriptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Descriptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalODescriptionsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐDescriptionsFilter(ctx context.Context, v interface{}) ([]*model.DescriptionsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.DescriptionsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODescriptionsFilter2ᚖexampleᚋgraphᚋmodelᚐDescriptionsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODescriptionsFilter2ᚖexampleᚋgraphᚋmodelᚐDescriptionsFilter(ctx context.Context, v interface{}) (*model.DescriptionsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDescriptionsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODescriptionsInput2ᚖexampleᚋgraphᚋmodelᚐDescriptionsInput(ctx context.Context, v interface{}) (*model.DescriptionsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDescriptionsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEmail2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEmail2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEmail2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOEmail2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOEmail2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmail2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOEmailFilter2ᚖexampleᚋgraphᚋmodelᚐEmailFilter(ctx context.Context, v interface{}) (*model.EmailFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmailFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFAQSItems2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItems(ctx context.Context, sel ast.SelectionSet, v []*model.FAQSItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFAQSItems2ᚖexampleᚋgraphᚋmodelᚐFAQSItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFAQSItems2ᚖexampleᚋgraphᚋmodelᚐFAQSItems(ctx context.Context, sel ast.SelectionSet, v *model.FAQSItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FAQSItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFAQSItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.FAQSItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFAQSItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFAQSItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx context.Context, v interface{}) ([]*model.FAQSItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FAQSItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFAQSItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFAQSItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsFilter(ctx context.Context, v interface{}) (*model.FAQSItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFAQSItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFAQSItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐFAQSItemsInput(ctx context.Context, v interface{}) ([]*model.FAQSItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FAQSItemsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFAQSItemsInput2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFAQSItemsInput2ᚖexampleᚋgraphᚋmodelᚐFAQSItemsInput(ctx context.Context, v interface{}) (*model.FAQSItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFAQSItemsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFeaturesItems2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItems(ctx context.Context, sel ast.SelectionSet, v []*model.FeaturesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFeaturesItems2ᚖexampleᚋgraphᚋmodelᚐFeaturesItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFeaturesItems2ᚖexampleᚋgraphᚋmodelᚐFeaturesItems(ctx context.Context, sel ast.SelectionSet, v *model.FeaturesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FeaturesItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFeaturesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.FeaturesItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFeaturesItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFeaturesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx context.Context, v interface{}) ([]*model.FeaturesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FeaturesItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFeaturesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFeaturesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsFilter(ctx context.Context, v interface{}) (*model.FeaturesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFeaturesItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFeaturesItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐFeaturesItemsInput(ctx context.Context, v interface{}) ([]*model.FeaturesItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FeaturesItemsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFeaturesItemsInput2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFeaturesItemsInput2ᚖexampleᚋgraphᚋmodelᚐFeaturesItemsInput(ctx context.Context, v interface{}) (*model.FeaturesItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFeaturesItemsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕᚖfloat64(ctx context.Context, v interface{}) ([]*float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFloat2ᚖfloat64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕᚖfloat64(ctx context.Context, sel ast.SelectionSet, v []*float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOFloat2ᚖfloat64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOFloatFilter2ᚖexampleᚋgraphᚋmodelᚐFloatFilter(ctx context.Context, v interface{}) (*model.FloatFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFloatFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOForwarderStatus2ᚖexampleᚋgraphᚋmodelᚐForwarderStatus(ctx context.Context, sel ast.SelectionSet, v *model.ForwarderStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ForwarderStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOForwarderStatusInfo2ᚖexampleᚋgraphᚋmodelᚐForwarderStatusInfo(ctx context.Context, sel ast.SelectionSet, v *model.ForwarderStatusInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ForwarderStatusInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOForwarders2ᚖexampleᚋgraphᚋmodelᚐForwarders(ctx context.Context, sel ast.SelectionSet, v *model.Forwarders) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Forwarders(ctx, sel, v)
}

func (ec *executionContext) marshalOFreshnessGrade2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGrade(ctx context.Context, sel ast.SelectionSet, v []*model.FreshnessGrade) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFreshnessGrade2ᚖexampleᚋgraphᚋmodelᚐFreshnessGrade(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFreshnessGrade2ᚖexampleᚋgraphᚋmodelᚐFreshnessGrade(ctx context.Context, sel ast.SelectionSet, v *model.FreshnessGrade) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FreshnessGrade(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFreshnessGradeElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeElemMatchFilter(ctx context.Context, v interface{}) (*model.FreshnessGradeElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFreshnessGradeElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFreshnessGradeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx context.Context, v interface{}) ([]*model.FreshnessGradeFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FreshnessGradeFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFreshnessGradeFilter2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFreshnessGradeFilter2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeFilter(ctx context.Context, v interface{}) (*model.FreshnessGradeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFreshnessGradeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFreshnessGradeInput2ᚕᚖexampleᚋgraphᚋmodelᚐFreshnessGradeInput(ctx context.Context, v interface{}) ([]*model.FreshnessGradeInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FreshnessGradeInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFreshnessGradeInput2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFreshnessGradeInput2ᚖexampleᚋgraphᚋmodelᚐFreshnessGradeInput(ctx context.Context, v interface{}) (*model.FreshnessGradeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFreshnessGradeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHistory2ᚕᚖexampleᚋgraphᚋmodelᚐHistory(ctx context.Context, sel ast.SelectionSet, v []*model.History) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHistory2ᚖexampleᚋgraphᚋmodelᚐHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHistory2ᚖexampleᚋgraphᚋmodelᚐHistory(ctx context.Context, sel ast.SelectionSet, v *model.History) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._History(ctx, sel, v)
}

func (ec *executionContext) unmarshalOHistoryElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐHistoryElemMatchFilter(ctx context.Context, v interface{}) (*model.HistoryElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHistoryElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHistoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx context.Context, v interface{}) ([]*model.HistoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.HistoryFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOHistoryFilter2ᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOHistoryFilter2ᚖexampleᚋgraphᚋmodelᚐHistoryFilter(ctx context.Context, v interface{}) (*model.HistoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHistoryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOIntFilter2ᚖexampleᚋgraphᚋmodelᚐIntFilter(ctx context.Context, v interface{}) (*model.IntFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIssue2ᚕᚖexampleᚋgraphᚋmodelᚐIssue(ctx context.Context, sel ast.SelectionSet, v []*model.Issue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIssue2ᚖexampleᚋgraphᚋmodelᚐIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOIssue2ᚖexampleᚋgraphᚋmodelᚐIssue(ctx context.Context, sel ast.SelectionSet, v *model.Issue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Issue(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIssueElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐIssueElemMatchFilter(ctx context.Context, v interface{}) (*model.IssueElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIssueElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOIssueFilter2ᚕᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx context.Context, v interface{}) ([]*model.IssueFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.IssueFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOIssueFilter2ᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOIssueFilter2ᚖexampleᚋgraphᚋmodelᚐIssueFilter(ctx context.Context, v interface{}) (*model.IssueFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIssueFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLabel2ᚕᚖexampleᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v []*model.Label) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLabel2ᚖexampleᚋgraphᚋmodelᚐLabel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLabel2ᚖexampleᚋgraphᚋmodelᚐLabel(ctx context.Context, sel ast.SelectionSet, v *model.Label) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Label(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLabelElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐLabelElemMatchFilter(ctx context.Context, v interface{}) (*model.LabelElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLabelElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLabelFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) ([]*model.LabelFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LabelFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLabelFilter2ᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLabelFilter2ᚖexampleᚋgraphᚋmodelᚐLabelFilter(ctx context.Context, v interface{}) (*model.LabelFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLabelFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLabelInput2ᚕᚖexampleᚋgraphᚋmodelᚐLabelInput(ctx context.Context, v interface{}) ([]*model.LabelInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LabelInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLabelInput2ᚖexampleᚋgraphᚋmodelᚐLabelInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLabelInput2ᚖexampleᚋgraphᚋmodelᚐLabelInput(ctx context.Context, v interface{}) (*model.LabelInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLabelInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLegal2ᚖexampleᚋgraphᚋmodelᚐLegal(ctx context.Context, sel ast.SelectionSet, v *model.Legal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Legal(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLegalFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLegalFilter(ctx context.Context, v interface{}) ([]*model.LegalFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LegalFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLegalFilter2ᚖexampleᚋgraphᚋmodelᚐLegalFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLegalFilter2ᚖexampleᚋgraphᚋmodelᚐLegalFilter(ctx context.Context, v interface{}) (*model.LegalFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLegalFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLegalInput2ᚖexampleᚋgraphᚋmodelᚐLegalInput(ctx context.Context, v interface{}) (*model.LegalInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLegalInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLinkedResourcesItems2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItems(ctx context.Context, sel ast.SelectionSet, v []*model.LinkedResourcesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLinkedResourcesItems2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLinkedResourcesItems2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItems(ctx context.Context, sel ast.SelectionSet, v *model.LinkedResourcesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LinkedResourcesItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLinkedResourcesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.LinkedResourcesItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLinkedResourcesItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLinkedResourcesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx context.Context, v interface{}) ([]*model.LinkedResourcesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LinkedResourcesItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLinkedResourcesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLinkedResourcesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsFilter(ctx context.Context, v interface{}) (*model.LinkedResourcesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLinkedResourcesItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLinkedResourcesItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsInput(ctx context.Context, v interface{}) ([]*model.LinkedResourcesItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LinkedResourcesItemsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLinkedResourcesItemsInput2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLinkedResourcesItemsInput2ᚖexampleᚋgraphᚋmodelᚐLinkedResourcesItemsInput(ctx context.Context, v interface{}) (*model.LinkedResourcesItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLinkedResourcesItemsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOListSizeFilter2ᚖexampleᚋgraphᚋmodelᚐListSizeFilter(ctx context.Context, v interface{}) (*model.ListSizeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputListSizeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLogo2ᚖexampleᚋgraphᚋmodelᚐLogo(ctx context.Context, sel ast.SelectionSet, v *model.Logo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Logo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLogoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐLogoFilter(ctx context.Context, v interface{}) ([]*model.LogoFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.LogoFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLogoFilter2ᚖexampleᚋgraphᚋmodelᚐLogoFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLogoFilter2ᚖexampleᚋgraphᚋmodelᚐLogoFilter(ctx context.Context, v interface{}) (*model.LogoFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLogoFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLogoInput2ᚖexampleᚋgraphᚋmodelᚐLogoInput(ctx context.Context, v interface{}) (*model.LogoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLogoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMarketplace2ᚖexampleᚋgraphᚋmodelᚐMarketplace(ctx context.Context, sel ast.SelectionSet, v *model.Marketplace) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Marketplace(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMarketplaceFilter2ᚕᚖexampleᚋgraphᚋmodelᚐMarketplaceFilter(ctx context.Context, v interface{}) ([]*model.MarketplaceFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.MarketplaceFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMarketplaceFilter2ᚖexampleᚋgraphᚋmodelᚐMarketplaceFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMarketplaceFilter2ᚖexampleᚋgraphᚋmodelᚐMarketplaceFilter(ctx context.Context, v interface{}) (*model.MarketplaceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMarketplaceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOObjectID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObjectID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOOpenPGPEncrypted2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOpenPGPEncrypted2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOOperatorBundle2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundle(ctx context.Context, sel ast.SelectionSet, v []*model.OperatorBundle) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOperatorBundle2ᚖexampleᚋgraphᚋmodelᚐOperatorBundle(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOperatorBundle2ᚖexampleᚋgraphᚋmodelᚐOperatorBundle(ctx context.Context, sel ast.SelectionSet, v *model.OperatorBundle) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorBundle(ctx, sel, v)
}

func (ec *executionContext) marshalOOperatorBundleAnnotation2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotation(ctx context.Context, sel ast.SelectionSet, v *model.OperatorBundleAnnotation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorBundleAnnotation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOperatorBundleAnnotationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotationFilter(ctx context.Context, v interface{}) ([]*model.OperatorBundleAnnotationFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OperatorBundleAnnotationFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOperatorBundleAnnotationFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotationFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOperatorBundleAnnotationFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleAnnotationFilter(ctx context.Context, v interface{}) (*model.OperatorBundleAnnotationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorBundleAnnotationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOperatorBundleFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleFilter(ctx context.Context, v interface{}) ([]*model.OperatorBundleFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OperatorBundleFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOperatorBundleFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOperatorBundleFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleFilter(ctx context.Context, v interface{}) (*model.OperatorBundleFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorBundleFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOperatorBundleInstallMode2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallMode(ctx context.Context, sel ast.SelectionSet, v []*model.OperatorBundleInstallMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOperatorBundleInstallMode2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallMode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOperatorBundleInstallMode2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallMode(ctx context.Context, sel ast.SelectionSet, v *model.OperatorBundleInstallMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorBundleInstallMode(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOperatorBundleInstallModeElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeElemMatchFilter(ctx context.Context, v interface{}) (*model.OperatorBundleInstallModeElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorBundleInstallModeElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOperatorBundleInstallModeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx context.Context, v interface{}) ([]*model.OperatorBundleInstallModeFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OperatorBundleInstallModeFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOperatorBundleInstallModeFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOperatorBundleInstallModeFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundleInstallModeFilter(ctx context.Context, v interface{}) (*model.OperatorBundleInstallModeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorBundleInstallModeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOperatorBundlePaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlePaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.OperatorBundlePaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorBundlePaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOOperatorBundlesItems2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItems(ctx context.Context, sel ast.SelectionSet, v []*model.OperatorBundlesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOperatorBundlesItems2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOperatorBundlesItems2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItems(ctx context.Context, sel ast.SelectionSet, v *model.OperatorBundlesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorBundlesItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOperatorBundlesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.OperatorBundlesItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorBundlesItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOperatorBundlesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx context.Context, v interface{}) ([]*model.OperatorBundlesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OperatorBundlesItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOperatorBundlesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOperatorBundlesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsFilter(ctx context.Context, v interface{}) (*model.OperatorBundlesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorBundlesItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOperatorBundlesItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsInput(ctx context.Context, v interface{}) ([]*model.OperatorBundlesItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OperatorBundlesItemsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOperatorBundlesItemsInput2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOperatorBundlesItemsInput2ᚖexampleᚋgraphᚋmodelᚐOperatorBundlesItemsInput(ctx context.Context, v interface{}) (*model.OperatorBundlesItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorBundlesItemsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOperatorIndex2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorIndex(ctx context.Context, sel ast.SelectionSet, v []*model.OperatorIndex) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOperatorIndex2ᚖexampleᚋgraphᚋmodelᚐOperatorIndex(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOperatorIndex2ᚖexampleᚋgraphᚋmodelᚐOperatorIndex(ctx context.Context, sel ast.SelectionSet, v *model.OperatorIndex) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorIndex(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOperatorIndexFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorIndexFilter(ctx context.Context, v interface{}) ([]*model.OperatorIndexFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OperatorIndexFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOperatorIndexFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorIndexFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOperatorIndexFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorIndexFilter(ctx context.Context, v interface{}) (*model.OperatorIndexFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorIndexFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOperatorPackage2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorPackage(ctx context.Context, sel ast.SelectionSet, v []*model.OperatorPackage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOperatorPackage2ᚖexampleᚋgraphᚋmodelᚐOperatorPackage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOperatorPackage2ᚖexampleᚋgraphᚋmodelᚐOperatorPackage(ctx context.Context, sel ast.SelectionSet, v *model.OperatorPackage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorPackage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOperatorPackageFilter2ᚕᚖexampleᚋgraphᚋmodelᚐOperatorPackageFilter(ctx context.Context, v interface{}) ([]*model.OperatorPackageFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OperatorPackageFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOperatorPackageFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorPackageFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOperatorPackageFilter2ᚖexampleᚋgraphᚋmodelᚐOperatorPackageFilter(ctx context.Context, v interface{}) (*model.OperatorPackageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperatorPackageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOParsedData2ᚖexampleᚋgraphᚋmodelᚐParsedData(ctx context.Context, sel ast.SelectionSet, v *model.ParsedData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ParsedData(ctx, sel, v)
}

func (ec *executionContext) unmarshalOParsedDataFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataFilter(ctx context.Context, v interface{}) ([]*model.ParsedDataFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ParsedDataFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOParsedDataFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOParsedDataFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataFilter(ctx context.Context, v interface{}) (*model.ParsedDataFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputParsedDataFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOParsedDataInput2ᚖexampleᚋgraphᚋmodelᚐParsedDataInput(ctx context.Context, v interface{}) (*model.ParsedDataInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputParsedDataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOParsedDataRepo2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepo(ctx context.Context, sel ast.SelectionSet, v []*model.ParsedDataRepo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOParsedDataRepo2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOParsedDataRepo2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepo(ctx context.Context, sel ast.SelectionSet, v *model.ParsedDataRepo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ParsedDataRepo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOParsedDataRepoElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoElemMatchFilter(ctx context.Context, v interface{}) (*model.ParsedDataRepoElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputParsedDataRepoElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOParsedDataRepoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx context.Context, v interface{}) ([]*model.ParsedDataRepoFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ParsedDataRepoFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOParsedDataRepoFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOParsedDataRepoFilter2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoFilter(ctx context.Context, v interface{}) (*model.ParsedDataRepoFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputParsedDataRepoFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOParsedDataRepoInput2ᚕᚖexampleᚋgraphᚋmodelᚐParsedDataRepoInput(ctx context.Context, v interface{}) ([]*model.ParsedDataRepoInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ParsedDataRepoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOParsedDataRepoInput2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOParsedDataRepoInput2ᚖexampleᚋgraphᚋmodelᚐParsedDataRepoInput(ctx context.Context, v interface{}) (*model.ParsedDataRepoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputParsedDataRepoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductListing2ᚕᚖexampleᚋgraphᚋmodelᚐProductListing(ctx context.Context, sel ast.SelectionSet, v []*model.ProductListing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductListing2ᚖexampleᚋgraphᚋmodelᚐProductListing(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductListing2ᚖexampleᚋgraphᚋmodelᚐProductListing(ctx context.Context, sel ast.SelectionSet, v *model.ProductListing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductListing(ctx, sel, v)
}

func (ec *executionContext) marshalOProductListingEdges2ᚖexampleᚋgraphᚋmodelᚐProductListingEdges(ctx context.Context, sel ast.SelectionSet, v *model.ProductListingEdges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductListingEdges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductListingFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx context.Context, v interface{}) ([]*model.ProductListingFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProductListingFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProductListingFilter2ᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProductListingFilter2ᚖexampleᚋgraphᚋmodelᚐProductListingFilter(ctx context.Context, v interface{}) (*model.ProductListingFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductListingFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProductListingInput2ᚖexampleᚋgraphᚋmodelᚐProductListingInput(ctx context.Context, v interface{}) (*model.ProductListingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProductListingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProductListingPaginatedResponse2ᚖexampleᚋgraphᚋmodelᚐProductListingPaginatedResponse(ctx context.Context, sel ast.SelectionSet, v *model.ProductListingPaginatedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductListingPaginatedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOProductListingResponse2ᚖexampleᚋgraphᚋmodelᚐProductListingResponse(ctx context.Context, sel ast.SelectionSet, v *model.ProductListingResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductListingResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOProvidedAPIsItems2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItems(ctx context.Context, sel ast.SelectionSet, v []*model.ProvidedAPIsItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProvidedAPIsItems2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProvidedAPIsItems2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItems(ctx context.Context, sel ast.SelectionSet, v *model.ProvidedAPIsItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProvidedAPIsItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProvidedAPIsItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.ProvidedAPIsItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProvidedAPIsItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProvidedAPIsItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx context.Context, v interface{}) ([]*model.ProvidedAPIsItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ProvidedAPIsItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOProvidedAPIsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProvidedAPIsItemsFilter2ᚖexampleᚋgraphᚋmodelᚐProvidedAPIsItemsFilter(ctx context.Context, v interface{}) (*model.ProvidedAPIsItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProvidedAPIsItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPullRequest2ᚖexampleᚋgraphᚋmodelᚐPullRequest(ctx context.Context, sel ast.SelectionSet, v *model.PullRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PullRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPullRequestFilter2ᚕᚖexampleᚋgraphᚋmodelᚐPullRequestFilter(ctx context.Context, v interface{}) ([]*model.PullRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.PullRequestFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPullRequestFilter2ᚖexampleᚋgraphᚋmodelᚐPullRequestFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPullRequestFilter2ᚖexampleᚋgraphᚋmodelᚐPullRequestFilter(ctx context.Context, v interface{}) (*model.PullRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPullRequestFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPullRequestInput2ᚖexampleᚋgraphᚋmodelᚐPullRequestInput(ctx context.Context, v interface{}) (*model.PullRequestInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPullRequestInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuickStartConfiguration2ᚖexampleᚋgraphᚋmodelᚐQuickStartConfiguration(ctx context.Context, sel ast.SelectionSet, v *model.QuickStartConfiguration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuickStartConfiguration(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQuickStartConfigurationFilter2ᚕᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationFilter(ctx context.Context, v interface{}) ([]*model.QuickStartConfigurationFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.QuickStartConfigurationFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOQuickStartConfigurationFilter2ᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOQuickStartConfigurationFilter2ᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationFilter(ctx context.Context, v interface{}) (*model.QuickStartConfigurationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQuickStartConfigurationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQuickStartConfigurationInput2ᚖexampleᚋgraphᚋmodelᚐQuickStartConfigurationInput(ctx context.Context, v interface{}) (*model.QuickStartConfigurationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQuickStartConfigurationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORedHatContainerAdvisory2ᚕᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisory(ctx context.Context, sel ast.SelectionSet, v []*model.RedHatContainerAdvisory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORedHatContainerAdvisory2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORedHatContainerAdvisory2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisory(ctx context.Context, sel ast.SelectionSet, v *model.RedHatContainerAdvisory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RedHatContainerAdvisory(ctx, sel, v)
}

func (ec *executionContext) unmarshalORedHatContainerAdvisoryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryFilter(ctx context.Context, v interface{}) ([]*model.RedHatContainerAdvisoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RedHatContainerAdvisoryFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORedHatContainerAdvisoryFilter2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORedHatContainerAdvisoryFilter2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryFilter(ctx context.Context, v interface{}) (*model.RedHatContainerAdvisoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRedHatContainerAdvisoryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORedHatContainerAdvisoryResponse2ᚖexampleᚋgraphᚋmodelᚐRedHatContainerAdvisoryResponse(ctx context.Context, sel ast.SelectionSet, v *model.RedHatContainerAdvisoryResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RedHatContainerAdvisoryResponse(ctx, sel, v)
}

func (ec *executionContext) marshalORelatedImagesItems2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItems(ctx context.Context, sel ast.SelectionSet, v []*model.RelatedImagesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORelatedImagesItems2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORelatedImagesItems2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItems(ctx context.Context, sel ast.SelectionSet, v *model.RelatedImagesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RelatedImagesItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalORelatedImagesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.RelatedImagesItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRelatedImagesItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORelatedImagesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx context.Context, v interface{}) ([]*model.RelatedImagesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RelatedImagesItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORelatedImagesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORelatedImagesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐRelatedImagesItemsFilter(ctx context.Context, v interface{}) (*model.RelatedImagesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRelatedImagesItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepositoryContentStreamGrades2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGrades(ctx context.Context, sel ast.SelectionSet, v []*model.RepositoryContentStreamGrades) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepositoryContentStreamGrades2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGrades(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORepositoryContentStreamGrades2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGrades(ctx context.Context, sel ast.SelectionSet, v *model.RepositoryContentStreamGrades) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryContentStreamGrades(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepositoryContentStreamGradesElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesElemMatchFilter(ctx context.Context, v interface{}) (*model.RepositoryContentStreamGradesElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepositoryContentStreamGradesElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORepositoryContentStreamGradesFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx context.Context, v interface{}) ([]*model.RepositoryContentStreamGradesFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RepositoryContentStreamGradesFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORepositoryContentStreamGradesFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORepositoryContentStreamGradesFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryContentStreamGradesFilter(ctx context.Context, v interface{}) (*model.RepositoryContentStreamGradesFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepositoryContentStreamGradesFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepositoryDisplayData2ᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayData(ctx context.Context, sel ast.SelectionSet, v *model.RepositoryDisplayData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryDisplayData(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepositoryDisplayDataFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayDataFilter(ctx context.Context, v interface{}) ([]*model.RepositoryDisplayDataFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RepositoryDisplayDataFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORepositoryDisplayDataFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayDataFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORepositoryDisplayDataFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDisplayDataFilter(ctx context.Context, v interface{}) (*model.RepositoryDisplayDataFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepositoryDisplayDataFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepositoryDocumentationLink2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLink(ctx context.Context, sel ast.SelectionSet, v []*model.RepositoryDocumentationLink) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepositoryDocumentationLink2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORepositoryDocumentationLink2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLink(ctx context.Context, sel ast.SelectionSet, v *model.RepositoryDocumentationLink) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryDocumentationLink(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepositoryDocumentationLinkElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkElemMatchFilter(ctx context.Context, v interface{}) (*model.RepositoryDocumentationLinkElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepositoryDocumentationLinkElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORepositoryDocumentationLinkFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx context.Context, v interface{}) ([]*model.RepositoryDocumentationLinkFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RepositoryDocumentationLinkFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORepositoryDocumentationLinkFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORepositoryDocumentationLinkFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryDocumentationLinkFilter(ctx context.Context, v interface{}) (*model.RepositoryDocumentationLinkFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepositoryDocumentationLinkFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepositoryLabelOverride2ᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverride(ctx context.Context, sel ast.SelectionSet, v *model.RepositoryLabelOverride) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryLabelOverride(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepositoryLabelOverrideFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverrideFilter(ctx context.Context, v interface{}) ([]*model.RepositoryLabelOverrideFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RepositoryLabelOverrideFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORepositoryLabelOverrideFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverrideFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORepositoryLabelOverrideFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryLabelOverrideFilter(ctx context.Context, v interface{}) (*model.RepositoryLabelOverrideFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepositoryLabelOverrideFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepositoryMetrics2ᚖexampleᚋgraphᚋmodelᚐRepositoryMetrics(ctx context.Context, sel ast.SelectionSet, v *model.RepositoryMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepositoryMetricsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryMetricsFilter(ctx context.Context, v interface{}) ([]*model.RepositoryMetricsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RepositoryMetricsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORepositoryMetricsFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryMetricsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORepositoryMetricsFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryMetricsFilter(ctx context.Context, v interface{}) (*model.RepositoryMetricsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepositoryMetricsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORepositoryRunsOn2ᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOn(ctx context.Context, sel ast.SelectionSet, v *model.RepositoryRunsOn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryRunsOn(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepositoryRunsOnFilter2ᚕᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOnFilter(ctx context.Context, v interface{}) ([]*model.RepositoryRunsOnFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RepositoryRunsOnFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORepositoryRunsOnFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOnFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORepositoryRunsOnFilter2ᚖexampleᚋgraphᚋmodelᚐRepositoryRunsOnFilter(ctx context.Context, v interface{}) (*model.RepositoryRunsOnFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRepositoryRunsOnFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOResponseError2ᚖexampleᚋgraphᚋmodelᚐResponseError(ctx context.Context, sel ast.SelectionSet, v *model.ResponseError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResponseError(ctx, sel, v)
}

func (ec *executionContext) marshalOResults2ᚖexampleᚋgraphᚋmodelᚐResults(ctx context.Context, sel ast.SelectionSet, v *model.Results) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Results(ctx, sel, v)
}

func (ec *executionContext) unmarshalOResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐResultsFilter(ctx context.Context, v interface{}) ([]*model.ResultsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ResultsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOResultsFilter2ᚖexampleᚋgraphᚋmodelᚐResultsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOResultsFilter2ᚖexampleᚋgraphᚋmodelᚐResultsFilter(ctx context.Context, v interface{}) (*model.ResultsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputResultsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOResultsInput2ᚖexampleᚋgraphᚋmodelᚐResultsInput(ctx context.Context, v interface{}) (*model.ResultsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputResultsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORpmsItems2ᚕᚖexampleᚋgraphᚋmodelᚐRpmsItems(ctx context.Context, sel ast.SelectionSet, v []*model.RpmsItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORpmsItems2ᚖexampleᚋgraphᚋmodelᚐRpmsItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORpmsItems2ᚖexampleᚋgraphᚋmodelᚐRpmsItems(ctx context.Context, sel ast.SelectionSet, v *model.RpmsItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RpmsItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalORpmsItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐRpmsItemsInput(ctx context.Context, v interface{}) ([]*model.RpmsItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RpmsItemsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORpmsItemsInput2ᚖexampleᚋgraphᚋmodelᚐRpmsItemsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORpmsItemsInput2ᚖexampleᚋgraphᚋmodelᚐRpmsItemsInput(ctx context.Context, v interface{}) (*model.RpmsItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRpmsItemsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSearchAliasesItems2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItems(ctx context.Context, sel ast.SelectionSet, v []*model.SearchAliasesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSearchAliasesItems2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSearchAliasesItems2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItems(ctx context.Context, sel ast.SelectionSet, v *model.SearchAliasesItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SearchAliasesItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSearchAliasesItemsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsElemMatchFilter(ctx context.Context, v interface{}) (*model.SearchAliasesItemsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSearchAliasesItemsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSearchAliasesItemsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx context.Context, v interface{}) ([]*model.SearchAliasesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SearchAliasesItemsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSearchAliasesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSearchAliasesItemsFilter2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsFilter(ctx context.Context, v interface{}) (*model.SearchAliasesItemsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSearchAliasesItemsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSearchAliasesItemsInput2ᚕᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsInput(ctx context.Context, v interface{}) ([]*model.SearchAliasesItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SearchAliasesItemsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSearchAliasesItemsInput2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSearchAliasesItemsInput2ᚖexampleᚋgraphᚋmodelᚐSearchAliasesItemsInput(ctx context.Context, v interface{}) (*model.SearchAliasesItemsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSearchAliasesItemsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSemVer2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSemVer2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSignatureInfo2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfo(ctx context.Context, sel ast.SelectionSet, v []*model.SignatureInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSignatureInfo2ᚖexampleᚋgraphᚋmodelᚐSignatureInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSignatureInfo2ᚖexampleᚋgraphᚋmodelᚐSignatureInfo(ctx context.Context, sel ast.SelectionSet, v *model.SignatureInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SignatureInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSignatureInfoElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoElemMatchFilter(ctx context.Context, v interface{}) (*model.SignatureInfoElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSignatureInfoElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSignatureInfoFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx context.Context, v interface{}) ([]*model.SignatureInfoFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SignatureInfoFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSignatureInfoFilter2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSignatureInfoFilter2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoFilter(ctx context.Context, v interface{}) (*model.SignatureInfoFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSignatureInfoFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSignatureInfoInput2ᚕᚖexampleᚋgraphᚋmodelᚐSignatureInfoInput(ctx context.Context, v interface{}) ([]*model.SignatureInfoInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SignatureInfoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSignatureInfoInput2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSignatureInfoInput2ᚖexampleᚋgraphᚋmodelᚐSignatureInfoInput(ctx context.Context, v interface{}) (*model.SignatureInfoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSignatureInfoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortBy2ᚕᚖexampleᚋgraphᚋmodelᚐSortBy(ctx context.Context, v interface{}) ([]*model.SortBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SortBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSortBy2ᚖexampleᚋgraphᚋmodelᚐSortBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSortBy2ᚖexampleᚋgraphᚋmodelᚐSortBy(ctx context.Context, v interface{}) (*model.SortBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSortBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortDirectionEnum2ᚖexampleᚋgraphᚋmodelᚐSortDirectionEnum(ctx context.Context, v interface{}) (*model.SortDirectionEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SortDirectionEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortDirectionEnum2ᚖexampleᚋgraphᚋmodelᚐSortDirectionEnum(ctx context.Context, sel ast.SelectionSet, v *model.SortDirectionEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOStringFilter2ᚖexampleᚋgraphᚋmodelᚐStringFilter(ctx context.Context, v interface{}) (*model.StringFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringIndexFilter2ᚖexampleᚋgraphᚋmodelᚐStringIndexFilter(ctx context.Context, v interface{}) (*model.StringIndexFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringIndexFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSupport2ᚖexampleᚋgraphᚋmodelᚐSupport(ctx context.Context, sel ast.SelectionSet, v *model.Support) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Support(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSupportFilter2ᚕᚖexampleᚋgraphᚋmodelᚐSupportFilter(ctx context.Context, v interface{}) ([]*model.SupportFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SupportFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSupportFilter2ᚖexampleᚋgraphᚋmodelᚐSupportFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSupportFilter2ᚖexampleᚋgraphᚋmodelᚐSupportFilter(ctx context.Context, v interface{}) (*model.SupportFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSupportFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSupportInput2ᚖexampleᚋgraphᚋmodelᚐSupportInput(ctx context.Context, v interface{}) (*model.SupportInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSupportInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestLibrary2ᚖexampleᚋgraphᚋmodelᚐTestLibrary(ctx context.Context, sel ast.SelectionSet, v *model.TestLibrary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestLibrary(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestLibraryFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestLibraryFilter(ctx context.Context, v interface{}) ([]*model.TestLibraryFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TestLibraryFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTestLibraryFilter2ᚖexampleᚋgraphᚋmodelᚐTestLibraryFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestLibraryFilter2ᚖexampleᚋgraphᚋmodelᚐTestLibraryFilter(ctx context.Context, v interface{}) (*model.TestLibraryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestLibraryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestLibraryInput2ᚖexampleᚋgraphᚋmodelᚐTestLibraryInput(ctx context.Context, v interface{}) (*model.TestLibraryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestLibraryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestResults2ᚕᚖexampleᚋgraphᚋmodelᚐTestResults(ctx context.Context, sel ast.SelectionSet, v []*model.TestResults) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTestResults2ᚖexampleᚋgraphᚋmodelᚐTestResults(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTestResults2ᚖexampleᚋgraphᚋmodelᚐTestResults(ctx context.Context, sel ast.SelectionSet, v *model.TestResults) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestResults(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestResultsElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsElemMatchFilter(ctx context.Context, v interface{}) (*model.TestResultsElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestResultsElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestResultsFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx context.Context, v interface{}) ([]*model.TestResultsFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TestResultsFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTestResultsFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestResultsFilter2ᚖexampleᚋgraphᚋmodelᚐTestResultsFilter(ctx context.Context, v interface{}) (*model.TestResultsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestResultsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestResultsInput2ᚕᚖexampleᚋgraphᚋmodelᚐTestResultsInput(ctx context.Context, v interface{}) ([]*model.TestResultsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TestResultsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTestResultsInput2ᚖexampleᚋgraphᚋmodelᚐTestResultsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestResultsInput2ᚖexampleᚋgraphᚋmodelᚐTestResultsInput(ctx context.Context, v interface{}) (*model.TestResultsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestResultsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTestedOn2ᚖexampleᚋgraphᚋmodelᚐTestedOn(ctx context.Context, sel ast.SelectionSet, v *model.TestedOn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestedOn(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTestedOnFilter2ᚕᚖexampleᚋgraphᚋmodelᚐTestedOnFilter(ctx context.Context, v interface{}) ([]*model.TestedOnFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TestedOnFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTestedOnFilter2ᚖexampleᚋgraphᚋmodelᚐTestedOnFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTestedOnFilter2ᚖexampleᚋgraphᚋmodelᚐTestedOnFilter(ctx context.Context, v interface{}) (*model.TestedOnFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestedOnFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTestedOnInput2ᚖexampleᚋgraphᚋmodelᚐTestedOnInput(ctx context.Context, v interface{}) (*model.TestedOnInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestedOnInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOURI2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOURI2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOURI2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOURI2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOURI2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURI2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOURIFilter2ᚖexampleᚋgraphᚋmodelᚐURIFilter(ctx context.Context, v interface{}) (*model.URIFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputURIFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUncompressedLayerSize2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSize(ctx context.Context, sel ast.SelectionSet, v []*model.UncompressedLayerSize) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUncompressedLayerSize2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSize(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUncompressedLayerSize2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSize(ctx context.Context, sel ast.SelectionSet, v *model.UncompressedLayerSize) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UncompressedLayerSize(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUncompressedLayerSizeElemMatchFilter2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeElemMatchFilter(ctx context.Context, v interface{}) (*model.UncompressedLayerSizeElemMatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUncompressedLayerSizeElemMatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUncompressedLayerSizeFilter2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx context.Context, v interface{}) ([]*model.UncompressedLayerSizeFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UncompressedLayerSizeFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUncompressedLayerSizeFilter2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUncompressedLayerSizeFilter2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeFilter(ctx context.Context, v interface{}) (*model.UncompressedLayerSizeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUncompressedLayerSizeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUncompressedLayerSizeInput2ᚕᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeInput(ctx context.Context, v interface{}) ([]*model.UncompressedLayerSizeInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UncompressedLayerSizeInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUncompressedLayerSizeInput2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUncompressedLayerSizeInput2ᚖexampleᚋgraphᚋmodelᚐUncompressedLayerSizeInput(ctx context.Context, v interface{}) (*model.UncompressedLayerSizeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUncompressedLayerSizeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
